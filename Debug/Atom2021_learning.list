
Atom2021_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009578  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001245c  08009778  08009778  00019778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bbd4  0801bbd4  00030264  2**0
                  CONTENTS
  4 .ARM          00000008  0801bbd4  0801bbd4  0002bbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bbdc  0801bbdc  00030264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bbdc  0801bbdc  0002bbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bbe0  0801bbe0  0002bbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0801bbe4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000091e4  20000264  0801be48  00030264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009448  0801be48  00039448  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017992  00000000  00000000  00030292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003472  00000000  00000000  00047c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0004b098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0004c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a714  00000000  00000000  0004d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f29  00000000  00000000  00077d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe29f  00000000  00000000  0008ec65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018cf04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000603c  00000000  00000000  0018cf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000264 	.word	0x20000264
 800021c:	00000000 	.word	0x00000000
 8000220:	08009760 	.word	0x08009760

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000268 	.word	0x20000268
 800023c:	08009760 	.word	0x08009760

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <getPCTL>:
struct ihysl _ihysl;
struct ihysh _ihysh;
struct tthl _tthl;
struct tthh _tthh;

uint8_t getPCTL(void){ return _pctl.PCTL; }
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <getPCTL+0x14>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000314 	.word	0x20000314

08000600 <getRST>:
uint8_t getRST(void){	return _rst.RST; }
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <getRST+0x14>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000308 	.word	0x20000308

08000618 <getFPSC>:
uint8_t getFPSC(void){ return _fpsc.FPS & 0x01; }
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <getFPSC+0x18>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	200002fc 	.word	0x200002fc

08000634 <getINTC>:
uint8_t getINTC(void){ return (_intc.INTMOD << 1 | _intc.INTEN) & 0x03; }
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <getINTC+0x34>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	b25a      	sxtb	r2, r3
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <getINTC+0x34>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	b25b      	sxtb	r3, r3
 8000652:	4313      	orrs	r3, r2
 8000654:	b25b      	sxtb	r3, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 0303 	and.w	r3, r3, #3
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	200002e0 	.word	0x200002e0

0800066c <min>:
uint8_t getINTLH(void){ return (_intlh.INT_LVL_L & 0xF); }
uint8_t getIHYSL(void){ return _ihysl.INT_HYS; }
uint8_t getIHYSH(void){ return (_ihysh.INT_HYS & 0xF); }
uint8_t getTTHL(void){ return _tthl.TEMP; }
uint8_t getTTHH(void){ return ( (_tthh.SIGN << 3) | _tthh.TEMP) & 0xF; }			
uint8_t min(uint8_t a, uint8_t b){ return a < b ? a : b; }
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4293      	cmp	r3, r2
 8000682:	bf28      	it	cs
 8000684:	4613      	movcs	r3, r2
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <amg88xxInit>:
    @param  addr Optional I2C address the sensor can be found on. Default is 0x69
    @returns True if device is set up, false on any failure
*/
/**************************************************************************/
int amg88xxInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	//enter normal mode
	_pctl.PCTL = AMG88xx_NORMAL_MODE;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <amg88xxInit+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
	write8(AMG88xx_PCTL, getPCTL());
 800069e:	f7ff ffa3 	bl	80005e8 <getPCTL>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4619      	mov	r1, r3
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8af 	bl	800080a <write8>
	
	//software reset
	_rst.RST = AMG88xx_INITIAL_RESET;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <amg88xxInit+0x58>)
 80006ae:	223f      	movs	r2, #63	; 0x3f
 80006b0:	701a      	strb	r2, [r3, #0]
	write8(AMG88xx_RST, getRST());
 80006b2:	f7ff ffa5 	bl	8000600 <getRST>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4619      	mov	r1, r3
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 f8a5 	bl	800080a <write8>
	
	//disable interrupts by default
	disableInterrupt();
 80006c0:	f000 f818 	bl	80006f4 <disableInterrupt>
	
	//set to 10 FPS
	_fpsc.FPS = AMG88xx_FPS_10;
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <amg88xxInit+0x5c>)
 80006c6:	7813      	ldrb	r3, [r2, #0]
 80006c8:	f36f 0300 	bfc	r3, #0, #1
 80006cc:	7013      	strb	r3, [r2, #0]
	write8(AMG88xx_FPSC, getFPSC());
 80006ce:	f7ff ffa3 	bl	8000618 <getFPSC>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4619      	mov	r1, r3
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 f897 	bl	800080a <write8>

	HAL_Delay(100);
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f002 f9af 	bl	8002a40 <HAL_Delay>

	return 0;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000314 	.word	0x20000314
 80006ec:	20000308 	.word	0x20000308
 80006f0:	200002fc 	.word	0x200002fc

080006f4 <disableInterrupt>:
/*! 
    @brief  disable the interrupt pin on the device
*/
/**************************************************************************/
void disableInterrupt()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	_intc.INTEN = 0;
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <disableInterrupt+0x20>)
 80006fa:	7813      	ldrb	r3, [r2, #0]
 80006fc:	f36f 0300 	bfc	r3, #0, #1
 8000700:	7013      	strb	r3, [r2, #0]
	write8(AMG88xx_INTC, getINTC());
 8000702:	f7ff ff97 	bl	8000634 <getINTC>
 8000706:	4603      	mov	r3, r0
 8000708:	4619      	mov	r1, r3
 800070a:	2003      	movs	r0, #3
 800070c:	f000 f87d 	bl	800080a <write8>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200002e0 	.word	0x200002e0

08000718 <readPixels>:
    @param  size Optionsl number of bytes to read (up to 64). Default is 64 bytes.
    @return up to 64 bytes of pixel data in buf
*/
/**************************************************************************/
void readPixels(float *buf, uint8_t size)
{
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
 8000724:	466b      	mov	r3, sp
 8000726:	461d      	mov	r5, r3
	uint16_t recast;
	float converted;
	uint8_t bytesToRead = min((uint8_t)(size << 1), (uint8_t)(AMG88xx_PIXEL_ARRAY_SIZE << 1));
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff9b 	bl	800066c <min>
 8000736:	4603      	mov	r3, r0
 8000738:	76fb      	strb	r3, [r7, #27]
	uint8_t rawArray[bytesToRead];
 800073a:	7efc      	ldrb	r4, [r7, #27]
 800073c:	4623      	mov	r3, r4
 800073e:	3b01      	subs	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	b2e0      	uxtb	r0, r4
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	f04f 0200 	mov.w	r2, #0
 800074c:	f04f 0300 	mov.w	r3, #0
 8000750:	00cb      	lsls	r3, r1, #3
 8000752:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000756:	00c2      	lsls	r2, r0, #3
 8000758:	b2e0      	uxtb	r0, r4
 800075a:	f04f 0100 	mov.w	r1, #0
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	00cb      	lsls	r3, r1, #3
 8000768:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800076c:	00c2      	lsls	r2, r0, #3
 800076e:	4623      	mov	r3, r4
 8000770:	3307      	adds	r3, #7
 8000772:	08db      	lsrs	r3, r3, #3
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	ebad 0d03 	sub.w	sp, sp, r3
 800077a:	466b      	mov	r3, sp
 800077c:	3300      	adds	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
	read(AMG88xx_PIXEL_OFFSET, rawArray, bytesToRead);
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	7efa      	ldrb	r2, [r7, #27]
 8000784:	4619      	mov	r1, r3
 8000786:	2080      	movs	r0, #128	; 0x80
 8000788:	f000 f852 	bl	8000830 <read>
	
	for(int i=0; i<size; i++){
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
 8000790:	e025      	b.n	80007de <readPixels+0xc6>
		uint8_t pos = i << 1;
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	3301      	adds	r3, #1
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	5cd3      	ldrb	r3, [r2, r3]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	6939      	ldr	r1, [r7, #16]
 80007aa:	5ccb      	ldrb	r3, [r1, r3]
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	81bb      	strh	r3, [r7, #12]
		
		converted = signedMag12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
 80007b4:	89bb      	ldrh	r3, [r7, #12]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f882 	bl	80008c0 <signedMag12ToFloat>
 80007bc:	eef0 7a40 	vmov.f32	s15, s0
 80007c0:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80007c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c8:	edc7 7a02 	vstr	s15, [r7, #8]
		buf[i] = converted;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	601a      	str	r2, [r3, #0]
	for(int i=0; i<size; i++){
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	3301      	adds	r3, #1
 80007dc:	61fb      	str	r3, [r7, #28]
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	69fa      	ldr	r2, [r7, #28]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dbd5      	blt.n	8000792 <readPixels+0x7a>
 80007e6:	46ad      	mov	sp, r5
	}
}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bdb0      	pop	{r4, r5, r7, pc}

080007f0 <readPixelsRaw>:


void readPixelsRaw(int16_t* buf)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	read(AMG88xx_PIXEL_OFFSET, (uint8_t*)buf, 128);
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	2080      	movs	r0, #128	; 0x80
 80007fe:	f000 f817 	bl	8000830 <read>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <write8>:
    @param  reg the register to write to
    @param  value the value to write
*/
/**************************************************************************/
void write8(uint8_t reg, uint8_t value)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	460a      	mov	r2, r1
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	4613      	mov	r3, r2
 8000818:	71bb      	strb	r3, [r7, #6]
	write(reg, &value, 1);
 800081a:	1db9      	adds	r1, r7, #6
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2201      	movs	r2, #1
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f829 	bl	8000878 <write>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <read>:
	return ret;
}


void read(uint8_t reg, uint8_t *buf, uint8_t num)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af04      	add	r7, sp, #16
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef err;
	
	err = HAL_I2C_Mem_Read(&hi2c1, (AMG88xx_ADDRESS<<1), reg, 1, buf, num, 0xffff);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	b29a      	uxth	r2, r3
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	b29b      	uxth	r3, r3
 8000848:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800084c:	9102      	str	r1, [sp, #8]
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	21d2      	movs	r1, #210	; 0xd2
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <read+0x44>)
 800085a:	f003 f81f 	bl	800389c <HAL_I2C_Mem_Read>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]
	if(err != HAL_OK)
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d000      	beq.n	800086a <read+0x3a>
		while(1);
 8000868:	e7fe      	b.n	8000868 <read+0x38>
}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000520 	.word	0x20000520

08000878 <write>:

void write(uint8_t reg, uint8_t *buf, uint8_t num)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af04      	add	r7, sp, #16
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
 8000884:	4613      	mov	r3, r2
 8000886:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef err;
	
	err = HAL_I2C_Mem_Write(&hi2c1, (AMG88xx_ADDRESS<<1), reg, 1, buf, num, 0xffff);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	b29a      	uxth	r2, r3
 800088c:	79bb      	ldrb	r3, [r7, #6]
 800088e:	b29b      	uxth	r3, r3
 8000890:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000894:	9102      	str	r1, [sp, #8]
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	21d2      	movs	r1, #210	; 0xd2
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <write+0x44>)
 80008a2:	f002 fee7 	bl	8003674 <HAL_I2C_Mem_Write>
 80008a6:	4603      	mov	r3, r0
 80008a8:	73fb      	strb	r3, [r7, #15]
	if(err != HAL_OK)
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d000      	beq.n	80008b2 <write+0x3a>
		while(1);
 80008b0:	e7fe      	b.n	80008b0 <write+0x38>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000520 	.word	0x20000520

080008c0 <signedMag12ToFloat>:
    @param  val the 12-bit signed magnitude value to be converted
    @returns the converted floating point value
*/
/**************************************************************************/
float signedMag12ToFloat(uint16_t val)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
	//take first 11 bits as absolute val
	uint16_t absVal = (val & 0x7FF);
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008d0:	81fb      	strh	r3, [r7, #14]
	
	return (val & 0x8000) ? 0 - (float)absVal : (float)absVal ;
 80008d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	da09      	bge.n	80008ee <signedMag12ToFloat+0x2e>
 80008da:	89fb      	ldrh	r3, [r7, #14]
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008e4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000908 <signedMag12ToFloat+0x48>
 80008e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ec:	e004      	b.n	80008f8 <signedMag12ToFloat+0x38>
 80008ee:	89fb      	ldrh	r3, [r7, #14]
 80008f0:	ee07 3a90 	vmov	s15, r3
 80008f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80008f8:	eeb0 0a67 	vmov.f32	s0, s15
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	00000000 	.word	0x00000000

0800090c <resizeBilinearGrey>:
#include <stdint.h>
#include "bilinear.h"

int resizeBilinearGrey(int16_t* pixelsIn, int16_t* pixelsOut, int w, int h, int w2, int h2)
{
 800090c:	b480      	push	{r7}
 800090e:	b095      	sub	sp, #84	; 0x54
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	603b      	str	r3, [r7, #0]
	int A, B, C, D, x, y, index, gray ;
	float x_ratio = ((float)(w-1))/w2 ;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3b01      	subs	r3, #1
 800091e:	ee07 3a90 	vmov	s15, r3
 8000922:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000928:	ee07 3a90 	vmov	s15, r3
 800092c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000934:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float y_ratio = ((float)(h-1))/h2 ;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000946:	ee07 3a90 	vmov	s15, r3
 800094a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800094e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000952:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float x_diff, y_diff;
	int offset = 0 ;
 8000956:	2300      	movs	r3, #0
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (int i=0;i<h2;i++) {
 800095a:	2300      	movs	r3, #0
 800095c:	64bb      	str	r3, [r7, #72]	; 0x48
 800095e:	e0d2      	b.n	8000b06 <resizeBilinearGrey+0x1fa>
		for (int j=0;j<w2;j++) {
 8000960:	2300      	movs	r3, #0
 8000962:	647b      	str	r3, [r7, #68]	; 0x44
 8000964:	e0c7      	b.n	8000af6 <resizeBilinearGrey+0x1ea>
			x = (int)(x_ratio * j) ;
 8000966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000970:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800097c:	ee17 3a90 	vmov	r3, s15
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
			y = (int)(y_ratio * i) ;
 8000982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000984:	ee07 3a90 	vmov	s15, r3
 8000988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800098c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000998:	ee17 3a90 	vmov	r3, s15
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
			x_diff = (x_ratio * j) - x ;
 800099e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009a8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80009ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b2:	ee07 3a90 	vmov	s15, r3
 80009b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			y_diff = (y_ratio * i) - y ;
 80009c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009cc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80009d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			index = y*w+x ;
 80009e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	fb02 f303 	mul.w	r3, r2, r3
 80009ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009f0:	4413      	add	r3, r2
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
			
			// range is 0 to 255 thus bitwise AND with 0xff
			A = pixelsIn[index] & 0xffff;
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
			B = pixelsIn[index+1] & 0xffff;
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a06:	3301      	adds	r3, #1
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	623b      	str	r3, [r7, #32]
			C = pixelsIn[index+w] & 0xffff;
 8000a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4413      	add	r3, r2
 8000a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	61fb      	str	r3, [r7, #28]
			D = pixelsIn[index+w+1] & 0xffff;
 8000a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	3301      	adds	r3, #1
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	61bb      	str	r3, [r7, #24]
         
			// Y = A(1-w)(1-h) + B(w)(1-h) + C(h)(1-w) + Dwh
			gray = (int)(
				A*(1-x_diff)*(1-y_diff) +  B*(x_diff)*(1-y_diff) +
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a4e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a5e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000a62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	ee07 3a90 	vmov	s15, r3
 8000a70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000a78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000a7c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000a80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000a84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
				C*(y_diff)*(1-x_diff)   +  D*(x_diff*y_diff)
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	ee07 3a90 	vmov	s15, r3
 8000a96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000a9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000aa2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000aa6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000aaa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
				A*(1-x_diff)*(1-y_diff) +  B*(x_diff)*(1-y_diff) +
 8000ab2:	ee37 7a27 	vadd.f32	s14, s14, s15
				C*(y_diff)*(1-x_diff)   +  D*(x_diff*y_diff)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ac0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8000ac4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000ac8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
			gray = (int)(
 8000ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad8:	ee17 3a90 	vmov	r3, s15
 8000adc:	617b      	str	r3, [r7, #20]
							 ) ;
			
			pixelsOut[offset++] = gray ;                                   
 8000ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	4413      	add	r3, r2
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	b212      	sxth	r2, r2
 8000aee:	801a      	strh	r2, [r3, #0]
		for (int j=0;j<w2;j++) {
 8000af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000af2:	3301      	adds	r3, #1
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
 8000af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000afa:	429a      	cmp	r2, r3
 8000afc:	f6ff af33 	blt.w	8000966 <resizeBilinearGrey+0x5a>
	for (int i=0;i<h2;i++) {
 8000b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b02:	3301      	adds	r3, #1
 8000b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	f6ff af28 	blt.w	8000960 <resizeBilinearGrey+0x54>
		}
	}
	return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3754      	adds	r7, #84	; 0x54
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	b08d      	sub	sp, #52	; 0x34
 8000b24:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f001 ff2e 	bl	8002986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 fceb 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2e:	f000 feb1 	bl	8001894 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b32:	f000 fe51 	bl	80017d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b36:	f000 fe7f 	bl	8001838 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000b3a:	f000 fe0f 	bl	800175c <MX_SPI1_Init>
  MX_ADC1_Init();
 8000b3e:	f000 fd79 	bl	8001634 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b42:	f000 fdcb 	bl	80016dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Инициализация тепловизора
  amg88xxInit();
 8000b46:	f7ff fda5 	bl	8000694 <amg88xxInit>
  // Инициализация LCD
  ST7735_Init();
 8000b4a:	f001 f951 	bl	8001df0 <ST7735_Init>


  if(HAL_GPIO_ReadPin(But_Enter_GPIO_Port, But_Enter_Pin) == 0) test = 1;
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4883      	ldr	r0, [pc, #524]	; (8000d60 <main+0x240>)
 8000b52:	f002 fcb3 	bl	80034bc <HAL_GPIO_ReadPin>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <main+0x42>
 8000b5c:	4b81      	ldr	r3, [pc, #516]	; (8000d64 <main+0x244>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]

  if(screen == 0 && test == 0){
 8000b62:	4b81      	ldr	r3, [pc, #516]	; (8000d68 <main+0x248>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d115      	bne.n	8000b96 <main+0x76>
 8000b6a:	4b7e      	ldr	r3, [pc, #504]	; (8000d64 <main+0x244>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d111      	bne.n	8000b96 <main+0x76>
  HAL_GPIO_WritePin(LED_Alert_GPIO_Port, LED_Alert_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b78:	487c      	ldr	r0, [pc, #496]	; (8000d6c <main+0x24c>)
 8000b7a:	f002 fcb7 	bl	80034ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_TEST1_GPIO_Port, LED_TEST1_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b84:	4879      	ldr	r0, [pc, #484]	; (8000d6c <main+0x24c>)
 8000b86:	f002 fcb1 	bl	80034ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_TEST2_GPIO_Port, LED_TEST2_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b90:	4877      	ldr	r0, [pc, #476]	; (8000d70 <main+0x250>)
 8000b92:	f002 fcab 	bl	80034ec <HAL_GPIO_WritePin>
  //ST7735_Unselect();



  // Вывод стартового изображения
  ST7735_FillScreen(ST7735_WHITE);
 8000b96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b9a:	f001 faad 	bl	80020f8 <ST7735_FillScreen>
  ST7735_DrawImage(0, 19, 128, 116, (uint16_t*)lcd_image_atom);
 8000b9e:	4b75      	ldr	r3, [pc, #468]	; (8000d74 <main+0x254>)
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2374      	movs	r3, #116	; 0x74
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	2113      	movs	r1, #19
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f001 fab6 	bl	800211a <ST7735_DrawImage>
  HAL_Delay(1500);
 8000bae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000bb2:	f001 ff45 	bl	8002a40 <HAL_Delay>

  ST7735_DrawImage(0, 17, 128, 128, (uint16_t*)lcd_image_electronica);
 8000bb6:	4b70      	ldr	r3, [pc, #448]	; (8000d78 <main+0x258>)
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	2111      	movs	r1, #17
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f001 faaa 	bl	800211a <ST7735_DrawImage>
  HAL_Delay(1500);
 8000bc6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000bca:	f001 ff39 	bl	8002a40 <HAL_Delay>

  ST7735_FillScreen(ST7735_BLACK);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f001 fa92 	bl	80020f8 <ST7735_FillScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(screen == 0 && test == 0){
 8000bd4:	4b64      	ldr	r3, [pc, #400]	; (8000d68 <main+0x248>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f040 8274 	bne.w	80010c6 <main+0x5a6>
 8000bde:	4b61      	ldr	r3, [pc, #388]	; (8000d64 <main+0x244>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 826f 	bne.w	80010c6 <main+0x5a6>
	  // Считывание массива тепловизора
	  	readPixelsRaw(pixelsRaw);
 8000be8:	4864      	ldr	r0, [pc, #400]	; (8000d7c <main+0x25c>)
 8000bea:	f7ff fe01 	bl	80007f0 <readPixelsRaw>
	  // Зеркалируем массив для дисплея
		uint8_t revers;
		for(uint8_t f = 0; f < 32; f++){
 8000bee:	2300      	movs	r3, #0
 8000bf0:	76fb      	strb	r3, [r7, #27]
 8000bf2:	e019      	b.n	8000c28 <main+0x108>
			revers = pixelsRaw[f];
 8000bf4:	7efb      	ldrb	r3, [r7, #27]
 8000bf6:	4a61      	ldr	r2, [pc, #388]	; (8000d7c <main+0x25c>)
 8000bf8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000bfc:	73fb      	strb	r3, [r7, #15]
			pixelsRaw[f] = pixelsRaw[63-f];
 8000bfe:	7efb      	ldrb	r3, [r7, #27]
 8000c00:	f1c3 023f 	rsb	r2, r3, #63	; 0x3f
 8000c04:	7efb      	ldrb	r3, [r7, #27]
 8000c06:	495d      	ldr	r1, [pc, #372]	; (8000d7c <main+0x25c>)
 8000c08:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000c0c:	4a5b      	ldr	r2, [pc, #364]	; (8000d7c <main+0x25c>)
 8000c0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pixelsRaw[63-f] = revers;
 8000c12:	7efb      	ldrb	r3, [r7, #27]
 8000c14:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000c18:	7bfa      	ldrb	r2, [r7, #15]
 8000c1a:	b211      	sxth	r1, r2
 8000c1c:	4a57      	ldr	r2, [pc, #348]	; (8000d7c <main+0x25c>)
 8000c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t f = 0; f < 32; f++){
 8000c22:	7efb      	ldrb	r3, [r7, #27]
 8000c24:	3301      	adds	r3, #1
 8000c26:	76fb      	strb	r3, [r7, #27]
 8000c28:	7efb      	ldrb	r3, [r7, #27]
 8000c2a:	2b1f      	cmp	r3, #31
 8000c2c:	d9e2      	bls.n	8000bf4 <main+0xd4>
		}

		for( i = 0; i<64; i++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	e00d      	b.n	8000c50 <main+0x130>
			pixelsRaw[i] = (pixelsRaw[i]-80)<<2;
 8000c34:	4a51      	ldr	r2, [pc, #324]	; (8000d7c <main+0x25c>)
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c3c:	3b50      	subs	r3, #80	; 0x50
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	b219      	sxth	r1, r3
 8000c42:	4a4e      	ldr	r2, [pc, #312]	; (8000d7c <main+0x25c>)
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( i = 0; i<64; i++)
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	2b3f      	cmp	r3, #63	; 0x3f
 8000c54:	ddee      	ble.n	8000c34 <main+0x114>
		// Преобразуем значения тепловизора из 8x8 в 128x128
		resizeBilinearGrey(pixelsRaw, pixelsRawResize, 8, 8, RESIZE_X, RESIZE_Y);
 8000c56:	2370      	movs	r3, #112	; 0x70
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	2370      	movs	r3, #112	; 0x70
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2308      	movs	r3, #8
 8000c60:	2208      	movs	r2, #8
 8000c62:	4947      	ldr	r1, [pc, #284]	; (8000d80 <main+0x260>)
 8000c64:	4845      	ldr	r0, [pc, #276]	; (8000d7c <main+0x25c>)
 8000c66:	f7ff fe51 	bl	800090c <resizeBilinearGrey>

		for( i = 0; i< RESIZE_X*RESIZE_Y; i++){
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	e025      	b.n	8000cbc <main+0x19c>
			if(pixelsRawResize[i] < 0)
 8000c70:	4a43      	ldr	r2, [pc, #268]	; (8000d80 <main+0x260>)
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	da04      	bge.n	8000c86 <main+0x166>
				pixelsRawResize[i] = 0;
 8000c7c:	4a40      	ldr	r2, [pc, #256]	; (8000d80 <main+0x260>)
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	2100      	movs	r1, #0
 8000c82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(pixelsRawResize[i] > 255)
 8000c86:	4a3e      	ldr	r2, [pc, #248]	; (8000d80 <main+0x260>)
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c8e:	2bff      	cmp	r3, #255	; 0xff
 8000c90:	dd04      	ble.n	8000c9c <main+0x17c>
				pixelsRawResize[i] = 255;
 8000c92:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <main+0x260>)
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	21ff      	movs	r1, #255	; 0xff
 8000c98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			pixelsRawResize[i] = camColors[pixelsRawResize[i]];
 8000c9c:	4a38      	ldr	r2, [pc, #224]	; (8000d80 <main+0x260>)
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <main+0x264>)
 8000ca8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cac:	b219      	sxth	r1, r3
 8000cae:	4a34      	ldr	r2, [pc, #208]	; (8000d80 <main+0x260>)
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for( i = 0; i< RESIZE_X*RESIZE_Y; i++){
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f5b3 5f44 	cmp.w	r3, #12544	; 0x3100
 8000cc2:	dbd5      	blt.n	8000c70 <main+0x150>
		}

		  // Вывод цветовой шкалы
		for(int i = 0; i < 112; i++){
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e01e      	b.n	8000d08 <main+0x1e8>
		  ST7735_FillRectangle(114, i, 14, 1, scaleColors[i]);
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	b299      	uxth	r1, r3
 8000cce:	4a2e      	ldr	r2, [pc, #184]	; (8000d88 <main+0x268>)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	220e      	movs	r2, #14
 8000cdc:	2072      	movs	r0, #114	; 0x72
 8000cde:	f001 f997 	bl	8002010 <ST7735_FillRectangle>
		  ST7735_DrawPixel(112, i, ST7735_WHITE);
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cea:	4619      	mov	r1, r3
 8000cec:	2070      	movs	r0, #112	; 0x70
 8000cee:	f001 f899 	bl	8001e24 <ST7735_DrawPixel>
		  ST7735_DrawPixel(113, i, ST7735_WHITE);
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	2071      	movs	r0, #113	; 0x71
 8000cfe:	f001 f891 	bl	8001e24 <ST7735_DrawPixel>
		for(int i = 0; i < 112; i++){
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b6f      	cmp	r3, #111	; 0x6f
 8000d0c:	dddd      	ble.n	8000cca <main+0x1aa>
		}
		ST7735_DrawImage(0, 0, RESIZE_X, RESIZE_Y, (uint16_t*)pixelsRawResize);
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <main+0x260>)
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2370      	movs	r3, #112	; 0x70
 8000d14:	2270      	movs	r2, #112	; 0x70
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f001 f9fe 	bl	800211a <ST7735_DrawImage>


		for(uint8_t i = 0; i<= 128; i++){
 8000d1e:	2300      	movs	r3, #0
 8000d20:	74fb      	strb	r3, [r7, #19]
 8000d22:	e00a      	b.n	8000d3a <main+0x21a>
			ST7735_DrawPixel(i, 112, ST7735_WHITE);
 8000d24:	7cfb      	ldrb	r3, [r7, #19]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2c:	2170      	movs	r1, #112	; 0x70
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 f878 	bl	8001e24 <ST7735_DrawPixel>
		for(uint8_t i = 0; i<= 128; i++){
 8000d34:	7cfb      	ldrb	r3, [r7, #19]
 8000d36:	3301      	adds	r3, #1
 8000d38:	74fb      	strb	r3, [r7, #19]
 8000d3a:	7cfb      	ldrb	r3, [r7, #19]
 8000d3c:	2b80      	cmp	r3, #128	; 0x80
 8000d3e:	d9f1      	bls.n	8000d24 <main+0x204>
		}


		readPixels(pixels,64);
 8000d40:	2140      	movs	r1, #64	; 0x40
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <main+0x26c>)
 8000d44:	f7ff fce8 	bl	8000718 <readPixels>

		tMax = pixels[0];
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <main+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <main+0x270>)
 8000d4e:	6013      	str	r3, [r2, #0]
		tMin = pixels[0];
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <main+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <main+0x274>)
 8000d56:	6013      	str	r3, [r2, #0]



		for(uint8_t i = 0; i < 64; i++){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	74bb      	strb	r3, [r7, #18]
 8000d5c:	e049      	b.n	8000df2 <main+0x2d2>
 8000d5e:	bf00      	nop
 8000d60:	40020800 	.word	0x40020800
 8000d64:	20000282 	.word	0x20000282
 8000d68:	20000280 	.word	0x20000280
 8000d6c:	40021400 	.word	0x40021400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	0801405c 	.word	0x0801405c
 8000d78:	0800c05c 	.word	0x0800c05c
 8000d7c:	2000049c 	.word	0x2000049c
 8000d80:	20003234 	.word	0x20003234
 8000d84:	0801b560 	.word	0x0801b560
 8000d88:	0801b45c 	.word	0x0801b45c
 8000d8c:	20000318 	.word	0x20000318
 8000d90:	20003170 	.word	0x20003170
 8000d94:	200031c8 	.word	0x200031c8
			if(pixels[i] < tMin) tMin = pixels[i];
 8000d98:	7cbb      	ldrb	r3, [r7, #18]
 8000d9a:	4a7c      	ldr	r2, [pc, #496]	; (8000f8c <main+0x46c>)
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	4b7a      	ldr	r3, [pc, #488]	; (8000f90 <main+0x470>)
 8000da6:	edd3 7a00 	vldr	s15, [r3]
 8000daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	d506      	bpl.n	8000dc2 <main+0x2a2>
 8000db4:	7cbb      	ldrb	r3, [r7, #18]
 8000db6:	4a75      	ldr	r2, [pc, #468]	; (8000f8c <main+0x46c>)
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a74      	ldr	r2, [pc, #464]	; (8000f90 <main+0x470>)
 8000dc0:	6013      	str	r3, [r2, #0]
			if(pixels[i] > tMax) tMax = pixels[i];
 8000dc2:	7cbb      	ldrb	r3, [r7, #18]
 8000dc4:	4a71      	ldr	r2, [pc, #452]	; (8000f8c <main+0x46c>)
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	ed93 7a00 	vldr	s14, [r3]
 8000dce:	4b71      	ldr	r3, [pc, #452]	; (8000f94 <main+0x474>)
 8000dd0:	edd3 7a00 	vldr	s15, [r3]
 8000dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ddc:	dd06      	ble.n	8000dec <main+0x2cc>
 8000dde:	7cbb      	ldrb	r3, [r7, #18]
 8000de0:	4a6a      	ldr	r2, [pc, #424]	; (8000f8c <main+0x46c>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a6a      	ldr	r2, [pc, #424]	; (8000f94 <main+0x474>)
 8000dea:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0; i < 64; i++){
 8000dec:	7cbb      	ldrb	r3, [r7, #18]
 8000dee:	3301      	adds	r3, #1
 8000df0:	74bb      	strb	r3, [r7, #18]
 8000df2:	7cbb      	ldrb	r3, [r7, #18]
 8000df4:	2b3f      	cmp	r3, #63	; 0x3f
 8000df6:	d9cf      	bls.n	8000d98 <main+0x278>
		}

		tLed = ((uint8_t)tMax - (uint8_t)tMin);
 8000df8:	4b66      	ldr	r3, [pc, #408]	; (8000f94 <main+0x474>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e02:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e06:	793b      	ldrb	r3, [r7, #4]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b61      	ldr	r3, [pc, #388]	; (8000f90 <main+0x470>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e14:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e18:	793b      	ldrb	r3, [r7, #4]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b5d      	ldr	r3, [pc, #372]	; (8000f98 <main+0x478>)
 8000e22:	701a      	strb	r2, [r3, #0]
		led = ((uint8_t)pixels[tempKur[kurY-1][kurX-1]] - (uint8_t)tMin) / (tLed/7);
 8000e24:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <main+0x47c>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	1e5a      	subs	r2, r3, #1
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <main+0x480>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	495c      	ldr	r1, [pc, #368]	; (8000fa4 <main+0x484>)
 8000e32:	00d2      	lsls	r2, r2, #3
 8000e34:	440a      	add	r2, r1
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4a54      	ldr	r2, [pc, #336]	; (8000f8c <main+0x46c>)
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	edd3 7a00 	vldr	s15, [r3]
 8000e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e48:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e4c:	793b      	ldrb	r3, [r7, #4]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <main+0x470>)
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e60:	793b      	ldrb	r3, [r7, #4]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	1ad1      	subs	r1, r2, r3
 8000e66:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <main+0x478>)
 8000e68:	781a      	ldrb	r2, [r3, #0]
 8000e6a:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <main+0x488>)
 8000e6c:	fba3 0302 	umull	r0, r3, r3, r2
 8000e70:	1ad2      	subs	r2, r2, r3
 8000e72:	0852      	lsrs	r2, r2, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <main+0x48c>)
 8000e82:	701a      	strb	r2, [r3, #0]
		if(led <= 0)led =1;
 8000e84:	4b49      	ldr	r3, [pc, #292]	; (8000fac <main+0x48c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <main+0x372>
 8000e8c:	4b47      	ldr	r3, [pc, #284]	; (8000fac <main+0x48c>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
		if(led >= 8)led =7;
 8000e92:	4b46      	ldr	r3, [pc, #280]	; (8000fac <main+0x48c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b07      	cmp	r3, #7
 8000e98:	d902      	bls.n	8000ea0 <main+0x380>
 8000e9a:	4b44      	ldr	r3, [pc, #272]	; (8000fac <main+0x48c>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	701a      	strb	r2, [r3, #0]
		sprintf(ch, "%i\r\n", led);
 8000ea0:	4b42      	ldr	r3, [pc, #264]	; (8000fac <main+0x48c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4942      	ldr	r1, [pc, #264]	; (8000fb0 <main+0x490>)
 8000ea8:	4842      	ldr	r0, [pc, #264]	; (8000fb4 <main+0x494>)
 8000eaa:	f006 fa97 	bl	80073dc <siprintf>
		HAL_UART_Transmit(&huart3, ch, 9, 100);
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	2209      	movs	r2, #9
 8000eb2:	4940      	ldr	r1, [pc, #256]	; (8000fb4 <main+0x494>)
 8000eb4:	4840      	ldr	r0, [pc, #256]	; (8000fb8 <main+0x498>)
 8000eb6:	f004 ff07 	bl	8005cc8 <HAL_UART_Transmit>

		for(uint8_t i = 0; i<= 14; i++){
 8000eba:	2300      	movs	r3, #0
 8000ebc:	747b      	strb	r3, [r7, #17]
 8000ebe:	e038      	b.n	8000f32 <main+0x412>
			ST7735_DrawPixel((kurX*14)-14+i, (kurY*14)-7, ST7735_WHITE);
 8000ec0:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <main+0x480>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	00d2      	lsls	r2, r2, #3
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	7c7b      	ldrb	r3, [r7, #17]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3b0e      	subs	r3, #14
 8000ed8:	b298      	uxth	r0, r3
 8000eda:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <main+0x47c>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	00d2      	lsls	r2, r2, #3
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3b07      	subs	r3, #7
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f000 ff97 	bl	8001e24 <ST7735_DrawPixel>
			ST7735_DrawPixel((kurX*14)-7, (kurY*14)-14+i, ST7735_WHITE);
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <main+0x480>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	00d2      	lsls	r2, r2, #3
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3b07      	subs	r3, #7
 8000f06:	b298      	uxth	r0, r3
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <main+0x47c>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	00d2      	lsls	r2, r2, #3
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	7c7b      	ldrb	r3, [r7, #17]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3b0e      	subs	r3, #14
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	4619      	mov	r1, r3
 8000f28:	f000 ff7c 	bl	8001e24 <ST7735_DrawPixel>
		for(uint8_t i = 0; i<= 14; i++){
 8000f2c:	7c7b      	ldrb	r3, [r7, #17]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	747b      	strb	r3, [r7, #17]
 8000f32:	7c7b      	ldrb	r3, [r7, #17]
 8000f34:	2b0e      	cmp	r3, #14
 8000f36:	d9c3      	bls.n	8000ec0 <main+0x3a0>
		}

		sprintf(ch, "%.1fC", pixels[tempKur[kurY-1][kurX-1]]);
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <main+0x47c>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <main+0x480>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	4917      	ldr	r1, [pc, #92]	; (8000fa4 <main+0x484>)
 8000f46:	00d2      	lsls	r2, r2, #3
 8000f48:	440a      	add	r2, r1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <main+0x46c>)
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f5c:	ec53 2b17 	vmov	r2, r3, d7
 8000f60:	4916      	ldr	r1, [pc, #88]	; (8000fbc <main+0x49c>)
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <main+0x494>)
 8000f64:	f006 fa3a 	bl	80073dc <siprintf>
		ST7735_WriteString(22, 118, ch, Font_16x26, ST7735_WHITE, ST7735_BLACK);
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <main+0x4a0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	9202      	str	r2, [sp, #8]
 8000f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f72:	9201      	str	r2, [sp, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	9200      	str	r2, [sp, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <main+0x494>)
 8000f7c:	2176      	movs	r1, #118	; 0x76
 8000f7e:	2016      	movs	r0, #22
 8000f80:	f000 fffb 	bl	8001f7a <ST7735_WriteString>

		for(uint8_t i = 0; i<= 128; i++){
 8000f84:	2300      	movs	r3, #0
 8000f86:	743b      	strb	r3, [r7, #16]
 8000f88:	e027      	b.n	8000fda <main+0x4ba>
 8000f8a:	bf00      	nop
 8000f8c:	20000318 	.word	0x20000318
 8000f90:	200031c8 	.word	0x200031c8
 8000f94:	20003170 	.word	0x20003170
 8000f98:	20000285 	.word	0x20000285
 8000f9c:	2000001a 	.word	0x2000001a
 8000fa0:	20000018 	.word	0x20000018
 8000fa4:	20000040 	.word	0x20000040
 8000fa8:	24924925 	.word	0x24924925
 8000fac:	20000284 	.word	0x20000284
 8000fb0:	08009778 	.word	0x08009778
 8000fb4:	20000288 	.word	0x20000288
 8000fb8:	20000418 	.word	0x20000418
 8000fbc:	08009780 	.word	0x08009780
 8000fc0:	20000010 	.word	0x20000010
			ST7735_DrawPixel(i, 144, ST7735_WHITE);
 8000fc4:	7c3b      	ldrb	r3, [r7, #16]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fcc:	2190      	movs	r1, #144	; 0x90
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 ff28 	bl	8001e24 <ST7735_DrawPixel>
		for(uint8_t i = 0; i<= 128; i++){
 8000fd4:	7c3b      	ldrb	r3, [r7, #16]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	743b      	strb	r3, [r7, #16]
 8000fda:	7c3b      	ldrb	r3, [r7, #16]
 8000fdc:	2b80      	cmp	r3, #128	; 0x80
 8000fde:	d9f1      	bls.n	8000fc4 <main+0x4a4>
		}
		sprintf(ch, "Enter to Settings");
 8000fe0:	498f      	ldr	r1, [pc, #572]	; (8001220 <main+0x700>)
 8000fe2:	4890      	ldr	r0, [pc, #576]	; (8001224 <main+0x704>)
 8000fe4:	f006 f9fa 	bl	80073dc <siprintf>
		ST7735_WriteString(2, 150, ch, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000fe8:	4b8f      	ldr	r3, [pc, #572]	; (8001228 <main+0x708>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	9202      	str	r2, [sp, #8]
 8000fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff2:	9201      	str	r2, [sp, #4]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	9200      	str	r2, [sp, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a8a      	ldr	r2, [pc, #552]	; (8001224 <main+0x704>)
 8000ffc:	2196      	movs	r1, #150	; 0x96
 8000ffe:	2002      	movs	r0, #2
 8001000:	f000 ffbb 	bl	8001f7a <ST7735_WriteString>




		//HAL_UART_Transmit(&huart3, ch, sizeof(ch), 100);
		if(but != 0 ){
 8001004:	4b89      	ldr	r3, [pc, #548]	; (800122c <main+0x70c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d05c      	beq.n	80010c6 <main+0x5a6>
			if(but == 1){
 800100c:	4b87      	ldr	r3, [pc, #540]	; (800122c <main+0x70c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d10f      	bne.n	8001034 <main+0x514>
				kurX--;
 8001014:	4b86      	ldr	r3, [pc, #536]	; (8001230 <main+0x710>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b84      	ldr	r3, [pc, #528]	; (8001230 <main+0x710>)
 800101e:	801a      	strh	r2, [r3, #0]
				if(kurX <= 1) kurX = 1;
 8001020:	4b83      	ldr	r3, [pc, #524]	; (8001230 <main+0x710>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d802      	bhi.n	800102e <main+0x50e>
 8001028:	4b81      	ldr	r3, [pc, #516]	; (8001230 <main+0x710>)
 800102a:	2201      	movs	r2, #1
 800102c:	801a      	strh	r2, [r3, #0]
				but = 0;
 800102e:	4b7f      	ldr	r3, [pc, #508]	; (800122c <main+0x70c>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
			}

			if(but == 2){
 8001034:	4b7d      	ldr	r3, [pc, #500]	; (800122c <main+0x70c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d10f      	bne.n	800105c <main+0x53c>
				kurY--;
 800103c:	4b7d      	ldr	r3, [pc, #500]	; (8001234 <main+0x714>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	3b01      	subs	r3, #1
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <main+0x714>)
 8001046:	801a      	strh	r2, [r3, #0]
				if(kurY <=1) kurY = 1;
 8001048:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <main+0x714>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d802      	bhi.n	8001056 <main+0x536>
 8001050:	4b78      	ldr	r3, [pc, #480]	; (8001234 <main+0x714>)
 8001052:	2201      	movs	r2, #1
 8001054:	801a      	strh	r2, [r3, #0]
				but = 0;
 8001056:	4b75      	ldr	r3, [pc, #468]	; (800122c <main+0x70c>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
			}
			if(but == 3){
 800105c:	4b73      	ldr	r3, [pc, #460]	; (800122c <main+0x70c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d10f      	bne.n	8001084 <main+0x564>
				kurY++;
 8001064:	4b73      	ldr	r3, [pc, #460]	; (8001234 <main+0x714>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b71      	ldr	r3, [pc, #452]	; (8001234 <main+0x714>)
 800106e:	801a      	strh	r2, [r3, #0]
				if(kurY >=8) kurY = 8;
 8001070:	4b70      	ldr	r3, [pc, #448]	; (8001234 <main+0x714>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	2b07      	cmp	r3, #7
 8001076:	d902      	bls.n	800107e <main+0x55e>
 8001078:	4b6e      	ldr	r3, [pc, #440]	; (8001234 <main+0x714>)
 800107a:	2208      	movs	r2, #8
 800107c:	801a      	strh	r2, [r3, #0]
				but = 0;
 800107e:	4b6b      	ldr	r3, [pc, #428]	; (800122c <main+0x70c>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
			}
			if(but == 4){
 8001084:	4b69      	ldr	r3, [pc, #420]	; (800122c <main+0x70c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d10f      	bne.n	80010ac <main+0x58c>
				kurX++;
 800108c:	4b68      	ldr	r3, [pc, #416]	; (8001230 <main+0x710>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b66      	ldr	r3, [pc, #408]	; (8001230 <main+0x710>)
 8001096:	801a      	strh	r2, [r3, #0]
				if(kurX >= 8) kurX = 8;
 8001098:	4b65      	ldr	r3, [pc, #404]	; (8001230 <main+0x710>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	2b07      	cmp	r3, #7
 800109e:	d902      	bls.n	80010a6 <main+0x586>
 80010a0:	4b63      	ldr	r3, [pc, #396]	; (8001230 <main+0x710>)
 80010a2:	2208      	movs	r2, #8
 80010a4:	801a      	strh	r2, [r3, #0]
				but = 0;
 80010a6:	4b61      	ldr	r3, [pc, #388]	; (800122c <main+0x70c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
			}
			if(but == 5){
 80010ac:	4b5f      	ldr	r3, [pc, #380]	; (800122c <main+0x70c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d108      	bne.n	80010c6 <main+0x5a6>
				screen = 1;
 80010b4:	4b60      	ldr	r3, [pc, #384]	; (8001238 <main+0x718>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
				ST7735_FillScreen(ST7735_BLACK);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f001 f81c 	bl	80020f8 <ST7735_FillScreen>
				but = 0;
 80010c0:	4b5a      	ldr	r3, [pc, #360]	; (800122c <main+0x70c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
			}
		}
	}

		if(test ==1 ){
 80010c6:	4b5d      	ldr	r3, [pc, #372]	; (800123c <main+0x71c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	f040 81d0 	bne.w	8001470 <main+0x950>

			if(but != 0 ){
 80010d0:	4b56      	ldr	r3, [pc, #344]	; (800122c <main+0x70c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 81cb 	beq.w	8001470 <main+0x950>
				lostBut = but;
 80010da:	4b54      	ldr	r3, [pc, #336]	; (800122c <main+0x70c>)
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	4b58      	ldr	r3, [pc, #352]	; (8001240 <main+0x720>)
 80010e0:	701a      	strb	r2, [r3, #0]
				if(but == 1){
 80010e2:	4b52      	ldr	r3, [pc, #328]	; (800122c <main+0x70c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d102      	bne.n	80010f0 <main+0x5d0>
					//menu;
					but = 0;
 80010ea:	4b50      	ldr	r3, [pc, #320]	; (800122c <main+0x70c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
				}

				if(but == 2){
 80010f0:	4b4e      	ldr	r3, [pc, #312]	; (800122c <main+0x70c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d110      	bne.n	800111a <main+0x5fa>
					if(menu != 0){ menu--; }else{ menu = 4; }
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <main+0x724>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <main+0x5ee>
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <main+0x724>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <main+0x724>)
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e002      	b.n	8001114 <main+0x5f4>
 800110e:	4b4d      	ldr	r3, [pc, #308]	; (8001244 <main+0x724>)
 8001110:	2204      	movs	r2, #4
 8001112:	701a      	strb	r2, [r3, #0]
					but = 0;
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <main+0x70c>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
				}
				if(but == 3){
 800111a:	4b44      	ldr	r3, [pc, #272]	; (800122c <main+0x70c>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d110      	bne.n	8001144 <main+0x624>
					if(menu != 4){ menu++; }else{ menu= 0; }
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <main+0x724>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d006      	beq.n	8001138 <main+0x618>
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <main+0x724>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b44      	ldr	r3, [pc, #272]	; (8001244 <main+0x724>)
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e002      	b.n	800113e <main+0x61e>
 8001138:	4b42      	ldr	r3, [pc, #264]	; (8001244 <main+0x724>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
					but = 0;				}
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <main+0x70c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
				if(but == 4){
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <main+0x70c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d102      	bne.n	8001152 <main+0x632>
					//kurX++;
					//if(kurX >= 8) kurX = 8;
					but = 0;
 800114c:	4b37      	ldr	r3, [pc, #220]	; (800122c <main+0x70c>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
				}
				if(but == 5){
 8001152:	4b36      	ldr	r3, [pc, #216]	; (800122c <main+0x70c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b05      	cmp	r3, #5
 8001158:	d129      	bne.n	80011ae <main+0x68e>
					if(menu == 0){
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <main+0x724>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d104      	bne.n	800116c <main+0x64c>
						HAL_GPIO_TogglePin(LED_Alert_GPIO_Port, LED_Alert_Pin);
 8001162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001166:	4838      	ldr	r0, [pc, #224]	; (8001248 <main+0x728>)
 8001168:	f002 f9d9 	bl	800351e <HAL_GPIO_TogglePin>
					}
					if(menu == 1){
 800116c:	4b35      	ldr	r3, [pc, #212]	; (8001244 <main+0x724>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10a      	bne.n	800118a <main+0x66a>
						if(led == 0){ led = 7; }else{ led = 0;}
 8001174:	4b35      	ldr	r3, [pc, #212]	; (800124c <main+0x72c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <main+0x664>
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <main+0x72c>)
 800117e:	2207      	movs	r2, #7
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e002      	b.n	800118a <main+0x66a>
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <main+0x72c>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
					}
					if(menu == 2){
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <main+0x724>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d103      	bne.n	800119a <main+0x67a>
						HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	482e      	ldr	r0, [pc, #184]	; (8001250 <main+0x730>)
 8001196:	f002 f9c2 	bl	800351e <HAL_GPIO_TogglePin>
					}
					if(menu == 4){
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <main+0x724>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d102      	bne.n	80011a8 <main+0x688>
						test = 0;
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <main+0x71c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
					}
					but = 0;
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <main+0x70c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]





			sprintf(ch, "Test system");
 80011ae:	4929      	ldr	r1, [pc, #164]	; (8001254 <main+0x734>)
 80011b0:	481c      	ldr	r0, [pc, #112]	; (8001224 <main+0x704>)
 80011b2:	f006 f913 	bl	80073dc <siprintf>
			ST7735_WriteString(2, 0, ch, Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <main+0x738>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	9202      	str	r2, [sp, #8]
 80011bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c0:	9201      	str	r2, [sp, #4]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	9200      	str	r2, [sp, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a16      	ldr	r2, [pc, #88]	; (8001224 <main+0x704>)
 80011ca:	2100      	movs	r1, #0
 80011cc:	2002      	movs	r0, #2
 80011ce:	f000 fed4 	bl	8001f7a <ST7735_WriteString>
			if(HAL_GPIO_ReadPin(LED_Alert_GPIO_Port, LED_Alert_Pin)){
 80011d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d6:	481c      	ldr	r0, [pc, #112]	; (8001248 <main+0x728>)
 80011d8:	f002 f970 	bl	80034bc <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <main+0x6cc>
				sprintf(ch, " Led Alert: OFF ");
 80011e2:	491e      	ldr	r1, [pc, #120]	; (800125c <main+0x73c>)
 80011e4:	480f      	ldr	r0, [pc, #60]	; (8001224 <main+0x704>)
 80011e6:	f006 f8f9 	bl	80073dc <siprintf>
 80011ea:	e003      	b.n	80011f4 <main+0x6d4>
			}else{
				sprintf(ch, " Led Alert: ON  ");
 80011ec:	491c      	ldr	r1, [pc, #112]	; (8001260 <main+0x740>)
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <main+0x704>)
 80011f0:	f006 f8f4 	bl	80073dc <siprintf>
			}
			ST7735_WriteString(2, 20, ch, Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <main+0x708>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	9202      	str	r2, [sp, #8]
 80011fa:	221f      	movs	r2, #31
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <main+0x704>)
 8001206:	2114      	movs	r1, #20
 8001208:	2002      	movs	r0, #2
 800120a:	f000 feb6 	bl	8001f7a <ST7735_WriteString>
			if(led == 0){
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <main+0x72c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d128      	bne.n	8001268 <main+0x748>
				sprintf(ch, " Led sens: OFF ");
 8001216:	4913      	ldr	r1, [pc, #76]	; (8001264 <main+0x744>)
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <main+0x704>)
 800121a:	f006 f8df 	bl	80073dc <siprintf>
 800121e:	e02f      	b.n	8001280 <main+0x760>
 8001220:	08009788 	.word	0x08009788
 8001224:	20000288 	.word	0x20000288
 8001228:	20000000 	.word	0x20000000
 800122c:	20000283 	.word	0x20000283
 8001230:	20000018 	.word	0x20000018
 8001234:	2000001a 	.word	0x2000001a
 8001238:	20000280 	.word	0x20000280
 800123c:	20000282 	.word	0x20000282
 8001240:	200002c8 	.word	0x200002c8
 8001244:	20000281 	.word	0x20000281
 8001248:	40021400 	.word	0x40021400
 800124c:	20000284 	.word	0x20000284
 8001250:	40020000 	.word	0x40020000
 8001254:	0800979c 	.word	0x0800979c
 8001258:	20000008 	.word	0x20000008
 800125c:	080097a8 	.word	0x080097a8
 8001260:	080097bc 	.word	0x080097bc
 8001264:	080097d0 	.word	0x080097d0
			}else if(led > 0 && led < 8){
 8001268:	4b94      	ldr	r3, [pc, #592]	; (80014bc <main+0x99c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <main+0x760>
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <main+0x99c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b07      	cmp	r3, #7
 8001276:	d803      	bhi.n	8001280 <main+0x760>
				sprintf(ch, " Led sens: ON  ");
 8001278:	4991      	ldr	r1, [pc, #580]	; (80014c0 <main+0x9a0>)
 800127a:	4892      	ldr	r0, [pc, #584]	; (80014c4 <main+0x9a4>)
 800127c:	f006 f8ae 	bl	80073dc <siprintf>
			}
			ST7735_WriteString(2, 30, ch, Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8001280:	4b91      	ldr	r3, [pc, #580]	; (80014c8 <main+0x9a8>)
 8001282:	2200      	movs	r2, #0
 8001284:	9202      	str	r2, [sp, #8]
 8001286:	221f      	movs	r2, #31
 8001288:	9201      	str	r2, [sp, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a8c      	ldr	r2, [pc, #560]	; (80014c4 <main+0x9a4>)
 8001292:	211e      	movs	r1, #30
 8001294:	2002      	movs	r0, #2
 8001296:	f000 fe70 	bl	8001f7a <ST7735_WriteString>
			if(HAL_GPIO_ReadPin(Buzzer_GPIO_Port, Buzzer_Pin)){
 800129a:	2140      	movs	r1, #64	; 0x40
 800129c:	488b      	ldr	r0, [pc, #556]	; (80014cc <main+0x9ac>)
 800129e:	f002 f90d 	bl	80034bc <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <main+0x792>
				sprintf(ch, " Buzzer: ON  ");
 80012a8:	4989      	ldr	r1, [pc, #548]	; (80014d0 <main+0x9b0>)
 80012aa:	4886      	ldr	r0, [pc, #536]	; (80014c4 <main+0x9a4>)
 80012ac:	f006 f896 	bl	80073dc <siprintf>
 80012b0:	e003      	b.n	80012ba <main+0x79a>
			}else{
				sprintf(ch, " Buzzer: OFF  ");
 80012b2:	4988      	ldr	r1, [pc, #544]	; (80014d4 <main+0x9b4>)
 80012b4:	4883      	ldr	r0, [pc, #524]	; (80014c4 <main+0x9a4>)
 80012b6:	f006 f891 	bl	80073dc <siprintf>
			}
			ST7735_WriteString(2, 40, ch, Font_7x10, ST7735_BLUE, ST7735_BLACK);
 80012ba:	4b83      	ldr	r3, [pc, #524]	; (80014c8 <main+0x9a8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	9202      	str	r2, [sp, #8]
 80012c0:	221f      	movs	r2, #31
 80012c2:	9201      	str	r2, [sp, #4]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a7e      	ldr	r2, [pc, #504]	; (80014c4 <main+0x9a4>)
 80012cc:	2128      	movs	r1, #40	; 0x28
 80012ce:	2002      	movs	r0, #2
 80012d0:	f000 fe53 	bl	8001f7a <ST7735_WriteString>

			sprintf(ch, " Button:%c%c%c%c%c", pressBut[lostBut][0],pressBut[lostBut][1],pressBut[lostBut][2],pressBut[lostBut][3],pressBut[lostBut][4]);
 80012d4:	4b80      	ldr	r3, [pc, #512]	; (80014d8 <main+0x9b8>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	4a80      	ldr	r2, [pc, #512]	; (80014dc <main+0x9bc>)
 80012dc:	460b      	mov	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461d      	mov	r5, r3
 80012e8:	4b7b      	ldr	r3, [pc, #492]	; (80014d8 <main+0x9b8>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4a7b      	ldr	r2, [pc, #492]	; (80014dc <main+0x9bc>)
 80012f0:	460b      	mov	r3, r1
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	4413      	add	r3, r2
 80012f8:	3301      	adds	r3, #1
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461e      	mov	r6, r3
 80012fe:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <main+0x9b8>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4a75      	ldr	r2, [pc, #468]	; (80014dc <main+0x9bc>)
 8001306:	460b      	mov	r3, r1
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	4413      	add	r3, r2
 800130e:	3302      	adds	r3, #2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <main+0x9b8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	4a70      	ldr	r2, [pc, #448]	; (80014dc <main+0x9bc>)
 800131c:	460b      	mov	r3, r1
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	4413      	add	r3, r2
 8001324:	3303      	adds	r3, #3
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461c      	mov	r4, r3
 800132a:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <main+0x9b8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4a6a      	ldr	r2, [pc, #424]	; (80014dc <main+0x9bc>)
 8001332:	460b      	mov	r3, r1
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	9401      	str	r4, [sp, #4]
 8001342:	9000      	str	r0, [sp, #0]
 8001344:	4633      	mov	r3, r6
 8001346:	462a      	mov	r2, r5
 8001348:	4965      	ldr	r1, [pc, #404]	; (80014e0 <main+0x9c0>)
 800134a:	485e      	ldr	r0, [pc, #376]	; (80014c4 <main+0x9a4>)
 800134c:	f006 f846 	bl	80073dc <siprintf>
			ST7735_WriteString(2, 50, ch, Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8001350:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <main+0x9a8>)
 8001352:	2200      	movs	r2, #0
 8001354:	9202      	str	r2, [sp, #8]
 8001356:	221f      	movs	r2, #31
 8001358:	9201      	str	r2, [sp, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	9200      	str	r2, [sp, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a58      	ldr	r2, [pc, #352]	; (80014c4 <main+0x9a4>)
 8001362:	2132      	movs	r1, #50	; 0x32
 8001364:	2002      	movs	r0, #2
 8001366:	f000 fe08 	bl	8001f7a <ST7735_WriteString>
			sprintf(ch, " EXIT TEST");
 800136a:	495e      	ldr	r1, [pc, #376]	; (80014e4 <main+0x9c4>)
 800136c:	4855      	ldr	r0, [pc, #340]	; (80014c4 <main+0x9a4>)
 800136e:	f006 f835 	bl	80073dc <siprintf>
			ST7735_WriteString(2, 60, ch, Font_7x10, ST7735_BLUE, ST7735_BLACK);
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <main+0x9a8>)
 8001374:	2200      	movs	r2, #0
 8001376:	9202      	str	r2, [sp, #8]
 8001378:	221f      	movs	r2, #31
 800137a:	9201      	str	r2, [sp, #4]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	9200      	str	r2, [sp, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a50      	ldr	r2, [pc, #320]	; (80014c4 <main+0x9a4>)
 8001384:	213c      	movs	r1, #60	; 0x3c
 8001386:	2002      	movs	r0, #2
 8001388:	f000 fdf7 	bl	8001f7a <ST7735_WriteString>

			sprintf(ch, "menu - %i", menu);
 800138c:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <main+0x9c8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4956      	ldr	r1, [pc, #344]	; (80014ec <main+0x9cc>)
 8001394:	484b      	ldr	r0, [pc, #300]	; (80014c4 <main+0x9a4>)
 8001396:	f006 f821 	bl	80073dc <siprintf>
			ST7735_WriteString(15, 80, ch, Font_7x10, ST7735_BLUE, ST7735_BLACK);
 800139a:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <main+0x9a8>)
 800139c:	2200      	movs	r2, #0
 800139e:	9202      	str	r2, [sp, #8]
 80013a0:	221f      	movs	r2, #31
 80013a2:	9201      	str	r2, [sp, #4]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	9200      	str	r2, [sp, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <main+0x9a4>)
 80013ac:	2150      	movs	r1, #80	; 0x50
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 fde3 	bl	8001f7a <ST7735_WriteString>

			if(menu == 0 ){
 80013b4:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <main+0x9c8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10e      	bne.n	80013da <main+0x8ba>
				ST7735_WriteString(2, 20, menuEnter, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <main+0x9a8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	9202      	str	r2, [sp, #8]
 80013c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c6:	9201      	str	r2, [sp, #4]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a48      	ldr	r2, [pc, #288]	; (80014f0 <main+0x9d0>)
 80013d0:	2114      	movs	r1, #20
 80013d2:	2002      	movs	r0, #2
 80013d4:	f000 fdd1 	bl	8001f7a <ST7735_WriteString>
 80013d8:	e04a      	b.n	8001470 <main+0x950>
			}else if(menu == 1){
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <main+0x9c8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d10e      	bne.n	8001400 <main+0x8e0>
				ST7735_WriteString(2, 30, menuEnter, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <main+0x9a8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	9202      	str	r2, [sp, #8]
 80013e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a3e      	ldr	r2, [pc, #248]	; (80014f0 <main+0x9d0>)
 80013f6:	211e      	movs	r1, #30
 80013f8:	2002      	movs	r0, #2
 80013fa:	f000 fdbe 	bl	8001f7a <ST7735_WriteString>
 80013fe:	e037      	b.n	8001470 <main+0x950>
			}else if(menu == 2){
 8001400:	4b39      	ldr	r3, [pc, #228]	; (80014e8 <main+0x9c8>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d10e      	bne.n	8001426 <main+0x906>
				ST7735_WriteString(2, 40, menuEnter, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <main+0x9a8>)
 800140a:	2200      	movs	r2, #0
 800140c:	9202      	str	r2, [sp, #8]
 800140e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001412:	9201      	str	r2, [sp, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	9200      	str	r2, [sp, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <main+0x9d0>)
 800141c:	2128      	movs	r1, #40	; 0x28
 800141e:	2002      	movs	r0, #2
 8001420:	f000 fdab 	bl	8001f7a <ST7735_WriteString>
 8001424:	e024      	b.n	8001470 <main+0x950>
			}else if(menu == 3){
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <main+0x9c8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d10e      	bne.n	800144c <main+0x92c>
				ST7735_WriteString(2, 50, menuEnter, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <main+0x9a8>)
 8001430:	2200      	movs	r2, #0
 8001432:	9202      	str	r2, [sp, #8]
 8001434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001438:	9201      	str	r2, [sp, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	9200      	str	r2, [sp, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <main+0x9d0>)
 8001442:	2132      	movs	r1, #50	; 0x32
 8001444:	2002      	movs	r0, #2
 8001446:	f000 fd98 	bl	8001f7a <ST7735_WriteString>
 800144a:	e011      	b.n	8001470 <main+0x950>
			}else if(menu == 4){
 800144c:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <main+0x9c8>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b04      	cmp	r3, #4
 8001452:	d10d      	bne.n	8001470 <main+0x950>
				ST7735_WriteString(2, 60, menuEnter, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <main+0x9a8>)
 8001456:	2200      	movs	r2, #0
 8001458:	9202      	str	r2, [sp, #8]
 800145a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145e:	9201      	str	r2, [sp, #4]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	9200      	str	r2, [sp, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a22      	ldr	r2, [pc, #136]	; (80014f0 <main+0x9d0>)
 8001468:	213c      	movs	r1, #60	; 0x3c
 800146a:	2002      	movs	r0, #2
 800146c:	f000 fd85 	bl	8001f7a <ST7735_WriteString>


			}
		}

		if(screen == 1){
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <main+0x9d4>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d111      	bne.n	800149c <main+0x97c>

			sprintf(ch, "Settings");
 8001478:	491f      	ldr	r1, [pc, #124]	; (80014f8 <main+0x9d8>)
 800147a:	4812      	ldr	r0, [pc, #72]	; (80014c4 <main+0x9a4>)
 800147c:	f005 ffae 	bl	80073dc <siprintf>
			ST7735_WriteString(20, 0, ch, Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <main+0x9dc>)
 8001482:	2200      	movs	r2, #0
 8001484:	9202      	str	r2, [sp, #8]
 8001486:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800148a:	9201      	str	r2, [sp, #4]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <main+0x9a4>)
 8001494:	2100      	movs	r1, #0
 8001496:	2014      	movs	r0, #20
 8001498:	f000 fd6f 	bl	8001f7a <ST7735_WriteString>

		}

		HC595_send(led);
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <main+0x99c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fb75 	bl	8001b90 <HC595_send>
		HAL_Delay(100);
 80014a6:	2064      	movs	r0, #100	; 0x64
 80014a8:	f001 faca 	bl	8002a40 <HAL_Delay>


	    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80014ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <main+0x9e0>)
 80014b2:	f002 f834 	bl	800351e <HAL_GPIO_TogglePin>
	  if(screen == 0 && test == 0){
 80014b6:	f7ff bb8d 	b.w	8000bd4 <main+0xb4>
 80014ba:	bf00      	nop
 80014bc:	20000284 	.word	0x20000284
 80014c0:	080097e0 	.word	0x080097e0
 80014c4:	20000288 	.word	0x20000288
 80014c8:	20000000 	.word	0x20000000
 80014cc:	40020000 	.word	0x40020000
 80014d0:	080097f0 	.word	0x080097f0
 80014d4:	08009800 	.word	0x08009800
 80014d8:	200002c8 	.word	0x200002c8
 80014dc:	20000020 	.word	0x20000020
 80014e0:	08009810 	.word	0x08009810
 80014e4:	08009824 	.word	0x08009824
 80014e8:	20000281 	.word	0x20000281
 80014ec:	08009830 	.word	0x08009830
 80014f0:	2000001c 	.word	0x2000001c
 80014f4:	20000280 	.word	0x20000280
 80014f8:	0800983c 	.word	0x0800983c
 80014fc:	20000008 	.word	0x20000008
 8001500:	40020400 	.word	0x40020400

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0b8      	sub	sp, #224	; 0xe0
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800150e:	2234      	movs	r2, #52	; 0x34
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f005 fb18 	bl	8006b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	2290      	movs	r2, #144	; 0x90
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f005 fb09 	bl	8006b48 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001536:	f002 fec7 	bl	80042c8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <SystemClock_Config+0x124>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a3a      	ldr	r2, [pc, #232]	; (8001628 <SystemClock_Config+0x124>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <SystemClock_Config+0x124>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <SystemClock_Config+0x128>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <SystemClock_Config+0x128>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b32      	ldr	r3, [pc, #200]	; (800162c <SystemClock_Config+0x128>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800156e:	2301      	movs	r3, #1
 8001570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001574:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800158a:	2304      	movs	r3, #4
 800158c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001590:	2360      	movs	r3, #96	; 0x60
 8001592:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800159c:	2304      	movs	r3, #4
 800159e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 feee 	bl	8004388 <HAL_RCC_OscConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80015b2:	f000 fb35 	bl	8001c20 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015b6:	f002 fe97 	bl	80042e8 <HAL_PWREx_EnableOverDrive>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015c0:	f000 fb2e 	bl	8001c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015e8:	2103      	movs	r1, #3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 f97a 	bl	80048e4 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015f6:	f000 fb13 	bl	8001c20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <SystemClock_Config+0x12c>)
 80015fc:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015fe:	2300      	movs	r3, #0
 8001600:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001602:	2300      	movs	r3, #0
 8001604:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fb69 	bl	8004ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800161c:	f000 fb00 	bl	8001c20 <Error_Handler>
  }
}
 8001620:	bf00      	nop
 8001622:	37e0      	adds	r7, #224	; 0xe0
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000
 8001630:	00204100 	.word	0x00204100

08001634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163a:	463b      	mov	r3, r7
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <MX_ADC1_Init+0x9c>)
 8001648:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <MX_ADC1_Init+0xa0>)
 800164a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <MX_ADC1_Init+0x9c>)
 800164e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001652:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_ADC1_Init+0x9c>)
 8001656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800165a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_ADC1_Init+0x9c>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_ADC1_Init+0x9c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_ADC1_Init+0x9c>)
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_ADC1_Init+0x9c>)
 8001672:	2200      	movs	r2, #0
 8001674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_ADC1_Init+0x9c>)
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <MX_ADC1_Init+0xa4>)
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_ADC1_Init+0x9c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_ADC1_Init+0x9c>)
 8001684:	2201      	movs	r2, #1
 8001686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_ADC1_Init+0x9c>)
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_ADC1_Init+0x9c>)
 8001692:	2201      	movs	r2, #1
 8001694:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <MX_ADC1_Init+0x9c>)
 8001698:	f001 f9f6 	bl	8002a88 <HAL_ADC_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80016a2:	f000 fabd 	bl	8001c20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016a6:	2303      	movs	r3, #3
 80016a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <MX_ADC1_Init+0x9c>)
 80016b8:	f001 fa2a 	bl	8002b10 <HAL_ADC_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80016c2:	f000 faad 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20003178 	.word	0x20003178
 80016d4:	40012000 	.word	0x40012000
 80016d8:	0f000001 	.word	0x0f000001

080016dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_I2C1_Init+0x74>)
 80016e2:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <MX_I2C1_Init+0x78>)
 80016e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_I2C1_Init+0x74>)
 80016e8:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <MX_I2C1_Init+0x7c>)
 80016ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_I2C1_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_I2C1_Init+0x74>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_I2C1_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_I2C1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_I2C1_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_I2C1_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_I2C1_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_I2C1_Init+0x74>)
 8001718:	f001 ff1c 	bl	8003554 <HAL_I2C_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001722:	f000 fa7d 	bl	8001c20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001726:	2100      	movs	r1, #0
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <MX_I2C1_Init+0x74>)
 800172a:	f002 fbed 	bl	8003f08 <HAL_I2CEx_ConfigAnalogFilter>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001734:	f000 fa74 	bl	8001c20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001738:	2100      	movs	r1, #0
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_I2C1_Init+0x74>)
 800173c:	f002 fc2f 	bl	8003f9e <HAL_I2CEx_ConfigDigitalFilter>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001746:	f000 fa6b 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000520 	.word	0x20000520
 8001754:	40005400 	.word	0x40005400
 8001758:	20303e5d 	.word	0x20303e5d

0800175c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001762:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <MX_SPI1_Init+0x78>)
 8001764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800176c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001770:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001774:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001778:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800177c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_SPI1_Init+0x74>)
 800178c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001790:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_SPI1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <MX_SPI1_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_SPI1_Init+0x74>)
 80017be:	f003 febb 	bl	8005538 <HAL_SPI_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80017c8:	f000 fa2a 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200031d0 	.word	0x200031d0
 80017d4:	40013000 	.word	0x40013000

080017d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_USART3_UART_Init+0x58>)
 80017de:	4a15      	ldr	r2, [pc, #84]	; (8001834 <MX_USART3_UART_Init+0x5c>)
 80017e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <MX_USART3_UART_Init+0x58>)
 80017e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART3_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_USART3_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART3_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_USART3_UART_Init+0x58>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART3_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_USART3_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART3_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_USART3_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_USART3_UART_Init+0x58>)
 800181c:	f004 fa06 	bl	8005c2c <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001826:	f000 f9fb 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000418 	.word	0x20000418
 8001834:	40004800 	.word	0x40004800

08001838 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001842:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001846:	2206      	movs	r2, #6
 8001848:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184c:	2202      	movs	r2, #2
 800184e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001858:	2202      	movs	r2, #2
 800185a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185e:	2201      	movs	r2, #1
 8001860:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001870:	2201      	movs	r2, #1
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800187c:	f002 fbdb 	bl	8004036 <HAL_PCD_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001886:	f000 f9cb 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000056c 	.word	0x2000056c

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4bb0      	ldr	r3, [pc, #704]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4aaf      	ldr	r2, [pc, #700]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4bad      	ldr	r3, [pc, #692]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c2:	4baa      	ldr	r3, [pc, #680]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4aa9      	ldr	r2, [pc, #676]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4ba7      	ldr	r3, [pc, #668]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	4ba4      	ldr	r3, [pc, #656]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4aa3      	ldr	r2, [pc, #652]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4ba1      	ldr	r3, [pc, #644]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b9e      	ldr	r3, [pc, #632]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a9d      	ldr	r2, [pc, #628]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b9b      	ldr	r3, [pc, #620]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b98      	ldr	r3, [pc, #608]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a97      	ldr	r2, [pc, #604]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b95      	ldr	r3, [pc, #596]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001922:	4b92      	ldr	r3, [pc, #584]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a91      	ldr	r2, [pc, #580]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001928:	f043 0310 	orr.w	r3, r3, #16
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b8f      	ldr	r3, [pc, #572]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193a:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a8b      	ldr	r2, [pc, #556]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b89      	ldr	r3, [pc, #548]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001952:	4b86      	ldr	r3, [pc, #536]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a85      	ldr	r2, [pc, #532]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b83      	ldr	r3, [pc, #524]	; (8001b6c <MX_GPIO_Init+0x2d8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2140      	movs	r1, #64	; 0x40
 800196e:	4880      	ldr	r0, [pc, #512]	; (8001b70 <MX_GPIO_Init+0x2dc>)
 8001970:	f001 fdbc 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f244 0181 	movw	r1, #16513	; 0x4081
 800197a:	487e      	ldr	r0, [pc, #504]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 800197c:	f001 fdb6 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RS_Pin|HC595_DS_Pin|LED_TEST1_Pin|LED_Alert_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001986:	487c      	ldr	r0, [pc, #496]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 8001988:	f001 fdb0 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, HC595_SR_Pin|HC595_CLK_Pin|LED_TEST2_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8001992:	487a      	ldr	r0, [pc, #488]	; (8001b7c <MX_GPIO_Init+0x2e8>)
 8001994:	f001 fdaa 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800199e:	4878      	ldr	r0, [pc, #480]	; (8001b80 <MX_GPIO_Init+0x2ec>)
 80019a0:	f001 fda4 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2140      	movs	r1, #64	; 0x40
 80019a8:	4876      	ldr	r0, [pc, #472]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 80019aa:	f001 fd9f 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_Btn_Pin PC8 */
  GPIO_InitStruct.Pin = USER_Btn_Pin|GPIO_PIN_8;
 80019ae:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b4:	4b74      	ldr	r3, [pc, #464]	; (8001b88 <MX_GPIO_Init+0x2f4>)
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	4872      	ldr	r0, [pc, #456]	; (8001b8c <MX_GPIO_Init+0x2f8>)
 80019c4:	f001 fbce 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : But_Down_Pin But_Up_Pin But_Left_Pin */
  GPIO_InitStruct.Pin = But_Down_Pin|But_Up_Pin|But_Left_Pin;
 80019c8:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	4619      	mov	r1, r3
 80019dc:	4866      	ldr	r0, [pc, #408]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 80019de:	f001 fbc1 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : But_Enter_Pin But_Right_Pin */
  GPIO_InitStruct.Pin = But_Enter_Pin|But_Right_Pin;
 80019e2:	2309      	movs	r3, #9
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4865      	ldr	r0, [pc, #404]	; (8001b8c <MX_GPIO_Init+0x2f8>)
 80019f6:	f001 fbb5 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019fa:	2332      	movs	r3, #50	; 0x32
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a0a:	230b      	movs	r3, #11
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a12:	4619      	mov	r1, r3
 8001a14:	485d      	ldr	r0, [pc, #372]	; (8001b8c <MX_GPIO_Init+0x2f8>)
 8001a16:	f001 fba5 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001a1a:	2306      	movs	r3, #6
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a2a:	230b      	movs	r3, #11
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	484e      	ldr	r0, [pc, #312]	; (8001b70 <MX_GPIO_Init+0x2dc>)
 8001a36:	f001 fb95 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001a3a:	2340      	movs	r3, #64	; 0x40
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4847      	ldr	r0, [pc, #284]	; (8001b70 <MX_GPIO_Init+0x2dc>)
 8001a52:	f001 fb87 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a56:	f244 0381 	movw	r3, #16513	; 0x4081
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4841      	ldr	r0, [pc, #260]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 8001a70:	f001 fb78 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin HC595_DS_Pin LED_TEST1_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|HC595_DS_Pin|LED_TEST1_Pin;
 8001a74:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	483a      	ldr	r0, [pc, #232]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 8001a8e:	f001 fb69 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Alert_Pin */
  GPIO_InitStruct.Pin = LED_Alert_Pin;
 8001a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a98:	2311      	movs	r3, #17
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_Alert_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4833      	ldr	r0, [pc, #204]	; (8001b78 <MX_GPIO_Init+0x2e4>)
 8001aac:	f001 fb5a 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : HC595_SR_Pin HC595_CLK_Pin LED_TEST2_Pin */
  GPIO_InitStruct.Pin = HC595_SR_Pin|HC595_CLK_Pin|LED_TEST2_Pin;
 8001ab0:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	482c      	ldr	r0, [pc, #176]	; (8001b7c <MX_GPIO_Init+0x2e8>)
 8001aca:	f001 fb4b 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae0:	230b      	movs	r3, #11
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4822      	ldr	r0, [pc, #136]	; (8001b74 <MX_GPIO_Init+0x2e0>)
 8001aec:	f001 fb3a 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin;
 8001af0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b06:	4619      	mov	r1, r3
 8001b08:	481d      	ldr	r0, [pc, #116]	; (8001b80 <MX_GPIO_Init+0x2ec>)
 8001b0a:	f001 fb2b 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b0e:	2340      	movs	r3, #64	; 0x40
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	4619      	mov	r1, r3
 8001b24:	4817      	ldr	r0, [pc, #92]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 8001b26:	f001 fb1d 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4811      	ldr	r0, [pc, #68]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 8001b3e:	f001 fb11 	bl	8003164 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b54:	230b      	movs	r3, #11
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <MX_GPIO_Init+0x2f0>)
 8001b60:	f001 fb00 	bl	8003164 <HAL_GPIO_Init>

}
 8001b64:	bf00      	nop
 8001b66:	3738      	adds	r7, #56	; 0x38
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40021400 	.word	0x40021400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021800 	.word	0x40021800
 8001b88:	10110000 	.word	0x10110000
 8001b8c:	40020800 	.word	0x40020800

08001b90 <HC595_send>:

/* USER CODE BEGIN 4 */
void HC595_send(uint8_t ld)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
	uint8_t mask;
	for (mask=0x80; mask; mask = mask >> 1)
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e023      	b.n	8001be8 <HC595_send+0x58>
	{
		if (led_595[ld] & mask)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <HC595_send+0x84>)
 8001ba4:	5cd2      	ldrb	r2, [r2, r3]
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HC595_send+0x2e>
		{
			HAL_GPIO_WritePin(HC595_DS_GPIO_Port, HC595_DS_Pin, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb6:	4818      	ldr	r0, [pc, #96]	; (8001c18 <HC595_send+0x88>)
 8001bb8:	f001 fc98 	bl	80034ec <HAL_GPIO_WritePin>
 8001bbc:	e005      	b.n	8001bca <HC595_send+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(HC595_DS_GPIO_Port, HC595_DS_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc4:	4814      	ldr	r0, [pc, #80]	; (8001c18 <HC595_send+0x88>)
 8001bc6:	f001 fc91 	bl	80034ec <HAL_GPIO_WritePin>
		}

		HAL_GPIO_WritePin(HC595_CLK_GPIO_Port, HC595_CLK_Pin, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bd0:	4812      	ldr	r0, [pc, #72]	; (8001c1c <HC595_send+0x8c>)
 8001bd2:	f001 fc8b 	bl	80034ec <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		HAL_GPIO_WritePin(HC595_CLK_GPIO_Port, HC595_CLK_Pin, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bdc:	480f      	ldr	r0, [pc, #60]	; (8001c1c <HC595_send+0x8c>)
 8001bde:	f001 fc85 	bl	80034ec <HAL_GPIO_WritePin>
	for (mask=0x80; mask; mask = mask >> 1)
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1d8      	bne.n	8001ba0 <HC595_send+0x10>
	}
		HAL_GPIO_WritePin(HC595_SR_GPIO_Port, HC595_SR_Pin, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf4:	4809      	ldr	r0, [pc, #36]	; (8001c1c <HC595_send+0x8c>)
 8001bf6:	f001 fc79 	bl	80034ec <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f000 ff20 	bl	8002a40 <HAL_Delay>
		HAL_GPIO_WritePin(HC595_SR_GPIO_Port, HC595_SR_Pin, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HC595_send+0x8c>)
 8001c08:	f001 fc70 	bl	80034ec <HAL_GPIO_WritePin>
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000080 	.word	0x20000080
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021000 	.word	0x40021000

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c36:	4802      	ldr	r0, [pc, #8]	; (8001c40 <ST7735_Select+0x14>)
 8001c38:	f001 fc58 	bl	80034ec <HAL_GPIO_WritePin>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40020c00 	.word	0x40020c00

08001c44 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c4e:	4802      	ldr	r0, [pc, #8]	; (8001c58 <ST7735_Unselect+0x14>)
 8001c50:	f001 fc4c 	bl	80034ec <HAL_GPIO_WritePin>
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40020c00 	.word	0x40020c00

08001c5c <ST7735_Reset>:

static void ST7735_Reset() {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c66:	4807      	ldr	r0, [pc, #28]	; (8001c84 <ST7735_Reset+0x28>)
 8001c68:	f001 fc40 	bl	80034ec <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001c6c:	2005      	movs	r0, #5
 8001c6e:	f000 fee7 	bl	8002a40 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001c72:	2201      	movs	r2, #1
 8001c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <ST7735_Reset+0x28>)
 8001c7a:	f001 fc37 	bl	80034ec <HAL_GPIO_WritePin>
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020c00 	.word	0x40020c00

08001c88 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c98:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <ST7735_WriteCommand+0x2c>)
 8001c9a:	f001 fc27 	bl	80034ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001c9e:	1df9      	adds	r1, r7, #7
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <ST7735_WriteCommand+0x30>)
 8001ca8:	f003 fcf1 	bl	800568e <HAL_SPI_Transmit>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	200031d0 	.word	0x200031d0

08001cbc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ccc:	4807      	ldr	r0, [pc, #28]	; (8001cec <ST7735_WriteData+0x30>)
 8001cce:	f001 fc0d 	bl	80034ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <ST7735_WriteData+0x34>)
 8001cde:	f003 fcd6 	bl	800568e <HAL_SPI_Transmit>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021400 	.word	0x40021400
 8001cf0:	200031d0 	.word	0x200031d0

08001cf4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001d06:	e034      	b.n	8001d72 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ffb7 	bl	8001c88 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001d24:	7abb      	ldrb	r3, [r7, #10]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001d2e:	7abb      	ldrb	r3, [r7, #10]
 8001d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d34:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001d36:	7abb      	ldrb	r3, [r7, #10]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001d3c:	7abb      	ldrb	r3, [r7, #10]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ffbb 	bl	8001cbc <ST7735_WriteData>
            addr += numArgs;
 8001d46:	7abb      	ldrb	r3, [r7, #10]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001d4e:	89bb      	ldrh	r3, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001d5e:	89bb      	ldrh	r3, [r7, #12]
 8001d60:	2bff      	cmp	r3, #255	; 0xff
 8001d62:	d102      	bne.n	8001d6a <ST7735_ExecuteCommandList+0x76>
 8001d64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d68:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001d6a:	89bb      	ldrh	r3, [r7, #12]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fe67 	bl	8002a40 <HAL_Delay>
    while(numCommands--) {
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	73fa      	strb	r2, [r7, #15]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1c5      	bne.n	8001d08 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001d86:	b590      	push	{r4, r7, lr}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	4608      	mov	r0, r1
 8001d90:	4611      	mov	r1, r2
 8001d92:	461a      	mov	r2, r3
 8001d94:	4623      	mov	r3, r4
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71bb      	strb	r3, [r7, #6]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	717b      	strb	r3, [r7, #5]
 8001da0:	4613      	mov	r3, r2
 8001da2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001da4:	202a      	movs	r0, #42	; 0x2a
 8001da6:	f7ff ff6f 	bl	8001c88 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001daa:	2300      	movs	r3, #0
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	2300      	movs	r3, #0
 8001db4:	73bb      	strb	r3, [r7, #14]
 8001db6:	797b      	ldrb	r3, [r7, #5]
 8001db8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff7b 	bl	8001cbc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001dc6:	202b      	movs	r0, #43	; 0x2b
 8001dc8:	f7ff ff5e 	bl	8001c88 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001dd0:	793b      	ldrb	r3, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	2104      	movs	r1, #4
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff6e 	bl	8001cbc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001de0:	202c      	movs	r0, #44	; 0x2c
 8001de2:	f7ff ff51 	bl	8001c88 <ST7735_WriteCommand>
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
	...

08001df0 <ST7735_Init>:

void ST7735_Init() {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001df4:	f7ff ff1a 	bl	8001c2c <ST7735_Select>
    ST7735_Reset();
 8001df8:	f7ff ff30 	bl	8001c5c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001dfc:	4806      	ldr	r0, [pc, #24]	; (8001e18 <ST7735_Init+0x28>)
 8001dfe:	f7ff ff79 	bl	8001cf4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <ST7735_Init+0x2c>)
 8001e04:	f7ff ff76 	bl	8001cf4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <ST7735_Init+0x30>)
 8001e0a:	f7ff ff73 	bl	8001cf4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001e0e:	f7ff ff19 	bl	8001c44 <ST7735_Unselect>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	0801b760 	.word	0x0801b760
 8001e1c:	0801b79c 	.word	0x0801b79c
 8001e20:	0801b7ac 	.word	0x0801b7ac

08001e24 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	80bb      	strh	r3, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	2b7f      	cmp	r3, #127	; 0x7f
 8001e3a:	d823      	bhi.n	8001e84 <ST7735_DrawPixel+0x60>
 8001e3c:	88bb      	ldrh	r3, [r7, #4]
 8001e3e:	2b9f      	cmp	r3, #159	; 0x9f
 8001e40:	d820      	bhi.n	8001e84 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8001e42:	f7ff fef3 	bl	8001c2c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	b2d8      	uxtb	r0, r3
 8001e4a:	88bb      	ldrh	r3, [r7, #4]
 8001e4c:	b2d9      	uxtb	r1, r3
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	88bb      	ldrh	r3, [r7, #4]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f7ff ff92 	bl	8001d86 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	733b      	strb	r3, [r7, #12]
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	2102      	movs	r1, #2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff1f 	bl	8001cbc <ST7735_WriteData>

    ST7735_Unselect();
 8001e7e:	f7ff fee1 	bl	8001c44 <ST7735_Unselect>
 8001e82:	e000      	b.n	8001e86 <ST7735_DrawPixel+0x62>
        return;
 8001e84:	bf00      	nop
}
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	b590      	push	{r4, r7, lr}
 8001e90:	b089      	sub	sp, #36	; 0x24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	80bb      	strh	r3, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	b2d8      	uxtb	r0, r3
 8001ea6:	88bb      	ldrh	r3, [r7, #4]
 8001ea8:	b2d9      	uxtb	r1, r3
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b2dc      	uxtb	r4, r3
 8001eba:	88bb      	ldrh	r3, [r7, #4]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4622      	mov	r2, r4
 8001ecc:	f7ff ff5b 	bl	8001d86 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	e043      	b.n	8001f5e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	3b20      	subs	r3, #32
 8001edc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	440b      	add	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	e029      	b.n	8001f4c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00e      	beq.n	8001f26 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001f08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	743b      	strb	r3, [r7, #16]
 8001f12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fecc 	bl	8001cbc <ST7735_WriteData>
 8001f24:	e00f      	b.n	8001f46 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001f26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	733b      	strb	r3, [r7, #12]
 8001f32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff febb 	bl	8001cbc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001f50:	461a      	mov	r2, r3
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d3cf      	bcc.n	8001ef8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f62:	461a      	mov	r2, r3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d3b5      	bcc.n	8001ed6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	3724      	adds	r7, #36	; 0x24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f76:	b002      	add	sp, #8
 8001f78:	4770      	bx	lr

08001f7a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af04      	add	r7, sp, #16
 8001f82:	603a      	str	r2, [r7, #0]
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001f8e:	f7ff fe4d 	bl	8001c2c <ST7735_Select>

    while(*str) {
 8001f92:	e02d      	b.n	8001ff0 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	7d3a      	ldrb	r2, [r7, #20]
 8001f98:	4413      	add	r3, r2
 8001f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f9c:	dd13      	ble.n	8001fc6 <ST7735_WriteString+0x4c>
            x = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001fa2:	7d7b      	ldrb	r3, [r7, #21]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	88bb      	ldrh	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001fac:	88bb      	ldrh	r3, [r7, #4]
 8001fae:	7d7a      	ldrb	r2, [r7, #21]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	2b9f      	cmp	r3, #159	; 0x9f
 8001fb4:	dc21      	bgt.n	8001ffa <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d103      	bne.n	8001fc6 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	603b      	str	r3, [r7, #0]
                continue;
 8001fc4:	e014      	b.n	8001ff0 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	88b9      	ldrh	r1, [r7, #4]
 8001fcc:	88f8      	ldrh	r0, [r7, #6]
 8001fce:	8c3b      	ldrh	r3, [r7, #32]
 8001fd0:	9302      	str	r3, [sp, #8]
 8001fd2:	8bbb      	ldrh	r3, [r7, #28]
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f7ff ff56 	bl	8001e8c <ST7735_WriteChar>
        x += font.width;
 8001fe0:	7d3b      	ldrb	r3, [r7, #20]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
        str++;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1cd      	bne.n	8001f94 <ST7735_WriteString+0x1a>
 8001ff8:	e000      	b.n	8001ffc <ST7735_WriteString+0x82>
                break;
 8001ffa:	bf00      	nop
    }

    ST7735_Unselect();
 8001ffc:	f7ff fe22 	bl	8001c44 <ST7735_Unselect>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800200a:	b002      	add	sp, #8
 800200c:	4770      	bx	lr
	...

08002010 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4604      	mov	r4, r0
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4623      	mov	r3, r4
 8002020:	80fb      	strh	r3, [r7, #6]
 8002022:	4603      	mov	r3, r0
 8002024:	80bb      	strh	r3, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	807b      	strh	r3, [r7, #2]
 800202a:	4613      	mov	r3, r2
 800202c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	2b7f      	cmp	r3, #127	; 0x7f
 8002032:	d858      	bhi.n	80020e6 <ST7735_FillRectangle+0xd6>
 8002034:	88bb      	ldrh	r3, [r7, #4]
 8002036:	2b9f      	cmp	r3, #159	; 0x9f
 8002038:	d855      	bhi.n	80020e6 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800203a:	88fa      	ldrh	r2, [r7, #6]
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	4413      	add	r3, r2
 8002040:	2b80      	cmp	r3, #128	; 0x80
 8002042:	dd03      	ble.n	800204c <ST7735_FillRectangle+0x3c>
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800204a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800204c:	88ba      	ldrh	r2, [r7, #4]
 800204e:	883b      	ldrh	r3, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	2ba0      	cmp	r3, #160	; 0xa0
 8002054:	dd03      	ble.n	800205e <ST7735_FillRectangle+0x4e>
 8002056:	88bb      	ldrh	r3, [r7, #4]
 8002058:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800205c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800205e:	f7ff fde5 	bl	8001c2c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	b2d8      	uxtb	r0, r3
 8002066:	88bb      	ldrh	r3, [r7, #4]
 8002068:	b2d9      	uxtb	r1, r3
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4413      	add	r3, r2
 8002074:	b2db      	uxtb	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b2dc      	uxtb	r4, r3
 800207a:	88bb      	ldrh	r3, [r7, #4]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	883b      	ldrh	r3, [r7, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4413      	add	r3, r2
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	4622      	mov	r2, r4
 800208c:	f7ff fe7b 	bl	8001d86 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002090:	8c3b      	ldrh	r3, [r7, #32]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	b29b      	uxth	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	733b      	strb	r3, [r7, #12]
 800209a:	8c3b      	ldrh	r3, [r7, #32]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a6:	4812      	ldr	r0, [pc, #72]	; (80020f0 <ST7735_FillRectangle+0xe0>)
 80020a8:	f001 fa20 	bl	80034ec <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80020ac:	883b      	ldrh	r3, [r7, #0]
 80020ae:	80bb      	strh	r3, [r7, #4]
 80020b0:	e013      	b.n	80020da <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	80fb      	strh	r3, [r7, #6]
 80020b6:	e00a      	b.n	80020ce <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80020b8:	f107 010c 	add.w	r1, r7, #12
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	2202      	movs	r2, #2
 80020c2:	480c      	ldr	r0, [pc, #48]	; (80020f4 <ST7735_FillRectangle+0xe4>)
 80020c4:	f003 fae3 	bl	800568e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f1      	bne.n	80020b8 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	80bb      	strh	r3, [r7, #4]
 80020da:	88bb      	ldrh	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e8      	bne.n	80020b2 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80020e0:	f7ff fdb0 	bl	8001c44 <ST7735_Unselect>
 80020e4:	e000      	b.n	80020e8 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80020e6:	bf00      	nop
}
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40021400 	.word	0x40021400
 80020f4:	200031d0 	.word	0x200031d0

080020f8 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	23a0      	movs	r3, #160	; 0xa0
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	2100      	movs	r1, #0
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff ff7f 	bl	8002010 <ST7735_FillRectangle>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800211a:	b590      	push	{r4, r7, lr}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	4604      	mov	r4, r0
 8002122:	4608      	mov	r0, r1
 8002124:	4611      	mov	r1, r2
 8002126:	461a      	mov	r2, r3
 8002128:	4623      	mov	r3, r4
 800212a:	80fb      	strh	r3, [r7, #6]
 800212c:	4603      	mov	r3, r0
 800212e:	80bb      	strh	r3, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	2b7f      	cmp	r3, #127	; 0x7f
 800213c:	d831      	bhi.n	80021a2 <ST7735_DrawImage+0x88>
 800213e:	88bb      	ldrh	r3, [r7, #4]
 8002140:	2b9f      	cmp	r3, #159	; 0x9f
 8002142:	d82e      	bhi.n	80021a2 <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8002144:	88fa      	ldrh	r2, [r7, #6]
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	4413      	add	r3, r2
 800214a:	2b80      	cmp	r3, #128	; 0x80
 800214c:	dc2b      	bgt.n	80021a6 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800214e:	88ba      	ldrh	r2, [r7, #4]
 8002150:	883b      	ldrh	r3, [r7, #0]
 8002152:	4413      	add	r3, r2
 8002154:	2ba0      	cmp	r3, #160	; 0xa0
 8002156:	dc28      	bgt.n	80021aa <ST7735_DrawImage+0x90>

    ST7735_Select();
 8002158:	f7ff fd68 	bl	8001c2c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	b2d8      	uxtb	r0, r3
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	b2d9      	uxtb	r1, r3
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	4413      	add	r3, r2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b2dc      	uxtb	r4, r3
 8002174:	88bb      	ldrh	r3, [r7, #4]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	883b      	ldrh	r3, [r7, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4413      	add	r3, r2
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4622      	mov	r2, r4
 8002186:	f7ff fdfe 	bl	8001d86 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	883a      	ldrh	r2, [r7, #0]
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4619      	mov	r1, r3
 8002196:	69b8      	ldr	r0, [r7, #24]
 8002198:	f7ff fd90 	bl	8001cbc <ST7735_WriteData>
    ST7735_Unselect();
 800219c:	f7ff fd52 	bl	8001c44 <ST7735_Unselect>
 80021a0:	e004      	b.n	80021ac <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80021a2:	bf00      	nop
 80021a4:	e002      	b.n	80021ac <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 80021a6:	bf00      	nop
 80021a8:	e000      	b.n	80021ac <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 80021aa:	bf00      	nop
}
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
	...

080021b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_MspInit+0x44>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_MspInit+0x44>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_MspInit+0x44>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_MspInit+0x44>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_MspInit+0x44>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_MspInit+0x44>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800

080021fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <HAL_ADC_MspInit+0x74>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d123      	bne.n	8002266 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_ADC_MspInit+0x78>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_ADC_MspInit+0x78>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_ADC_MspInit+0x78>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_ADC_MspInit+0x78>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_ADC_MspInit+0x78>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_ADC_MspInit+0x78>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800224e:	2308      	movs	r3, #8
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002252:	2303      	movs	r3, #3
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_ADC_MspInit+0x7c>)
 8002262:	f000 ff7f 	bl	8003164 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40012000 	.word	0x40012000
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000

0800227c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_I2C_MspInit+0x7c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d128      	bne.n	80022f0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022bc:	2312      	movs	r3, #18
 80022be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c8:	2304      	movs	r3, #4
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	480b      	ldr	r0, [pc, #44]	; (8002300 <HAL_I2C_MspInit+0x84>)
 80022d4:	f000 ff46 	bl	8003164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e2:	6413      	str	r3, [r2, #64]	; 0x40
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_I2C_MspInit+0x80>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40005400 	.word	0x40005400
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020400 	.word	0x40020400

08002304 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a17      	ldr	r2, [pc, #92]	; (8002380 <HAL_SPI_MspInit+0x7c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d127      	bne.n	8002376 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_SPI_MspInit+0x80>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_SPI_MspInit+0x80>)
 800232c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_SPI_MspInit+0x80>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_SPI_MspInit+0x80>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_SPI_MspInit+0x80>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_SPI_MspInit+0x80>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002356:	23a0      	movs	r3, #160	; 0xa0
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002366:	2305      	movs	r3, #5
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_SPI_MspInit+0x84>)
 8002372:	f000 fef7 	bl	8003164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40013000 	.word	0x40013000
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000

0800238c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_UART_MspInit+0x7c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d128      	bne.n	8002400 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_UART_MspInit+0x80>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_UART_MspInit+0x80>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_UART_MspInit+0x80>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_UART_MspInit+0x80>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <HAL_UART_MspInit+0x80>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_UART_MspInit+0x80>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f0:	2307      	movs	r3, #7
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <HAL_UART_MspInit+0x84>)
 80023fc:	f000 feb2 	bl	8003164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002400:	bf00      	nop
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40004800 	.word	0x40004800
 800240c:	40023800 	.word	0x40023800
 8002410:	40020c00 	.word	0x40020c00

08002414 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002434:	d141      	bne.n	80024ba <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a22      	ldr	r2, [pc, #136]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800244e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002460:	230a      	movs	r3, #10
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4817      	ldr	r0, [pc, #92]	; (80024c8 <HAL_PCD_MspInit+0xb4>)
 800246c:	f000 fe7a 	bl	8003164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	4810      	ldr	r0, [pc, #64]	; (80024c8 <HAL_PCD_MspInit+0xb4>)
 8002486:	f000 fe6d 	bl	8003164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 8002490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002494:	6353      	str	r3, [r2, #52]	; 0x34
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_PCD_MspInit+0xb0>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80024ba:	bf00      	nop
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020000 	.word	0x40020000

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <NMI_Handler+0x4>

080024d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <HardFault_Handler+0x4>

080024d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <MemManage_Handler+0x4>

080024de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <BusFault_Handler+0x4>

080024e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <UsageFault_Handler+0x4>

080024ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	buttPer++;
 8002518:	4b90      	ldr	r3, [pc, #576]	; (800275c <SysTick_Handler+0x248>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b8e      	ldr	r3, [pc, #568]	; (800275c <SysTick_Handler+0x248>)
 8002522:	701a      	strb	r2, [r3, #0]
	//Обработка кнопок
	tt = HAL_GetTick();
 8002524:	f000 fa80 	bl	8002a28 <HAL_GetTick>
 8002528:	4603      	mov	r3, r0
 800252a:	4a8d      	ldr	r2, [pc, #564]	; (8002760 <SysTick_Handler+0x24c>)
 800252c:	6013      	str	r3, [r2, #0]
	if(buttPer >= 20){
 800252e:	4b8b      	ldr	r3, [pc, #556]	; (800275c <SysTick_Handler+0x248>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b13      	cmp	r3, #19
 8002534:	f240 810e 	bls.w	8002754 <SysTick_Handler+0x240>

		//Кнопка А
	if(HAL_GPIO_ReadPin(But_Left_GPIO_Port, But_Left_Pin) == 0 && but_a.short_state == 0 && (tt - but_a.delay) > 50){
 8002538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800253c:	4889      	ldr	r0, [pc, #548]	; (8002764 <SysTick_Handler+0x250>)
 800253e:	f000 ffbd 	bl	80034bc <HAL_GPIO_ReadPin>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d112      	bne.n	800256e <SysTick_Handler+0x5a>
 8002548:	4b87      	ldr	r3, [pc, #540]	; (8002768 <SysTick_Handler+0x254>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10e      	bne.n	800256e <SysTick_Handler+0x5a>
 8002550:	4b83      	ldr	r3, [pc, #524]	; (8002760 <SysTick_Handler+0x24c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a84      	ldr	r2, [pc, #528]	; (8002768 <SysTick_Handler+0x254>)
 8002556:	7852      	ldrb	r2, [r2, #1]
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	2b32      	cmp	r3, #50	; 0x32
 800255c:	d907      	bls.n	800256e <SysTick_Handler+0x5a>
		but_a.short_state =1;	but_a.delay = tt;
 800255e:	4b82      	ldr	r3, [pc, #520]	; (8002768 <SysTick_Handler+0x254>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <SysTick_Handler+0x24c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b7f      	ldr	r3, [pc, #508]	; (8002768 <SysTick_Handler+0x254>)
 800256c:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(But_Left_GPIO_Port, But_Left_Pin) == 1 && but_a.short_state == 1 && (tt - but_a.delay) >50){
 800256e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002572:	487c      	ldr	r0, [pc, #496]	; (8002764 <SysTick_Handler+0x250>)
 8002574:	f000 ffa2 	bl	80034bc <HAL_GPIO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d113      	bne.n	80025a6 <SysTick_Handler+0x92>
 800257e:	4b7a      	ldr	r3, [pc, #488]	; (8002768 <SysTick_Handler+0x254>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10f      	bne.n	80025a6 <SysTick_Handler+0x92>
 8002586:	4b76      	ldr	r3, [pc, #472]	; (8002760 <SysTick_Handler+0x24c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a77      	ldr	r2, [pc, #476]	; (8002768 <SysTick_Handler+0x254>)
 800258c:	7852      	ldrb	r2, [r2, #1]
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	2b32      	cmp	r3, #50	; 0x32
 8002592:	d908      	bls.n	80025a6 <SysTick_Handler+0x92>
		but = 1;	but_a.short_state = 0;	but_a.delay = 0;
 8002594:	4b75      	ldr	r3, [pc, #468]	; (800276c <SysTick_Handler+0x258>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	4b73      	ldr	r3, [pc, #460]	; (8002768 <SysTick_Handler+0x254>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <SysTick_Handler+0x254>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	705a      	strb	r2, [r3, #1]
	}

	//Кнопка B
	if(HAL_GPIO_ReadPin(But_Up_GPIO_Port, But_Up_Pin) == 0 && but_b.short_state == 0 && (tt - but_b.delay) > 50){
 80025a6:	2120      	movs	r1, #32
 80025a8:	486e      	ldr	r0, [pc, #440]	; (8002764 <SysTick_Handler+0x250>)
 80025aa:	f000 ff87 	bl	80034bc <HAL_GPIO_ReadPin>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d112      	bne.n	80025da <SysTick_Handler+0xc6>
 80025b4:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <SysTick_Handler+0x25c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10e      	bne.n	80025da <SysTick_Handler+0xc6>
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <SysTick_Handler+0x24c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6b      	ldr	r2, [pc, #428]	; (8002770 <SysTick_Handler+0x25c>)
 80025c2:	7852      	ldrb	r2, [r2, #1]
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	2b32      	cmp	r3, #50	; 0x32
 80025c8:	d907      	bls.n	80025da <SysTick_Handler+0xc6>
		but_b.short_state =1;	but_b.delay = tt;
 80025ca:	4b69      	ldr	r3, [pc, #420]	; (8002770 <SysTick_Handler+0x25c>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	4b63      	ldr	r3, [pc, #396]	; (8002760 <SysTick_Handler+0x24c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4b66      	ldr	r3, [pc, #408]	; (8002770 <SysTick_Handler+0x25c>)
 80025d8:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(But_Up_GPIO_Port, But_Up_Pin) == 1 && but_b.short_state == 1 && (tt - but_b.delay) >50){
 80025da:	2120      	movs	r1, #32
 80025dc:	4861      	ldr	r0, [pc, #388]	; (8002764 <SysTick_Handler+0x250>)
 80025de:	f000 ff6d 	bl	80034bc <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d113      	bne.n	8002610 <SysTick_Handler+0xfc>
 80025e8:	4b61      	ldr	r3, [pc, #388]	; (8002770 <SysTick_Handler+0x25c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d10f      	bne.n	8002610 <SysTick_Handler+0xfc>
 80025f0:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <SysTick_Handler+0x24c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5e      	ldr	r2, [pc, #376]	; (8002770 <SysTick_Handler+0x25c>)
 80025f6:	7852      	ldrb	r2, [r2, #1]
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	2b32      	cmp	r3, #50	; 0x32
 80025fc:	d908      	bls.n	8002610 <SysTick_Handler+0xfc>
		but = 2;	but_b.short_state = 0;	but_b.delay = 0;
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <SysTick_Handler+0x258>)
 8002600:	2202      	movs	r2, #2
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	4b5a      	ldr	r3, [pc, #360]	; (8002770 <SysTick_Handler+0x25c>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	4b59      	ldr	r3, [pc, #356]	; (8002770 <SysTick_Handler+0x25c>)
 800260c:	2200      	movs	r2, #0
 800260e:	705a      	strb	r2, [r3, #1]
	}


	//Кнопка C
	if(HAL_GPIO_ReadPin(But_Down_GPIO_Port, But_Down_Pin) == 0 && but_c.short_state == 0 && (tt - but_c.delay) > 50){
 8002610:	2108      	movs	r1, #8
 8002612:	4854      	ldr	r0, [pc, #336]	; (8002764 <SysTick_Handler+0x250>)
 8002614:	f000 ff52 	bl	80034bc <HAL_GPIO_ReadPin>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <SysTick_Handler+0x130>
 800261e:	4b55      	ldr	r3, [pc, #340]	; (8002774 <SysTick_Handler+0x260>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10e      	bne.n	8002644 <SysTick_Handler+0x130>
 8002626:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <SysTick_Handler+0x24c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a52      	ldr	r2, [pc, #328]	; (8002774 <SysTick_Handler+0x260>)
 800262c:	7852      	ldrb	r2, [r2, #1]
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	2b32      	cmp	r3, #50	; 0x32
 8002632:	d907      	bls.n	8002644 <SysTick_Handler+0x130>
		but_c.short_state =1;	but_c.delay = tt;
 8002634:	4b4f      	ldr	r3, [pc, #316]	; (8002774 <SysTick_Handler+0x260>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	4b49      	ldr	r3, [pc, #292]	; (8002760 <SysTick_Handler+0x24c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <SysTick_Handler+0x260>)
 8002642:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(But_Down_GPIO_Port, But_Down_Pin) == 1 && but_c.short_state == 1 && (tt - but_c.delay) >50){
 8002644:	2108      	movs	r1, #8
 8002646:	4847      	ldr	r0, [pc, #284]	; (8002764 <SysTick_Handler+0x250>)
 8002648:	f000 ff38 	bl	80034bc <HAL_GPIO_ReadPin>
 800264c:	4603      	mov	r3, r0
 800264e:	2b01      	cmp	r3, #1
 8002650:	d113      	bne.n	800267a <SysTick_Handler+0x166>
 8002652:	4b48      	ldr	r3, [pc, #288]	; (8002774 <SysTick_Handler+0x260>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d10f      	bne.n	800267a <SysTick_Handler+0x166>
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <SysTick_Handler+0x24c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a45      	ldr	r2, [pc, #276]	; (8002774 <SysTick_Handler+0x260>)
 8002660:	7852      	ldrb	r2, [r2, #1]
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	2b32      	cmp	r3, #50	; 0x32
 8002666:	d908      	bls.n	800267a <SysTick_Handler+0x166>
		but = 3;	but_c.short_state = 0;	but_c.delay = 0;
 8002668:	4b40      	ldr	r3, [pc, #256]	; (800276c <SysTick_Handler+0x258>)
 800266a:	2203      	movs	r2, #3
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <SysTick_Handler+0x260>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <SysTick_Handler+0x260>)
 8002676:	2200      	movs	r2, #0
 8002678:	705a      	strb	r2, [r3, #1]
	}


	//Кнопка D
	if(HAL_GPIO_ReadPin(But_Right_GPIO_Port, But_Right_Pin) == 0 && but_d.short_state == 0 && (tt - but_d.delay) > 50){
 800267a:	2108      	movs	r1, #8
 800267c:	483e      	ldr	r0, [pc, #248]	; (8002778 <SysTick_Handler+0x264>)
 800267e:	f000 ff1d 	bl	80034bc <HAL_GPIO_ReadPin>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d112      	bne.n	80026ae <SysTick_Handler+0x19a>
 8002688:	4b3c      	ldr	r3, [pc, #240]	; (800277c <SysTick_Handler+0x268>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10e      	bne.n	80026ae <SysTick_Handler+0x19a>
 8002690:	4b33      	ldr	r3, [pc, #204]	; (8002760 <SysTick_Handler+0x24c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <SysTick_Handler+0x268>)
 8002696:	7852      	ldrb	r2, [r2, #1]
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	2b32      	cmp	r3, #50	; 0x32
 800269c:	d907      	bls.n	80026ae <SysTick_Handler+0x19a>
		but_d.short_state =1;	but_d.delay = tt;
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <SysTick_Handler+0x268>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <SysTick_Handler+0x24c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <SysTick_Handler+0x268>)
 80026ac:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(But_Right_GPIO_Port, But_Right_Pin) == 1 && but_d.short_state == 1 && (tt - but_d.delay) >50){
 80026ae:	2108      	movs	r1, #8
 80026b0:	4831      	ldr	r0, [pc, #196]	; (8002778 <SysTick_Handler+0x264>)
 80026b2:	f000 ff03 	bl	80034bc <HAL_GPIO_ReadPin>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d113      	bne.n	80026e4 <SysTick_Handler+0x1d0>
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <SysTick_Handler+0x268>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10f      	bne.n	80026e4 <SysTick_Handler+0x1d0>
 80026c4:	4b26      	ldr	r3, [pc, #152]	; (8002760 <SysTick_Handler+0x24c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2c      	ldr	r2, [pc, #176]	; (800277c <SysTick_Handler+0x268>)
 80026ca:	7852      	ldrb	r2, [r2, #1]
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	2b32      	cmp	r3, #50	; 0x32
 80026d0:	d908      	bls.n	80026e4 <SysTick_Handler+0x1d0>
		but = 4;	but_d.short_state = 0;	but_d.delay = 0;
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <SysTick_Handler+0x258>)
 80026d4:	2204      	movs	r2, #4
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <SysTick_Handler+0x268>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <SysTick_Handler+0x268>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	705a      	strb	r2, [r3, #1]
	}

	//Кнопка CTR
	if(HAL_GPIO_ReadPin(But_Enter_GPIO_Port, But_Enter_Pin) == 0 && but_ctr.short_state == 0 && (tt - but_ctr.delay) > 50){
 80026e4:	2101      	movs	r1, #1
 80026e6:	4824      	ldr	r0, [pc, #144]	; (8002778 <SysTick_Handler+0x264>)
 80026e8:	f000 fee8 	bl	80034bc <HAL_GPIO_ReadPin>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d112      	bne.n	8002718 <SysTick_Handler+0x204>
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <SysTick_Handler+0x26c>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10e      	bne.n	8002718 <SysTick_Handler+0x204>
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <SysTick_Handler+0x24c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <SysTick_Handler+0x26c>)
 8002700:	7852      	ldrb	r2, [r2, #1]
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	2b32      	cmp	r3, #50	; 0x32
 8002706:	d907      	bls.n	8002718 <SysTick_Handler+0x204>
		but_ctr.short_state =1;	but_ctr.delay = tt;
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <SysTick_Handler+0x26c>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <SysTick_Handler+0x24c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <SysTick_Handler+0x26c>)
 8002716:	705a      	strb	r2, [r3, #1]
	}
	if(HAL_GPIO_ReadPin(But_Enter_GPIO_Port, But_Enter_Pin) == 1 && but_ctr.short_state == 1 && (tt - but_ctr.delay) >50){
 8002718:	2101      	movs	r1, #1
 800271a:	4817      	ldr	r0, [pc, #92]	; (8002778 <SysTick_Handler+0x264>)
 800271c:	f000 fece 	bl	80034bc <HAL_GPIO_ReadPin>
 8002720:	4603      	mov	r3, r0
 8002722:	2b01      	cmp	r3, #1
 8002724:	d113      	bne.n	800274e <SysTick_Handler+0x23a>
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <SysTick_Handler+0x26c>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10f      	bne.n	800274e <SysTick_Handler+0x23a>
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <SysTick_Handler+0x24c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a13      	ldr	r2, [pc, #76]	; (8002780 <SysTick_Handler+0x26c>)
 8002734:	7852      	ldrb	r2, [r2, #1]
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	2b32      	cmp	r3, #50	; 0x32
 800273a:	d908      	bls.n	800274e <SysTick_Handler+0x23a>
		but = 5;	but_ctr.short_state = 0;	but_ctr.delay = 0;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <SysTick_Handler+0x258>)
 800273e:	2205      	movs	r2, #5
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <SysTick_Handler+0x26c>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <SysTick_Handler+0x26c>)
 800274a:	2200      	movs	r2, #0
 800274c:	705a      	strb	r2, [r3, #1]
	}

	buttPer = 0;
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <SysTick_Handler+0x248>)
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002754:	f000 f954 	bl	8002a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	200002d0 	.word	0x200002d0
 8002760:	200002cc 	.word	0x200002cc
 8002764:	40021400 	.word	0x40021400
 8002768:	200031c4 	.word	0x200031c4
 800276c:	20000283 	.word	0x20000283
 8002770:	200031c0 	.word	0x200031c0
 8002774:	2000051c 	.word	0x2000051c
 8002778:	40020800 	.word	0x40020800
 800277c:	200031cc 	.word	0x200031cc
 8002780:	20003174 	.word	0x20003174

08002784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
	return 1;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_kill>:

int _kill(int pid, int sig)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800279e:	f004 f9a9 	bl	8006af4 <__errno>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2216      	movs	r2, #22
 80027a6:	601a      	str	r2, [r3, #0]
	return -1;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_exit>:

void _exit (int status)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ffe7 	bl	8002794 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027c6:	e7fe      	b.n	80027c6 <_exit+0x12>

080027c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e00a      	b.n	80027f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027da:	f3af 8000 	nop.w
 80027de:	4601      	mov	r1, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	60ba      	str	r2, [r7, #8]
 80027e6:	b2ca      	uxtb	r2, r1
 80027e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	dbf0      	blt.n	80027da <_read+0x12>
	}

return len;
 80027f8:	687b      	ldr	r3, [r7, #4]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e009      	b.n	8002828 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	60ba      	str	r2, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	dbf1      	blt.n	8002814 <_write+0x12>
	}
	return len;
 8002830:	687b      	ldr	r3, [r7, #4]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_close>:

int _close(int file)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
	return -1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002862:	605a      	str	r2, [r3, #4]
	return 0;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_isatty>:

int _isatty(int file)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
	return 1;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
	return 0;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <_sbrk+0x5c>)
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <_sbrk+0x60>)
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <_sbrk+0x64>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <_sbrk+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d207      	bcs.n	80028e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d4:	f004 f90e 	bl	8006af4 <__errno>
 80028d8:	4603      	mov	r3, r0
 80028da:	220c      	movs	r2, #12
 80028dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20080000 	.word	0x20080000
 8002904:	00000400 	.word	0x00000400
 8002908:	200002d4 	.word	0x200002d4
 800290c:	20009448 	.word	0x20009448

08002910 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <SystemInit+0x20>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <SystemInit+0x20>)
 800291c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800296c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002938:	480d      	ldr	r0, [pc, #52]	; (8002970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800293a:	490e      	ldr	r1, [pc, #56]	; (8002974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800293c:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002940:	e002      	b.n	8002948 <LoopCopyDataInit>

08002942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002946:	3304      	adds	r3, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800294c:	d3f9      	bcc.n	8002942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002950:	4c0b      	ldr	r4, [pc, #44]	; (8002980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002954:	e001      	b.n	800295a <LoopFillZerobss>

08002956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002958:	3204      	adds	r2, #4

0800295a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800295c:	d3fb      	bcc.n	8002956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800295e:	f7ff ffd7 	bl	8002910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002962:	f004 f8cd 	bl	8006b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002966:	f7fe f8db 	bl	8000b20 <main>
  bx  lr    
 800296a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800296c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002974:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002978:	0801bbe4 	.word	0x0801bbe4
  ldr r2, =_sbss
 800297c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002980:	20009448 	.word	0x20009448

08002984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC_IRQHandler>

08002986 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298a:	2003      	movs	r0, #3
 800298c:	f000 fbb6 	bl	80030fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002990:	2000      	movs	r0, #0
 8002992:	f000 f805 	bl	80029a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002996:	f7ff fc0d 	bl	80021b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_InitTick+0x54>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_InitTick+0x58>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fbc3 	bl	800314a <HAL_SYSTICK_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00e      	b.n	80029ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b0f      	cmp	r3, #15
 80029d2:	d80a      	bhi.n	80029ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d4:	2200      	movs	r2, #0
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	f000 fb99 	bl	8003112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e0:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_InitTick+0x5c>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000088 	.word	0x20000088
 80029f8:	20000090 	.word	0x20000090
 80029fc:	2000008c 	.word	0x2000008c

08002a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_IncTick+0x20>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_IncTick+0x24>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <HAL_IncTick+0x24>)
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000090 	.word	0x20000090
 8002a24:	20009434 	.word	0x20009434

08002a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_GetTick+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20009434 	.word	0x20009434

08002a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff ffee 	bl	8002a28 <HAL_GetTick>
 8002a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d005      	beq.n	8002a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_Delay+0x44>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a66:	bf00      	nop
 8002a68:	f7ff ffde 	bl	8002a28 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d8f7      	bhi.n	8002a68 <HAL_Delay+0x28>
  {
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000090 	.word	0x20000090

08002a88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e031      	b.n	8002b02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fba8 	bl	80021fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_ADC_Init+0x84>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	f043 0202 	orr.w	r2, r3, #2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f964 	bl	8002da4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
 8002af2:	e001      	b.n	8002af8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	ffffeefd 	.word	0xffffeefd

08002b10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x1c>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e12a      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x272>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	d93a      	bls.n	8002bb2 <HAL_ADC_ConfigChannel+0xa2>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b44:	d035      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68d9      	ldr	r1, [r3, #12]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b1e      	subs	r3, #30
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	400a      	ands	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a87      	ldr	r2, [pc, #540]	; (8002d90 <HAL_ADC_ConfigChannel+0x280>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10a      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68d9      	ldr	r1, [r3, #12]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	061a      	lsls	r2, r3, #24
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b8a:	e035      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68d9      	ldr	r1, [r3, #12]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4403      	add	r3, r0
 8002ba4:	3b1e      	subs	r3, #30
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb0:	e022      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6919      	ldr	r1, [r3, #16]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6919      	ldr	r1, [r3, #16]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	4603      	mov	r3, r0
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4403      	add	r3, r0
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d824      	bhi.n	8002c4a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b05      	subs	r3, #5
 8002c12:	221f      	movs	r2, #31
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	400a      	ands	r2, r1
 8002c20:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b05      	subs	r3, #5
 8002c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34
 8002c48:	e04c      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b0c      	cmp	r3, #12
 8002c50:	d824      	bhi.n	8002c9c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	3b23      	subs	r3, #35	; 0x23
 8002c64:	221f      	movs	r2, #31
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	400a      	ands	r2, r1
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4618      	mov	r0, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3b23      	subs	r3, #35	; 0x23
 8002c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
 8002c9a:	e023      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	3b41      	subs	r3, #65	; 0x41
 8002cae:	221f      	movs	r2, #31
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	400a      	ands	r2, r1
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b41      	subs	r3, #65	; 0x41
 8002cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <HAL_ADC_ConfigChannel+0x284>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10a      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1f4>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cf6:	d105      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_ADC_ConfigChannel+0x288>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <HAL_ADC_ConfigChannel+0x288>)
 8002cfe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d02:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <HAL_ADC_ConfigChannel+0x284>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d109      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x212>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b12      	cmp	r3, #18
 8002d14:	d105      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_ADC_ConfigChannel+0x288>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_ADC_ConfigChannel+0x288>)
 8002d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d20:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_ADC_ConfigChannel+0x284>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d125      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x268>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <HAL_ADC_ConfigChannel+0x280>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <HAL_ADC_ConfigChannel+0x22e>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b11      	cmp	r3, #17
 8002d3c:	d11c      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_ADC_ConfigChannel+0x288>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <HAL_ADC_ConfigChannel+0x288>)
 8002d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_ADC_ConfigChannel+0x280>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d111      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_ADC_ConfigChannel+0x28c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <HAL_ADC_ConfigChannel+0x290>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0c9a      	lsrs	r2, r3, #18
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d6a:	e002      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f9      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	10000012 	.word	0x10000012
 8002d94:	40012000 	.word	0x40012000
 8002d98:	40012300 	.word	0x40012300
 8002d9c:	20000088 	.word	0x20000088
 8002da0:	431bde83 	.word	0x431bde83

08002da4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002dac:	4b78      	ldr	r3, [pc, #480]	; (8002f90 <ADC_Init+0x1ec>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a77      	ldr	r2, [pc, #476]	; (8002f90 <ADC_Init+0x1ec>)
 8002db2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002db6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002db8:	4b75      	ldr	r3, [pc, #468]	; (8002f90 <ADC_Init+0x1ec>)
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4973      	ldr	r1, [pc, #460]	; (8002f90 <ADC_Init+0x1ec>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	021a      	lsls	r2, r3, #8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6899      	ldr	r1, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	4a58      	ldr	r2, [pc, #352]	; (8002f94 <ADC_Init+0x1f0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6899      	ldr	r1, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6899      	ldr	r1, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	e00f      	b.n	8002e9e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0202 	bic.w	r2, r2, #2
 8002eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6899      	ldr	r1, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	005a      	lsls	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	035a      	lsls	r2, r3, #13
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	e007      	b.n	8002f14 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	051a      	lsls	r2, r3, #20
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f56:	025a      	lsls	r2, r3, #9
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6899      	ldr	r1, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	029a      	lsls	r2, r3, #10
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	40012300 	.word	0x40012300
 8002f94:	0f000001 	.word	0x0f000001

08002f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fc6:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	60d3      	str	r3, [r2, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00
 8002fdc:	05fa0000 	.word	0x05fa0000

08002fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	f003 0307 	and.w	r3, r3, #7
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	6039      	str	r1, [r7, #0]
 8003006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	2b00      	cmp	r3, #0
 800300e:	db0a      	blt.n	8003026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	490c      	ldr	r1, [pc, #48]	; (8003048 <__NVIC_SetPriority+0x4c>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	440b      	add	r3, r1
 8003020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003024:	e00a      	b.n	800303c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4908      	ldr	r1, [pc, #32]	; (800304c <__NVIC_SetPriority+0x50>)
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	3b04      	subs	r3, #4
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	440b      	add	r3, r1
 800303a:	761a      	strb	r2, [r3, #24]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000e100 	.word	0xe000e100
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f1c3 0307 	rsb	r3, r3, #7
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf28      	it	cs
 800306e:	2304      	movcs	r3, #4
 8003070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3304      	adds	r3, #4
 8003076:	2b06      	cmp	r3, #6
 8003078:	d902      	bls.n	8003080 <NVIC_EncodePriority+0x30>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3b03      	subs	r3, #3
 800307e:	e000      	b.n	8003082 <NVIC_EncodePriority+0x32>
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	401a      	ands	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003098:	f04f 31ff 	mov.w	r1, #4294967295
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43d9      	mvns	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	4313      	orrs	r3, r2
         );
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3724      	adds	r7, #36	; 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c8:	d301      	bcc.n	80030ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00f      	b.n	80030ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <SysTick_Config+0x40>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d6:	210f      	movs	r1, #15
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	f7ff ff8e 	bl	8002ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <SysTick_Config+0x40>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <SysTick_Config+0x40>)
 80030e8:	2207      	movs	r2, #7
 80030ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff47 	bl	8002f98 <__NVIC_SetPriorityGrouping>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003124:	f7ff ff5c 	bl	8002fe0 <__NVIC_GetPriorityGrouping>
 8003128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff8e 	bl	8003050 <NVIC_EncodePriority>
 8003134:	4602      	mov	r2, r0
 8003136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff5d 	bl	8002ffc <__NVIC_SetPriority>
}
 8003142:	bf00      	nop
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff ffb0 	bl	80030b8 <SysTick_Config>
 8003158:	4603      	mov	r3, r0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e175      	b.n	8003470 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	f040 8164 	bne.w	800346a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d00b      	beq.n	80031c2 <HAL_GPIO_Init+0x5e>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031b6:	2b11      	cmp	r3, #17
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b12      	cmp	r3, #18
 80031c0:	d130      	bne.n	8003224 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 0201 	and.w	r2, r3, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x100>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b12      	cmp	r3, #18
 8003262:	d123      	bne.n	80032ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	08da      	lsrs	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3208      	adds	r2, #8
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80be 	beq.w	800346a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	4b66      	ldr	r3, [pc, #408]	; (8003488 <HAL_GPIO_Init+0x324>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a65      	ldr	r2, [pc, #404]	; (8003488 <HAL_GPIO_Init+0x324>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_GPIO_Init+0x324>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003306:	4a61      	ldr	r2, [pc, #388]	; (800348c <HAL_GPIO_Init+0x328>)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_GPIO_Init+0x32c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d037      	beq.n	80033a2 <HAL_GPIO_Init+0x23e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a57      	ldr	r2, [pc, #348]	; (8003494 <HAL_GPIO_Init+0x330>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d031      	beq.n	800339e <HAL_GPIO_Init+0x23a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a56      	ldr	r2, [pc, #344]	; (8003498 <HAL_GPIO_Init+0x334>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d02b      	beq.n	800339a <HAL_GPIO_Init+0x236>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a55      	ldr	r2, [pc, #340]	; (800349c <HAL_GPIO_Init+0x338>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d025      	beq.n	8003396 <HAL_GPIO_Init+0x232>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <HAL_GPIO_Init+0x33c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01f      	beq.n	8003392 <HAL_GPIO_Init+0x22e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a53      	ldr	r2, [pc, #332]	; (80034a4 <HAL_GPIO_Init+0x340>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d019      	beq.n	800338e <HAL_GPIO_Init+0x22a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a52      	ldr	r2, [pc, #328]	; (80034a8 <HAL_GPIO_Init+0x344>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_GPIO_Init+0x226>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a51      	ldr	r2, [pc, #324]	; (80034ac <HAL_GPIO_Init+0x348>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00d      	beq.n	8003386 <HAL_GPIO_Init+0x222>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a50      	ldr	r2, [pc, #320]	; (80034b0 <HAL_GPIO_Init+0x34c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <HAL_GPIO_Init+0x21e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4f      	ldr	r2, [pc, #316]	; (80034b4 <HAL_GPIO_Init+0x350>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_GPIO_Init+0x21a>
 800337a:	2309      	movs	r3, #9
 800337c:	e012      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800337e:	230a      	movs	r3, #10
 8003380:	e010      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 8003382:	2308      	movs	r3, #8
 8003384:	e00e      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 8003386:	2307      	movs	r3, #7
 8003388:	e00c      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800338a:	2306      	movs	r3, #6
 800338c:	e00a      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800338e:	2305      	movs	r3, #5
 8003390:	e008      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 8003392:	2304      	movs	r3, #4
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 8003396:	2303      	movs	r3, #3
 8003398:	e004      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800339a:	2302      	movs	r3, #2
 800339c:	e002      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_GPIO_Init+0x240>
 80033a2:	2300      	movs	r3, #0
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f002 0203 	and.w	r2, r2, #3
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	4093      	lsls	r3, r2
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033b4:	4935      	ldr	r1, [pc, #212]	; (800348c <HAL_GPIO_Init+0x328>)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	3302      	adds	r3, #2
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c2:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <HAL_GPIO_Init+0x354>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e6:	4a34      	ldr	r2, [pc, #208]	; (80034b8 <HAL_GPIO_Init+0x354>)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033ec:	4b32      	ldr	r3, [pc, #200]	; (80034b8 <HAL_GPIO_Init+0x354>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003410:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <HAL_GPIO_Init+0x354>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_GPIO_Init+0x354>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800343a:	4a1f      	ldr	r2, [pc, #124]	; (80034b8 <HAL_GPIO_Init+0x354>)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_GPIO_Init+0x354>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003464:	4a14      	ldr	r2, [pc, #80]	; (80034b8 <HAL_GPIO_Init+0x354>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b0f      	cmp	r3, #15
 8003474:	f67f ae86 	bls.w	8003184 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3724      	adds	r7, #36	; 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	40013800 	.word	0x40013800
 8003490:	40020000 	.word	0x40020000
 8003494:	40020400 	.word	0x40020400
 8003498:	40020800 	.word	0x40020800
 800349c:	40020c00 	.word	0x40020c00
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40021400 	.word	0x40021400
 80034a8:	40021800 	.word	0x40021800
 80034ac:	40021c00 	.word	0x40021c00
 80034b0:	40022000 	.word	0x40022000
 80034b4:	40022400 	.word	0x40022400
 80034b8:	40013c00 	.word	0x40013c00

080034bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	887b      	ldrh	r3, [r7, #2]
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
 80034d8:	e001      	b.n	80034de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
 80034f8:	4613      	mov	r3, r2
 80034fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034fc:	787b      	ldrb	r3, [r7, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003508:	e003      	b.n	8003512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	041a      	lsls	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	619a      	str	r2, [r3, #24]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003530:	887a      	ldrh	r2, [r7, #2]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4013      	ands	r3, r2
 8003536:	041a      	lsls	r2, r3, #16
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	43d9      	mvns	r1, r3
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	400b      	ands	r3, r1
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	619a      	str	r2, [r3, #24]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe fe7e 	bl	800227c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	; 0x24
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	e006      	b.n	80035dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d104      	bne.n	80035ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_I2C_Init+0x11c>)
 80035fa:	430b      	orrs	r3, r1
 80035fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800360c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	ea42 0103 	orr.w	r1, r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69d9      	ldr	r1, [r3, #28]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	02008000 	.word	0x02008000

08003674 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	4608      	mov	r0, r1
 800367e:	4611      	mov	r1, r2
 8003680:	461a      	mov	r2, r3
 8003682:	4603      	mov	r3, r0
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	460b      	mov	r3, r1
 8003688:	813b      	strh	r3, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 80f9 	bne.w	800388e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x34>
 80036a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0ed      	b.n	8003890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_I2C_Mem_Write+0x4e>
 80036be:	2302      	movs	r3, #2
 80036c0:	e0e6      	b.n	8003890 <HAL_I2C_Mem_Write+0x21c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ca:	f7ff f9ad 	bl	8002a28 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2319      	movs	r3, #25
 80036d6:	2201      	movs	r2, #1
 80036d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fac3 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0d1      	b.n	8003890 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2221      	movs	r2, #33	; 0x21
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800370c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003714:	88f8      	ldrh	r0, [r7, #6]
 8003716:	893a      	ldrh	r2, [r7, #8]
 8003718:	8979      	ldrh	r1, [r7, #10]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	4603      	mov	r3, r0
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f9d3 	bl	8003ad0 <I2C_RequestMemoryWrite>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0a9      	b.n	8003890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2bff      	cmp	r3, #255	; 0xff
 8003744:	d90e      	bls.n	8003764 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	22ff      	movs	r2, #255	; 0xff
 800374a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	b2da      	uxtb	r2, r3
 8003752:	8979      	ldrh	r1, [r7, #10]
 8003754:	2300      	movs	r3, #0
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fba5 	bl	8003eac <I2C_TransferConfig>
 8003762:	e00f      	b.n	8003784 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	b2da      	uxtb	r2, r3
 8003774:	8979      	ldrh	r1, [r7, #10]
 8003776:	2300      	movs	r3, #0
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fb94 	bl	8003eac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 faad 	bl	8003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e07b      	b.n	8003890 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d034      	beq.n	800383c <HAL_I2C_Mem_Write+0x1c8>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d130      	bne.n	800383c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	2200      	movs	r2, #0
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fa3f 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e04d      	b.n	8003890 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2bff      	cmp	r3, #255	; 0xff
 80037fc:	d90e      	bls.n	800381c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	22ff      	movs	r2, #255	; 0xff
 8003802:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	b2da      	uxtb	r2, r3
 800380a:	8979      	ldrh	r1, [r7, #10]
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fb49 	bl	8003eac <I2C_TransferConfig>
 800381a:	e00f      	b.n	800383c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	b2da      	uxtb	r2, r3
 800382c:	8979      	ldrh	r1, [r7, #10]
 800382e:	2300      	movs	r3, #0
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fb38 	bl	8003eac <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d19e      	bne.n	8003784 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fa8c 	bl	8003d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e01a      	b.n	8003890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2220      	movs	r2, #32
 8003860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_I2C_Mem_Write+0x224>)
 800386e:	400b      	ands	r3, r1
 8003870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e000      	b.n	8003890 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800388e:	2302      	movs	r3, #2
  }
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	fe00e800 	.word	0xfe00e800

0800389c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	461a      	mov	r2, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	817b      	strh	r3, [r7, #10]
 80038ae:	460b      	mov	r3, r1
 80038b0:	813b      	strh	r3, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	f040 80fd 	bne.w	8003abe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_I2C_Mem_Read+0x34>
 80038ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d105      	bne.n	80038dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0f1      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_I2C_Mem_Read+0x4e>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e0ea      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x224>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038f2:	f7ff f899 	bl	8002a28 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2319      	movs	r3, #25
 80038fe:	2201      	movs	r2, #1
 8003900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f9af 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0d5      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2222      	movs	r2, #34	; 0x22
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003934:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800393c:	88f8      	ldrh	r0, [r7, #6]
 800393e:	893a      	ldrh	r2, [r7, #8]
 8003940:	8979      	ldrh	r1, [r7, #10]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	4603      	mov	r3, r0
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f913 	bl	8003b78 <I2C_RequestMemoryRead>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0ad      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2bff      	cmp	r3, #255	; 0xff
 800396c:	d90e      	bls.n	800398c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	b2da      	uxtb	r2, r3
 800397a:	8979      	ldrh	r1, [r7, #10]
 800397c:	4b52      	ldr	r3, [pc, #328]	; (8003ac8 <HAL_I2C_Mem_Read+0x22c>)
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fa91 	bl	8003eac <I2C_TransferConfig>
 800398a:	e00f      	b.n	80039ac <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	b2da      	uxtb	r2, r3
 800399c:	8979      	ldrh	r1, [r7, #10]
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_I2C_Mem_Read+0x22c>)
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa80 	bl	8003eac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	2200      	movs	r2, #0
 80039b4:	2104      	movs	r1, #4
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f956 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e07c      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d034      	beq.n	8003a6c <HAL_I2C_Mem_Read+0x1d0>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d130      	bne.n	8003a6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f927 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e04d      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2bff      	cmp	r3, #255	; 0xff
 8003a2c:	d90e      	bls.n	8003a4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	22ff      	movs	r2, #255	; 0xff
 8003a32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	8979      	ldrh	r1, [r7, #10]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fa31 	bl	8003eac <I2C_TransferConfig>
 8003a4a:	e00f      	b.n	8003a6c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	8979      	ldrh	r1, [r7, #10]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fa20 	bl	8003eac <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d19a      	bne.n	80039ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f974 	bl	8003d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e01a      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_I2C_Mem_Read+0x230>)
 8003a9e:	400b      	ands	r3, r1
 8003aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e000      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003abe:	2302      	movs	r3, #2
  }
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	80002400 	.word	0x80002400
 8003acc:	fe00e800 	.word	0xfe00e800

08003ad0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	813b      	strh	r3, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	8979      	ldrh	r1, [r7, #10]
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <I2C_RequestMemoryWrite+0xa4>)
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f9d7 	bl	8003eac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f8f0 	bl	8003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e02c      	b.n	8003b6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d105      	bne.n	8003b24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b18:	893b      	ldrh	r3, [r7, #8]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28
 8003b22:	e015      	b.n	8003b50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b24:	893b      	ldrh	r3, [r7, #8]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	69b9      	ldr	r1, [r7, #24]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f8d6 	bl	8003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e012      	b.n	8003b6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b46:	893b      	ldrh	r3, [r7, #8]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f884 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	80002000 	.word	0x80002000

08003b78 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	817b      	strh	r3, [r7, #10]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	813b      	strh	r3, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	8979      	ldrh	r1, [r7, #10]
 8003b98:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <I2C_RequestMemoryRead+0xa4>)
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f984 	bl	8003eac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f89d 	bl	8003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e02c      	b.n	8003c12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bbe:	893b      	ldrh	r3, [r7, #8]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc8:	e015      	b.n	8003bf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bca:	893b      	ldrh	r3, [r7, #8]
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	69b9      	ldr	r1, [r7, #24]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f883 	bl	8003ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e012      	b.n	8003c12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bec:	893b      	ldrh	r3, [r7, #8]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2140      	movs	r1, #64	; 0x40
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f831 	bl	8003c68 <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	80002000 	.word	0x80002000

08003c20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d103      	bne.n	8003c3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d007      	beq.n	8003c5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	619a      	str	r2, [r3, #24]
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c78:	e022      	b.n	8003cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d01e      	beq.n	8003cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c82:	f7fe fed1 	bl	8002a28 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d302      	bcc.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d113      	bne.n	8003cc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e00f      	b.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d0cd      	beq.n	8003c7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cf4:	e02c      	b.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f870 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e02a      	b.n	8003d60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d01e      	beq.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d12:	f7fe fe89 	bl	8002a28 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d302      	bcc.n	8003d28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d113      	bne.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e007      	b.n	8003d60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d1cb      	bne.n	8003cf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d74:	e028      	b.n	8003dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f830 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e026      	b.n	8003dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8a:	f7fe fe4d 	bl	8002a28 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d302      	bcc.n	8003da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d113      	bne.n	8003dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d1cf      	bne.n	8003d76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d151      	bne.n	8003e9e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dfa:	e022      	b.n	8003e42 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d01e      	beq.n	8003e42 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e04:	f7fe fe10 	bl	8002a28 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <I2C_IsAcknowledgeFailed+0x3a>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d113      	bne.n	8003e42 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e02e      	b.n	8003ea0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d1d5      	bne.n	8003dfc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2210      	movs	r2, #16
 8003e56:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7ff fedd 	bl	8003c20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003e72:	400b      	ands	r3, r1
 8003e74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f043 0204 	orr.w	r2, r3, #4
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	fe00e800 	.word	0xfe00e800

08003eac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	817b      	strh	r3, [r7, #10]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	0d5b      	lsrs	r3, r3, #21
 8003ec8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <I2C_TransferConfig+0x58>)
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	ea02 0103 	and.w	r1, r2, r3
 8003ed6:	897b      	ldrh	r3, [r7, #10]
 8003ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003edc:	7a7b      	ldrb	r3, [r7, #9]
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	03ff63ff 	.word	0x03ff63ff

08003f08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d138      	bne.n	8003f90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e032      	b.n	8003f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	; 0x24
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6819      	ldr	r1, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d139      	bne.n	8004028 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e033      	b.n	800402a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2224      	movs	r2, #36	; 0x24
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ff0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004038:	b08f      	sub	sp, #60	; 0x3c
 800403a:	af0a      	add	r7, sp, #40	; 0x28
 800403c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e116      	b.n	8004276 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe f9d6 	bl	8002414 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2203      	movs	r2, #3
 800406c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f002 fad4 	bl	8006634 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	687e      	ldr	r6, [r7, #4]
 8004094:	466d      	mov	r5, sp
 8004096:	f106 0410 	add.w	r4, r6, #16
 800409a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800409c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800409e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80040aa:	1d33      	adds	r3, r6, #4
 80040ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ae:	6838      	ldr	r0, [r7, #0]
 80040b0:	f002 fa68 	bl	8006584 <USB_CoreInit>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e0d7      	b.n	8004276 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f002 fac2 	bl	8006656 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e04a      	b.n	800416e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	333d      	adds	r3, #61	; 0x3d
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	333c      	adds	r3, #60	; 0x3c
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	b298      	uxth	r0, r3
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	3342      	adds	r3, #66	; 0x42
 8004114:	4602      	mov	r2, r0
 8004116:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	333f      	adds	r3, #63	; 0x3f
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3344      	adds	r3, #68	; 0x44
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3348      	adds	r3, #72	; 0x48
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3350      	adds	r3, #80	; 0x50
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	3301      	adds	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d3af      	bcc.n	80040d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	e044      	b.n	8004208 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041d6:	7bfa      	ldrb	r2, [r7, #15]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	3301      	adds	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d3b5      	bcc.n	800417e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	687e      	ldr	r6, [r7, #4]
 800421a:	466d      	mov	r5, sp
 800421c:	f106 0410 	add.w	r4, r6, #16
 8004220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800422c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004230:	1d33      	adds	r3, r6, #4
 8004232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004234:	6838      	ldr	r0, [r7, #0]
 8004236:	f002 fa39 	bl	80066ac <USB_DevInit>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e014      	b.n	8004276 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b01      	cmp	r3, #1
 8004262:	d102      	bne.n	800426a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f80b 	bl	8004280 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f002 fbeb 	bl	8006a4a <USB_DevDisconnect>

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004280 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	10000003 	.word	0x10000003

080042c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40007000 	.word	0x40007000

080042e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <HAL_PWREx_EnableOverDrive+0x98>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	4a22      	ldr	r2, [pc, #136]	; (8004380 <HAL_PWREx_EnableOverDrive+0x98>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6413      	str	r3, [r2, #64]	; 0x40
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <HAL_PWREx_EnableOverDrive+0x98>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800430a:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <HAL_PWREx_EnableOverDrive+0x9c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004316:	f7fe fb87 	bl	8002a28 <HAL_GetTick>
 800431a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800431c:	e009      	b.n	8004332 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800431e:	f7fe fb83 	bl	8002a28 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800432c:	d901      	bls.n	8004332 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e022      	b.n	8004378 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433e:	d1ee      	bne.n	800431e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004340:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a0f      	ldr	r2, [pc, #60]	; (8004384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800434c:	f7fe fb6c 	bl	8002a28 <HAL_GetTick>
 8004350:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004352:	e009      	b.n	8004368 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004354:	f7fe fb68 	bl	8002a28 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004362:	d901      	bls.n	8004368 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e007      	b.n	8004378 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <HAL_PWREx_EnableOverDrive+0x9c>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004374:	d1ee      	bne.n	8004354 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40023800 	.word	0x40023800
 8004384:	40007000 	.word	0x40007000

08004388 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004390:	2300      	movs	r3, #0
 8004392:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e29b      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8087 	beq.w	80044ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043ac:	4b96      	ldr	r3, [pc, #600]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d00c      	beq.n	80043d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b8:	4b93      	ldr	r3, [pc, #588]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d112      	bne.n	80043ea <HAL_RCC_OscConfig+0x62>
 80043c4:	4b90      	ldr	r3, [pc, #576]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d0:	d10b      	bne.n	80043ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d2:	4b8d      	ldr	r3, [pc, #564]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d06c      	beq.n	80044b8 <HAL_RCC_OscConfig+0x130>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d168      	bne.n	80044b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e275      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x7a>
 80043f4:	4b84      	ldr	r3, [pc, #528]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a83      	ldr	r2, [pc, #524]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80043fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e02e      	b.n	8004460 <HAL_RCC_OscConfig+0xd8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x9c>
 800440a:	4b7f      	ldr	r3, [pc, #508]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a7e      	ldr	r2, [pc, #504]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b7c      	ldr	r3, [pc, #496]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a7b      	ldr	r2, [pc, #492]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 800441c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e01d      	b.n	8004460 <HAL_RCC_OscConfig+0xd8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0xc0>
 800442e:	4b76      	ldr	r3, [pc, #472]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a75      	ldr	r2, [pc, #468]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b73      	ldr	r3, [pc, #460]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a72      	ldr	r2, [pc, #456]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0xd8>
 8004448:	4b6f      	ldr	r3, [pc, #444]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a6e      	ldr	r2, [pc, #440]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b6c      	ldr	r3, [pc, #432]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a6b      	ldr	r2, [pc, #428]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 800445a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800445e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe fade 	bl	8002a28 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7fe fada 	bl	8002a28 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	; 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e229      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b61      	ldr	r3, [pc, #388]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0xe8>
 800448e:	e014      	b.n	80044ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fe faca 	bl	8002a28 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004498:	f7fe fac6 	bl	8002a28 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b64      	cmp	r3, #100	; 0x64
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e215      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044aa:	4b57      	ldr	r3, [pc, #348]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x110>
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d069      	beq.n	800459a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044c6:	4b50      	ldr	r3, [pc, #320]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d2:	4b4d      	ldr	r3, [pc, #308]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d11c      	bne.n	8004518 <HAL_RCC_OscConfig+0x190>
 80044de:	4b4a      	ldr	r3, [pc, #296]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d116      	bne.n	8004518 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x17a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e1e9      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	4b41      	ldr	r3, [pc, #260]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	493d      	ldr	r1, [pc, #244]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	e040      	b.n	800459a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d023      	beq.n	8004568 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004520:	4b39      	ldr	r3, [pc, #228]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a38      	ldr	r2, [pc, #224]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe fa7c 	bl	8002a28 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004534:	f7fe fa78 	bl	8002a28 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e1c7      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004546:	4b30      	ldr	r3, [pc, #192]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4929      	ldr	r1, [pc, #164]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004562:	4313      	orrs	r3, r2
 8004564:	600b      	str	r3, [r1, #0]
 8004566:	e018      	b.n	800459a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004568:	4b27      	ldr	r3, [pc, #156]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a26      	ldr	r2, [pc, #152]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fe fa58 	bl	8002a28 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457c:	f7fe fa54 	bl	8002a28 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e1a3      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458e:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d038      	beq.n	8004618 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d019      	beq.n	80045e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ae:	4b16      	ldr	r3, [pc, #88]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80045b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b2:	4a15      	ldr	r2, [pc, #84]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fe fa35 	bl	8002a28 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fe fa31 	bl	8002a28 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e180      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80045d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x23a>
 80045e0:	e01a      	b.n	8004618 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80045e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e6:	4a08      	ldr	r2, [pc, #32]	; (8004608 <HAL_RCC_OscConfig+0x280>)
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ee:	f7fe fa1b 	bl	8002a28 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	e00a      	b.n	800460c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f6:	f7fe fa17 	bl	8002a28 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d903      	bls.n	800460c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e166      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
 8004608:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	4b92      	ldr	r3, [pc, #584]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ee      	bne.n	80045f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a4 	beq.w	800476e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004626:	4b8c      	ldr	r3, [pc, #560]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10d      	bne.n	800464e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	4b89      	ldr	r3, [pc, #548]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	4a88      	ldr	r2, [pc, #544]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463c:	6413      	str	r3, [r2, #64]	; 0x40
 800463e:	4b86      	ldr	r3, [pc, #536]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464e:	4b83      	ldr	r3, [pc, #524]	; (800485c <HAL_RCC_OscConfig+0x4d4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d118      	bne.n	800468c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800465a:	4b80      	ldr	r3, [pc, #512]	; (800485c <HAL_RCC_OscConfig+0x4d4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a7f      	ldr	r2, [pc, #508]	; (800485c <HAL_RCC_OscConfig+0x4d4>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004666:	f7fe f9df 	bl	8002a28 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7fe f9db 	bl	8002a28 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b64      	cmp	r3, #100	; 0x64
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e12a      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004680:	4b76      	ldr	r3, [pc, #472]	; (800485c <HAL_RCC_OscConfig+0x4d4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x31a>
 8004694:	4b70      	ldr	r3, [pc, #448]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	4a6f      	ldr	r2, [pc, #444]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6713      	str	r3, [r2, #112]	; 0x70
 80046a0:	e02d      	b.n	80046fe <HAL_RCC_OscConfig+0x376>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x33c>
 80046aa:	4b6b      	ldr	r3, [pc, #428]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	4a6a      	ldr	r2, [pc, #424]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70
 80046b6:	4b68      	ldr	r3, [pc, #416]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a67      	ldr	r2, [pc, #412]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
 80046c2:	e01c      	b.n	80046fe <HAL_RCC_OscConfig+0x376>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d10c      	bne.n	80046e6 <HAL_RCC_OscConfig+0x35e>
 80046cc:	4b62      	ldr	r3, [pc, #392]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4a61      	ldr	r2, [pc, #388]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70
 80046d8:	4b5f      	ldr	r3, [pc, #380]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	4a5e      	ldr	r2, [pc, #376]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
 80046e4:	e00b      	b.n	80046fe <HAL_RCC_OscConfig+0x376>
 80046e6:	4b5c      	ldr	r3, [pc, #368]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a5b      	ldr	r2, [pc, #364]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a58      	ldr	r2, [pc, #352]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	f023 0304 	bic.w	r3, r3, #4
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d015      	beq.n	8004732 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004706:	f7fe f98f 	bl	8002a28 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fe f98b 	bl	8002a28 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0d8      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004724:	4b4c      	ldr	r3, [pc, #304]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ee      	beq.n	800470e <HAL_RCC_OscConfig+0x386>
 8004730:	e014      	b.n	800475c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fe f979 	bl	8002a28 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fe f975 	bl	8002a28 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0c2      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004750:	4b41      	ldr	r3, [pc, #260]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ee      	bne.n	800473a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d105      	bne.n	800476e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a3c      	ldr	r2, [pc, #240]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80ae 	beq.w	80048d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004778:	4b37      	ldr	r3, [pc, #220]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b08      	cmp	r3, #8
 8004782:	d06d      	beq.n	8004860 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d14b      	bne.n	8004824 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478c:	4b32      	ldr	r3, [pc, #200]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a31      	ldr	r2, [pc, #196]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fe f946 	bl	8002a28 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fe f942 	bl	8002a28 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e091      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b29      	ldr	r3, [pc, #164]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	071b      	lsls	r3, r3, #28
 80047ea:	491b      	ldr	r1, [pc, #108]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fe f914 	bl	8002a28 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7fe f910 	bl	8002a28 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e05f      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x47c>
 8004822:	e057      	b.n	80048d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 800482a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800482e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fe f8fa 	bl	8002a28 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004838:	f7fe f8f6 	bl	8002a28 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e045      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	4b03      	ldr	r3, [pc, #12]	; (8004858 <HAL_RCC_OscConfig+0x4d0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x4b0>
 8004856:	e03d      	b.n	80048d4 <HAL_RCC_OscConfig+0x54c>
 8004858:	40023800 	.word	0x40023800
 800485c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004860:	4b1f      	ldr	r3, [pc, #124]	; (80048e0 <HAL_RCC_OscConfig+0x558>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d030      	beq.n	80048d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d129      	bne.n	80048d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d122      	bne.n	80048d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004890:	4013      	ands	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004896:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004898:	4293      	cmp	r3, r2
 800489a:	d119      	bne.n	80048d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	3b01      	subs	r3, #1
 80048aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d10f      	bne.n	80048d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800

080048e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0d0      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048fc:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d910      	bls.n	800492c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b67      	ldr	r3, [pc, #412]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 020f 	bic.w	r2, r3, #15
 8004912:	4965      	ldr	r1, [pc, #404]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b63      	ldr	r3, [pc, #396]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0b8      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d020      	beq.n	800497a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004944:	4b59      	ldr	r3, [pc, #356]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a58      	ldr	r2, [pc, #352]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 800494a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800494e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800495c:	4b53      	ldr	r3, [pc, #332]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a52      	ldr	r2, [pc, #328]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004966:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004968:	4b50      	ldr	r3, [pc, #320]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	494d      	ldr	r1, [pc, #308]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d040      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d107      	bne.n	800499e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d115      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e07f      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a6:	4b41      	ldr	r3, [pc, #260]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e073      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b6:	4b3d      	ldr	r3, [pc, #244]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e06b      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049c6:	4b39      	ldr	r3, [pc, #228]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f023 0203 	bic.w	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4936      	ldr	r1, [pc, #216]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d8:	f7fe f826 	bl	8002a28 <HAL_GetTick>
 80049dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e0:	f7fe f822 	bl	8002a28 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e053      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 020c 	and.w	r2, r3, #12
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d1eb      	bne.n	80049e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a08:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d210      	bcs.n	8004a38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 020f 	bic.w	r2, r3, #15
 8004a1e:	4922      	ldr	r1, [pc, #136]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e032      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a44:	4b19      	ldr	r3, [pc, #100]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4916      	ldr	r1, [pc, #88]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	490e      	ldr	r1, [pc, #56]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a76:	f000 f821 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	490a      	ldr	r1, [pc, #40]	; (8004ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8004a88:	5ccb      	ldrb	r3, [r1, r3]
 8004a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8e:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8004a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <HAL_RCC_ClockConfig+0x1d4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fd ff82 	bl	80029a0 <HAL_InitTick>

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023c00 	.word	0x40023c00
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	0801b7d8 	.word	0x0801b7d8
 8004ab4:	20000088 	.word	0x20000088
 8004ab8:	2000008c 	.word	0x2000008c

08004abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	2300      	movs	r3, #0
 8004ace:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad4:	4b67      	ldr	r3, [pc, #412]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d00d      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x40>
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	f200 80bd 	bhi.w	8004c60 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x34>
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d003      	beq.n	8004af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aee:	e0b7      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004af0:	4b61      	ldr	r3, [pc, #388]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004af2:	60bb      	str	r3, [r7, #8]
      break;
 8004af4:	e0b7      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004af6:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004af8:	60bb      	str	r3, [r7, #8]
      break;
 8004afa:	e0b4      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004afc:	4b5d      	ldr	r3, [pc, #372]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b04:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b06:	4b5b      	ldr	r3, [pc, #364]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d04d      	beq.n	8004bae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b12:	4b58      	ldr	r3, [pc, #352]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	099b      	lsrs	r3, r3, #6
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	ea02 0800 	and.w	r8, r2, r0
 8004b2a:	ea03 0901 	and.w	r9, r3, r1
 8004b2e:	4640      	mov	r0, r8
 8004b30:	4649      	mov	r1, r9
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	014b      	lsls	r3, r1, #5
 8004b3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b40:	0142      	lsls	r2, r0, #5
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	ebb0 0008 	subs.w	r0, r0, r8
 8004b4a:	eb61 0109 	sbc.w	r1, r1, r9
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	018b      	lsls	r3, r1, #6
 8004b58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b5c:	0182      	lsls	r2, r0, #6
 8004b5e:	1a12      	subs	r2, r2, r0
 8004b60:	eb63 0301 	sbc.w	r3, r3, r1
 8004b64:	f04f 0000 	mov.w	r0, #0
 8004b68:	f04f 0100 	mov.w	r1, #0
 8004b6c:	00d9      	lsls	r1, r3, #3
 8004b6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b72:	00d0      	lsls	r0, r2, #3
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	eb12 0208 	adds.w	r2, r2, r8
 8004b7c:	eb43 0309 	adc.w	r3, r3, r9
 8004b80:	f04f 0000 	mov.w	r0, #0
 8004b84:	f04f 0100 	mov.w	r1, #0
 8004b88:	0259      	lsls	r1, r3, #9
 8004b8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b8e:	0250      	lsls	r0, r2, #9
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	f7fb fba6 	bl	80002f0 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4613      	mov	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e04a      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bae:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	ea02 0400 	and.w	r4, r2, r0
 8004bc6:	ea03 0501 	and.w	r5, r3, r1
 8004bca:	4620      	mov	r0, r4
 8004bcc:	4629      	mov	r1, r5
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	014b      	lsls	r3, r1, #5
 8004bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bdc:	0142      	lsls	r2, r0, #5
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	1b00      	subs	r0, r0, r4
 8004be4:	eb61 0105 	sbc.w	r1, r1, r5
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	018b      	lsls	r3, r1, #6
 8004bf2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bf6:	0182      	lsls	r2, r0, #6
 8004bf8:	1a12      	subs	r2, r2, r0
 8004bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfe:	f04f 0000 	mov.w	r0, #0
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	00d9      	lsls	r1, r3, #3
 8004c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c0c:	00d0      	lsls	r0, r2, #3
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	1912      	adds	r2, r2, r4
 8004c14:	eb45 0303 	adc.w	r3, r5, r3
 8004c18:	f04f 0000 	mov.w	r0, #0
 8004c1c:	f04f 0100 	mov.w	r1, #0
 8004c20:	0299      	lsls	r1, r3, #10
 8004c22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c26:	0290      	lsls	r0, r2, #10
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	f7fb fb5a 	bl	80002f0 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	60bb      	str	r3, [r7, #8]
      break;
 8004c5e:	e002      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c62:	60bb      	str	r3, [r7, #8]
      break;
 8004c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c66:	68bb      	ldr	r3, [r7, #8]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800
 8004c78:	00f42400 	.word	0x00f42400
 8004c7c:	007a1200 	.word	0x007a1200

08004c80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c86:	681b      	ldr	r3, [r3, #0]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000088 	.word	0x20000088

08004c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c9c:	f7ff fff0 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	0801b7e8 	.word	0x0801b7e8

08004cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cc4:	f7ff ffdc 	bl	8004c80 <HAL_RCC_GetHCLKFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	0b5b      	lsrs	r3, r3, #13
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	4903      	ldr	r1, [pc, #12]	; (8004ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cd6:	5ccb      	ldrb	r3, [r1, r3]
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	0801b7e8 	.word	0x0801b7e8

08004ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d012      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d10:	4b69      	ldr	r3, [pc, #420]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a68      	ldr	r2, [pc, #416]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d1a:	6093      	str	r3, [r2, #8]
 8004d1c:	4b66      	ldr	r3, [pc, #408]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	4964      	ldr	r1, [pc, #400]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d017      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d42:	4b5d      	ldr	r3, [pc, #372]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d50:	4959      	ldr	r1, [pc, #356]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d60:	d101      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d017      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d7e:	4b4e      	ldr	r3, [pc, #312]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	494a      	ldr	r1, [pc, #296]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004daa:	2301      	movs	r3, #1
 8004dac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 808b 	beq.w	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dcc:	4b3a      	ldr	r3, [pc, #232]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	4a39      	ldr	r2, [pc, #228]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd8:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004de4:	4b35      	ldr	r3, [pc, #212]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a34      	ldr	r2, [pc, #208]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df0:	f7fd fe1a 	bl	8002a28 <HAL_GetTick>
 8004df4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df8:	f7fd fe16 	bl	8002a28 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e38f      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e0a:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e16:	4b28      	ldr	r3, [pc, #160]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d035      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d02e      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e34:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	4a1a      	ldr	r2, [pc, #104]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e56:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e5c:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d114      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd fdde 	bl	8002a28 <HAL_GetTick>
 8004e6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e70:	f7fd fdda 	bl	8002a28 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e351      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0ee      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e9e:	d111      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004eac:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eae:	400b      	ands	r3, r1
 8004eb0:	4901      	ldr	r1, [pc, #4]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	608b      	str	r3, [r1, #8]
 8004eb6:	e00b      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	0ffffcff 	.word	0x0ffffcff
 8004ec4:	4bb3      	ldr	r3, [pc, #716]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4ab2      	ldr	r2, [pc, #712]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ece:	6093      	str	r3, [r2, #8]
 8004ed0:	4bb0      	ldr	r3, [pc, #704]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004edc:	49ad      	ldr	r1, [pc, #692]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d010      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eee:	4ba9      	ldr	r3, [pc, #676]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef4:	4aa7      	ldr	r2, [pc, #668]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004efe:	4ba5      	ldr	r3, [pc, #660]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	49a2      	ldr	r1, [pc, #648]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f1c:	4b9d      	ldr	r3, [pc, #628]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2a:	499a      	ldr	r1, [pc, #616]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f3e:	4b95      	ldr	r3, [pc, #596]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f4c:	4991      	ldr	r1, [pc, #580]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f60:	4b8c      	ldr	r3, [pc, #560]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6e:	4989      	ldr	r1, [pc, #548]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f82:	4b84      	ldr	r3, [pc, #528]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	4980      	ldr	r1, [pc, #512]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fa4:	4b7b      	ldr	r3, [pc, #492]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f023 0203 	bic.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	4978      	ldr	r1, [pc, #480]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fc6:	4b73      	ldr	r3, [pc, #460]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fcc:	f023 020c 	bic.w	r2, r3, #12
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd4:	496f      	ldr	r1, [pc, #444]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	4967      	ldr	r1, [pc, #412]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800500a:	4b62      	ldr	r3, [pc, #392]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	495e      	ldr	r1, [pc, #376]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800502c:	4b59      	ldr	r3, [pc, #356]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	4956      	ldr	r1, [pc, #344]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800504e:	4b51      	ldr	r3, [pc, #324]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	494d      	ldr	r1, [pc, #308]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005070:	4b48      	ldr	r3, [pc, #288]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507e:	4945      	ldr	r1, [pc, #276]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005092:	4b40      	ldr	r3, [pc, #256]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a0:	493c      	ldr	r1, [pc, #240]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050b4:	4b37      	ldr	r3, [pc, #220]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c2:	4934      	ldr	r1, [pc, #208]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d011      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050d6:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e4:	492b      	ldr	r1, [pc, #172]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f4:	d101      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050f6:	2301      	movs	r3, #1
 80050f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005106:	2301      	movs	r3, #1
 8005108:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005116:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005124:	491b      	ldr	r1, [pc, #108]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005138:	4b16      	ldr	r3, [pc, #88]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005148:	4912      	ldr	r1, [pc, #72]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800515c:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516c:	4909      	ldr	r1, [pc, #36]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00f      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005186:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	e002      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800
 8005198:	4986      	ldr	r1, [pc, #536]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051ac:	4b81      	ldr	r3, [pc, #516]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051bc:	497d      	ldr	r1, [pc, #500]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d006      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80d6 	beq.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051d8:	4b76      	ldr	r3, [pc, #472]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a75      	ldr	r2, [pc, #468]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e4:	f7fd fc20 	bl	8002a28 <HAL_GetTick>
 80051e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051ec:	f7fd fc1c 	bl	8002a28 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e195      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051fe:	4b6d      	ldr	r3, [pc, #436]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d021      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11d      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800521e:	4b65      	ldr	r3, [pc, #404]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800522c:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800522e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005232:	0e1b      	lsrs	r3, r3, #24
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	019a      	lsls	r2, r3, #6
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	041b      	lsls	r3, r3, #16
 8005244:	431a      	orrs	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	4958      	ldr	r1, [pc, #352]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02e      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005284:	d129      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005286:	4b4b      	ldr	r3, [pc, #300]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528c:	0c1b      	lsrs	r3, r3, #16
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005294:	4b47      	ldr	r3, [pc, #284]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800529a:	0f1b      	lsrs	r3, r3, #28
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	019a      	lsls	r2, r3, #6
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	061b      	lsls	r3, r3, #24
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	071b      	lsls	r3, r3, #28
 80052ba:	493e      	ldr	r1, [pc, #248]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052c2:	4b3c      	ldr	r3, [pc, #240]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c8:	f023 021f 	bic.w	r2, r3, #31
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	3b01      	subs	r3, #1
 80052d2:	4938      	ldr	r1, [pc, #224]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01d      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052e6:	4b33      	ldr	r3, [pc, #204]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ec:	0e1b      	lsrs	r3, r3, #24
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052f4:	4b2f      	ldr	r3, [pc, #188]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fa:	0f1b      	lsrs	r3, r3, #28
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	019a      	lsls	r2, r3, #6
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	431a      	orrs	r2, r3
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	071b      	lsls	r3, r3, #28
 800531a:	4926      	ldr	r1, [pc, #152]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	019a      	lsls	r2, r3, #6
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	491a      	ldr	r1, [pc, #104]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005352:	4b18      	ldr	r3, [pc, #96]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800535c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535e:	f7fd fb63 	bl	8002a28 <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005366:	f7fd fb5f 	bl	8002a28 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b64      	cmp	r3, #100	; 0x64
 8005372:	d901      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e0d8      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b01      	cmp	r3, #1
 8005388:	f040 80ce 	bne.w	8005528 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005398:	f7fd fb46 	bl	8002a28 <HAL_GetTick>
 800539c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800539e:	e00b      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053a0:	f7fd fb42 	bl	8002a28 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b64      	cmp	r3, #100	; 0x64
 80053ac:	d904      	bls.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e0bb      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053b8:	4b5e      	ldr	r3, [pc, #376]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c4:	d0ec      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02e      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d12a      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053ee:	4b51      	ldr	r3, [pc, #324]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053fc:	4b4d      	ldr	r3, [pc, #308]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	0f1b      	lsrs	r3, r3, #28
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	019a      	lsls	r2, r3, #6
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	061b      	lsls	r3, r3, #24
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	4944      	ldr	r1, [pc, #272]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800542a:	4b42      	ldr	r3, [pc, #264]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800542c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005430:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	3b01      	subs	r3, #1
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	493d      	ldr	r1, [pc, #244]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d022      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005458:	d11d      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800545a:	4b36      	ldr	r3, [pc, #216]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005460:	0e1b      	lsrs	r3, r3, #24
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546e:	0f1b      	lsrs	r3, r3, #28
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	019a      	lsls	r2, r3, #6
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	431a      	orrs	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	431a      	orrs	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	071b      	lsls	r3, r3, #28
 800548e:	4929      	ldr	r1, [pc, #164]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d028      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054a2:	4b24      	ldr	r3, [pc, #144]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	0e1b      	lsrs	r3, r3, #24
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054b0:	4b20      	ldr	r3, [pc, #128]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	0c1b      	lsrs	r3, r3, #16
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	019a      	lsls	r2, r3, #6
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	431a      	orrs	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	061b      	lsls	r3, r3, #24
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	071b      	lsls	r3, r3, #28
 80054d6:	4917      	ldr	r1, [pc, #92]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	4911      	ldr	r1, [pc, #68]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054f4:	4b0f      	ldr	r3, [pc, #60]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a0e      	ldr	r2, [pc, #56]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005500:	f7fd fa92 	bl	8002a28 <HAL_GetTick>
 8005504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005506:	e008      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005508:	f7fd fa8e 	bl	8002a28 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b64      	cmp	r3, #100	; 0x64
 8005514:	d901      	bls.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e007      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005526:	d1ef      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800

08005538 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e09d      	b.n	8005686 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d108      	bne.n	8005564 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555a:	d009      	beq.n	8005570 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	61da      	str	r2, [r3, #28]
 8005562:	e005      	b.n	8005570 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fc feba 	bl	8002304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055b0:	d902      	bls.n	80055b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	e002      	b.n	80055be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055c6:	d007      	beq.n	80055d8 <HAL_SPI_Init+0xa0>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	ea42 0103 	orr.w	r1, r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	0c1b      	lsrs	r3, r3, #16
 8005634:	f003 0204 	and.w	r2, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005654:	ea42 0103 	orr.w	r1, r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005674:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b088      	sub	sp, #32
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	603b      	str	r3, [r7, #0]
 800569a:	4613      	mov	r3, r2
 800569c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_SPI_Transmit+0x22>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e158      	b.n	8005962 <HAL_SPI_Transmit+0x2d4>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056b8:	f7fd f9b6 	bl	8002a28 <HAL_GetTick>
 80056bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
 80056d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056d2:	e13d      	b.n	8005950 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_SPI_Transmit+0x52>
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056e4:	e134      	b.n	8005950 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2203      	movs	r2, #3
 80056ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005730:	d10f      	bne.n	8005752 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005740:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005750:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d007      	beq.n	8005770 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800576e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005778:	d94b      	bls.n	8005812 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <HAL_SPI_Transmit+0xfa>
 8005782:	8afb      	ldrh	r3, [r7, #22]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d13e      	bne.n	8005806 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	881a      	ldrh	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	1c9a      	adds	r2, r3, #2
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057ac:	e02b      	b.n	8005806 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d112      	bne.n	80057e2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	881a      	ldrh	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057e0:	e011      	b.n	8005806 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e2:	f7fd f921 	bl	8002a28 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d803      	bhi.n	80057fa <HAL_SPI_Transmit+0x16c>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d102      	bne.n	8005800 <HAL_SPI_Transmit+0x172>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005804:	e0a4      	b.n	8005950 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1ce      	bne.n	80057ae <HAL_SPI_Transmit+0x120>
 8005810:	e07c      	b.n	800590c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_SPI_Transmit+0x192>
 800581a:	8afb      	ldrh	r3, [r7, #22]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d170      	bne.n	8005902 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b01      	cmp	r3, #1
 8005828:	d912      	bls.n	8005850 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	881a      	ldrh	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	1c9a      	adds	r2, r3, #2
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b02      	subs	r3, #2
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800584e:	e058      	b.n	8005902 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	7812      	ldrb	r2, [r2, #0]
 800585c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005876:	e044      	b.n	8005902 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b02      	cmp	r3, #2
 8005884:	d12b      	bne.n	80058de <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d912      	bls.n	80058b6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	881a      	ldrh	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	1c9a      	adds	r2, r3, #2
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b02      	subs	r3, #2
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058b4:	e025      	b.n	8005902 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058dc:	e011      	b.n	8005902 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058de:	f7fd f8a3 	bl	8002a28 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d803      	bhi.n	80058f6 <HAL_SPI_Transmit+0x268>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d102      	bne.n	80058fc <HAL_SPI_Transmit+0x26e>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d102      	bne.n	8005902 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005900:	e026      	b.n	8005950 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1b5      	bne.n	8005878 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f945 	bl	8005ba0 <SPI_EndRxTxTransaction>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e000      	b.n	8005950 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800594e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005960:	7ffb      	ldrb	r3, [r7, #31]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800597c:	f7fd f854 	bl	8002a28 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	4413      	add	r3, r2
 800598a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800598c:	f7fd f84c 	bl	8002a28 <HAL_GetTick>
 8005990:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005992:	4b39      	ldr	r3, [pc, #228]	; (8005a78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	015b      	lsls	r3, r3, #5
 8005998:	0d1b      	lsrs	r3, r3, #20
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	fb02 f303 	mul.w	r3, r2, r3
 80059a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a2:	e054      	b.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d050      	beq.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059ac:	f7fd f83c 	bl	8002a28 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d902      	bls.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d13d      	bne.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059da:	d111      	bne.n	8005a00 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e4:	d004      	beq.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d107      	bne.n	8005a00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a08:	d10f      	bne.n	8005a2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e017      	b.n	8005a6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d19b      	bne.n	80059a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000088 	.word	0x20000088

08005a7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a8a:	f7fc ffcd 	bl	8002a28 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	4413      	add	r3, r2
 8005a98:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a9a:	f7fc ffc5 	bl	8002a28 <HAL_GetTick>
 8005a9e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005aa0:	4b3e      	ldr	r3, [pc, #248]	; (8005b9c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00da      	lsls	r2, r3, #3
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	0d1b      	lsrs	r3, r3, #20
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ab8:	e062      	b.n	8005b80 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ac0:	d109      	bne.n	8005ad6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005ad4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d050      	beq.n	8005b80 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ade:	f7fc ffa3 	bl	8002a28 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d902      	bls.n	8005af4 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d13d      	bne.n	8005b70 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0c:	d111      	bne.n	8005b32 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b16:	d004      	beq.n	8005b22 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b20:	d107      	bne.n	8005b32 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3a:	d10f      	bne.n	8005b5c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e010      	b.n	8005b92 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d194      	bne.n	8005aba <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000088 	.word	0x20000088

08005ba0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff ff5f 	bl	8005a7c <SPI_WaitFifoStateUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc8:	f043 0220 	orr.w	r2, r3, #32
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e027      	b.n	8005c24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff fec4 	bl	800596c <SPI_WaitFlagStateUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d007      	beq.n	8005bfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bee:	f043 0220 	orr.w	r2, r3, #32
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e014      	b.n	8005c24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff ff38 	bl	8005a7c <SPI_WaitFifoStateUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e000      	b.n	8005c24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e040      	b.n	8005cc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc fb9c 	bl	800238c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0201 	bic.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f8c0 	bl	8005df0 <UART_SetConfig>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e022      	b.n	8005cc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fb16 	bl	80062b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0201 	orr.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fb9d 	bl	80063f8 <UART_CheckIdleState>
 8005cbe:	4603      	mov	r3, r0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	; 0x28
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	f040 8081 	bne.w	8005de4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <HAL_UART_Transmit+0x26>
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e079      	b.n	8005de6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_UART_Transmit+0x38>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e072      	b.n	8005de6 <HAL_UART_Transmit+0x11e>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2221      	movs	r2, #33	; 0x21
 8005d14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d16:	f7fc fe87 	bl	8002a28 <HAL_GetTick>
 8005d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d34:	d108      	bne.n	8005d48 <HAL_UART_Transmit+0x80>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	e003      	b.n	8005d50 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005d58:	e02c      	b.n	8005db4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2200      	movs	r2, #0
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 fb90 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e038      	b.n	8005de6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	e007      	b.n	8005da2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	781a      	ldrb	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1cc      	bne.n	8005d5a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2140      	movs	r1, #64	; 0x40
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fb5d 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e005      	b.n	8005de6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e000      	b.n	8005de6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4ba7      	ldr	r3, [pc, #668]	; (80060b8 <UART_SetConfig+0x2c8>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	6979      	ldr	r1, [r7, #20]
 8005e24:	430b      	orrs	r3, r1
 8005e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a95      	ldr	r2, [pc, #596]	; (80060bc <UART_SetConfig+0x2cc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d120      	bne.n	8005eae <UART_SetConfig+0xbe>
 8005e6c:	4b94      	ldr	r3, [pc, #592]	; (80060c0 <UART_SetConfig+0x2d0>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d816      	bhi.n	8005ea8 <UART_SetConfig+0xb8>
 8005e7a:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <UART_SetConfig+0x90>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005e91 	.word	0x08005e91
 8005e84:	08005e9d 	.word	0x08005e9d
 8005e88:	08005e97 	.word	0x08005e97
 8005e8c:	08005ea3 	.word	0x08005ea3
 8005e90:	2301      	movs	r3, #1
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e14f      	b.n	8006136 <UART_SetConfig+0x346>
 8005e96:	2302      	movs	r3, #2
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e14c      	b.n	8006136 <UART_SetConfig+0x346>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e149      	b.n	8006136 <UART_SetConfig+0x346>
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e146      	b.n	8006136 <UART_SetConfig+0x346>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e143      	b.n	8006136 <UART_SetConfig+0x346>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a84      	ldr	r2, [pc, #528]	; (80060c4 <UART_SetConfig+0x2d4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d132      	bne.n	8005f1e <UART_SetConfig+0x12e>
 8005eb8:	4b81      	ldr	r3, [pc, #516]	; (80060c0 <UART_SetConfig+0x2d0>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	2b0c      	cmp	r3, #12
 8005ec4:	d828      	bhi.n	8005f18 <UART_SetConfig+0x128>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <UART_SetConfig+0xdc>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005f01 	.word	0x08005f01
 8005ed0:	08005f19 	.word	0x08005f19
 8005ed4:	08005f19 	.word	0x08005f19
 8005ed8:	08005f19 	.word	0x08005f19
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005f19 	.word	0x08005f19
 8005ee4:	08005f19 	.word	0x08005f19
 8005ee8:	08005f19 	.word	0x08005f19
 8005eec:	08005f07 	.word	0x08005f07
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f19 	.word	0x08005f19
 8005efc:	08005f13 	.word	0x08005f13
 8005f00:	2300      	movs	r3, #0
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e117      	b.n	8006136 <UART_SetConfig+0x346>
 8005f06:	2302      	movs	r3, #2
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e114      	b.n	8006136 <UART_SetConfig+0x346>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e111      	b.n	8006136 <UART_SetConfig+0x346>
 8005f12:	2308      	movs	r3, #8
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e10e      	b.n	8006136 <UART_SetConfig+0x346>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e10b      	b.n	8006136 <UART_SetConfig+0x346>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a69      	ldr	r2, [pc, #420]	; (80060c8 <UART_SetConfig+0x2d8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d120      	bne.n	8005f6a <UART_SetConfig+0x17a>
 8005f28:	4b65      	ldr	r3, [pc, #404]	; (80060c0 <UART_SetConfig+0x2d0>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f32:	2b30      	cmp	r3, #48	; 0x30
 8005f34:	d013      	beq.n	8005f5e <UART_SetConfig+0x16e>
 8005f36:	2b30      	cmp	r3, #48	; 0x30
 8005f38:	d814      	bhi.n	8005f64 <UART_SetConfig+0x174>
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d009      	beq.n	8005f52 <UART_SetConfig+0x162>
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d810      	bhi.n	8005f64 <UART_SetConfig+0x174>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <UART_SetConfig+0x15c>
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d006      	beq.n	8005f58 <UART_SetConfig+0x168>
 8005f4a:	e00b      	b.n	8005f64 <UART_SetConfig+0x174>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e0f1      	b.n	8006136 <UART_SetConfig+0x346>
 8005f52:	2302      	movs	r3, #2
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e0ee      	b.n	8006136 <UART_SetConfig+0x346>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e0eb      	b.n	8006136 <UART_SetConfig+0x346>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e0e8      	b.n	8006136 <UART_SetConfig+0x346>
 8005f64:	2310      	movs	r3, #16
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e0e5      	b.n	8006136 <UART_SetConfig+0x346>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a57      	ldr	r2, [pc, #348]	; (80060cc <UART_SetConfig+0x2dc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d120      	bne.n	8005fb6 <UART_SetConfig+0x1c6>
 8005f74:	4b52      	ldr	r3, [pc, #328]	; (80060c0 <UART_SetConfig+0x2d0>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f80:	d013      	beq.n	8005faa <UART_SetConfig+0x1ba>
 8005f82:	2bc0      	cmp	r3, #192	; 0xc0
 8005f84:	d814      	bhi.n	8005fb0 <UART_SetConfig+0x1c0>
 8005f86:	2b80      	cmp	r3, #128	; 0x80
 8005f88:	d009      	beq.n	8005f9e <UART_SetConfig+0x1ae>
 8005f8a:	2b80      	cmp	r3, #128	; 0x80
 8005f8c:	d810      	bhi.n	8005fb0 <UART_SetConfig+0x1c0>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <UART_SetConfig+0x1a8>
 8005f92:	2b40      	cmp	r3, #64	; 0x40
 8005f94:	d006      	beq.n	8005fa4 <UART_SetConfig+0x1b4>
 8005f96:	e00b      	b.n	8005fb0 <UART_SetConfig+0x1c0>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e0cb      	b.n	8006136 <UART_SetConfig+0x346>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	e0c8      	b.n	8006136 <UART_SetConfig+0x346>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e0c5      	b.n	8006136 <UART_SetConfig+0x346>
 8005faa:	2308      	movs	r3, #8
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e0c2      	b.n	8006136 <UART_SetConfig+0x346>
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e0bf      	b.n	8006136 <UART_SetConfig+0x346>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a45      	ldr	r2, [pc, #276]	; (80060d0 <UART_SetConfig+0x2e0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d125      	bne.n	800600c <UART_SetConfig+0x21c>
 8005fc0:	4b3f      	ldr	r3, [pc, #252]	; (80060c0 <UART_SetConfig+0x2d0>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fce:	d017      	beq.n	8006000 <UART_SetConfig+0x210>
 8005fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fd4:	d817      	bhi.n	8006006 <UART_SetConfig+0x216>
 8005fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fda:	d00b      	beq.n	8005ff4 <UART_SetConfig+0x204>
 8005fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe0:	d811      	bhi.n	8006006 <UART_SetConfig+0x216>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <UART_SetConfig+0x1fe>
 8005fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fea:	d006      	beq.n	8005ffa <UART_SetConfig+0x20a>
 8005fec:	e00b      	b.n	8006006 <UART_SetConfig+0x216>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	77fb      	strb	r3, [r7, #31]
 8005ff2:	e0a0      	b.n	8006136 <UART_SetConfig+0x346>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e09d      	b.n	8006136 <UART_SetConfig+0x346>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	77fb      	strb	r3, [r7, #31]
 8005ffe:	e09a      	b.n	8006136 <UART_SetConfig+0x346>
 8006000:	2308      	movs	r3, #8
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e097      	b.n	8006136 <UART_SetConfig+0x346>
 8006006:	2310      	movs	r3, #16
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e094      	b.n	8006136 <UART_SetConfig+0x346>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a30      	ldr	r2, [pc, #192]	; (80060d4 <UART_SetConfig+0x2e4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d125      	bne.n	8006062 <UART_SetConfig+0x272>
 8006016:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <UART_SetConfig+0x2d0>)
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006024:	d017      	beq.n	8006056 <UART_SetConfig+0x266>
 8006026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800602a:	d817      	bhi.n	800605c <UART_SetConfig+0x26c>
 800602c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006030:	d00b      	beq.n	800604a <UART_SetConfig+0x25a>
 8006032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006036:	d811      	bhi.n	800605c <UART_SetConfig+0x26c>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <UART_SetConfig+0x254>
 800603c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006040:	d006      	beq.n	8006050 <UART_SetConfig+0x260>
 8006042:	e00b      	b.n	800605c <UART_SetConfig+0x26c>
 8006044:	2301      	movs	r3, #1
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e075      	b.n	8006136 <UART_SetConfig+0x346>
 800604a:	2302      	movs	r3, #2
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e072      	b.n	8006136 <UART_SetConfig+0x346>
 8006050:	2304      	movs	r3, #4
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e06f      	b.n	8006136 <UART_SetConfig+0x346>
 8006056:	2308      	movs	r3, #8
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e06c      	b.n	8006136 <UART_SetConfig+0x346>
 800605c:	2310      	movs	r3, #16
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e069      	b.n	8006136 <UART_SetConfig+0x346>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1c      	ldr	r2, [pc, #112]	; (80060d8 <UART_SetConfig+0x2e8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d137      	bne.n	80060dc <UART_SetConfig+0x2ec>
 800606c:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <UART_SetConfig+0x2d0>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006072:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006076:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800607a:	d017      	beq.n	80060ac <UART_SetConfig+0x2bc>
 800607c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006080:	d817      	bhi.n	80060b2 <UART_SetConfig+0x2c2>
 8006082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006086:	d00b      	beq.n	80060a0 <UART_SetConfig+0x2b0>
 8006088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608c:	d811      	bhi.n	80060b2 <UART_SetConfig+0x2c2>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <UART_SetConfig+0x2aa>
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006096:	d006      	beq.n	80060a6 <UART_SetConfig+0x2b6>
 8006098:	e00b      	b.n	80060b2 <UART_SetConfig+0x2c2>
 800609a:	2300      	movs	r3, #0
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e04a      	b.n	8006136 <UART_SetConfig+0x346>
 80060a0:	2302      	movs	r3, #2
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e047      	b.n	8006136 <UART_SetConfig+0x346>
 80060a6:	2304      	movs	r3, #4
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e044      	b.n	8006136 <UART_SetConfig+0x346>
 80060ac:	2308      	movs	r3, #8
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e041      	b.n	8006136 <UART_SetConfig+0x346>
 80060b2:	2310      	movs	r3, #16
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e03e      	b.n	8006136 <UART_SetConfig+0x346>
 80060b8:	efff69f3 	.word	0xefff69f3
 80060bc:	40011000 	.word	0x40011000
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40004400 	.word	0x40004400
 80060c8:	40004800 	.word	0x40004800
 80060cc:	40004c00 	.word	0x40004c00
 80060d0:	40005000 	.word	0x40005000
 80060d4:	40011400 	.word	0x40011400
 80060d8:	40007800 	.word	0x40007800
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a71      	ldr	r2, [pc, #452]	; (80062a8 <UART_SetConfig+0x4b8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d125      	bne.n	8006132 <UART_SetConfig+0x342>
 80060e6:	4b71      	ldr	r3, [pc, #452]	; (80062ac <UART_SetConfig+0x4bc>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060f4:	d017      	beq.n	8006126 <UART_SetConfig+0x336>
 80060f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060fa:	d817      	bhi.n	800612c <UART_SetConfig+0x33c>
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006100:	d00b      	beq.n	800611a <UART_SetConfig+0x32a>
 8006102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006106:	d811      	bhi.n	800612c <UART_SetConfig+0x33c>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <UART_SetConfig+0x324>
 800610c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006110:	d006      	beq.n	8006120 <UART_SetConfig+0x330>
 8006112:	e00b      	b.n	800612c <UART_SetConfig+0x33c>
 8006114:	2300      	movs	r3, #0
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e00d      	b.n	8006136 <UART_SetConfig+0x346>
 800611a:	2302      	movs	r3, #2
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e00a      	b.n	8006136 <UART_SetConfig+0x346>
 8006120:	2304      	movs	r3, #4
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e007      	b.n	8006136 <UART_SetConfig+0x346>
 8006126:	2308      	movs	r3, #8
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e004      	b.n	8006136 <UART_SetConfig+0x346>
 800612c:	2310      	movs	r3, #16
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e001      	b.n	8006136 <UART_SetConfig+0x346>
 8006132:	2310      	movs	r3, #16
 8006134:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800613e:	d15b      	bne.n	80061f8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006140:	7ffb      	ldrb	r3, [r7, #31]
 8006142:	2b08      	cmp	r3, #8
 8006144:	d827      	bhi.n	8006196 <UART_SetConfig+0x3a6>
 8006146:	a201      	add	r2, pc, #4	; (adr r2, 800614c <UART_SetConfig+0x35c>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	08006171 	.word	0x08006171
 8006150:	08006179 	.word	0x08006179
 8006154:	08006181 	.word	0x08006181
 8006158:	08006197 	.word	0x08006197
 800615c:	08006187 	.word	0x08006187
 8006160:	08006197 	.word	0x08006197
 8006164:	08006197 	.word	0x08006197
 8006168:	08006197 	.word	0x08006197
 800616c:	0800618f 	.word	0x0800618f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006170:	f7fe fd92 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 8006174:	61b8      	str	r0, [r7, #24]
        break;
 8006176:	e013      	b.n	80061a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006178:	f7fe fda2 	bl	8004cc0 <HAL_RCC_GetPCLK2Freq>
 800617c:	61b8      	str	r0, [r7, #24]
        break;
 800617e:	e00f      	b.n	80061a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006180:	4b4b      	ldr	r3, [pc, #300]	; (80062b0 <UART_SetConfig+0x4c0>)
 8006182:	61bb      	str	r3, [r7, #24]
        break;
 8006184:	e00c      	b.n	80061a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006186:	f7fe fc99 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 800618a:	61b8      	str	r0, [r7, #24]
        break;
 800618c:	e008      	b.n	80061a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800618e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006192:	61bb      	str	r3, [r7, #24]
        break;
 8006194:	e004      	b.n	80061a0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	77bb      	strb	r3, [r7, #30]
        break;
 800619e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d074      	beq.n	8006290 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	005a      	lsls	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	441a      	add	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b0f      	cmp	r3, #15
 80061c2:	d916      	bls.n	80061f2 <UART_SetConfig+0x402>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ca:	d212      	bcs.n	80061f2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f023 030f 	bic.w	r3, r3, #15
 80061d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	89fb      	ldrh	r3, [r7, #14]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	89fa      	ldrh	r2, [r7, #14]
 80061ee:	60da      	str	r2, [r3, #12]
 80061f0:	e04e      	b.n	8006290 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	77bb      	strb	r3, [r7, #30]
 80061f6:	e04b      	b.n	8006290 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061f8:	7ffb      	ldrb	r3, [r7, #31]
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d827      	bhi.n	800624e <UART_SetConfig+0x45e>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <UART_SetConfig+0x414>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006229 	.word	0x08006229
 8006208:	08006231 	.word	0x08006231
 800620c:	08006239 	.word	0x08006239
 8006210:	0800624f 	.word	0x0800624f
 8006214:	0800623f 	.word	0x0800623f
 8006218:	0800624f 	.word	0x0800624f
 800621c:	0800624f 	.word	0x0800624f
 8006220:	0800624f 	.word	0x0800624f
 8006224:	08006247 	.word	0x08006247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006228:	f7fe fd36 	bl	8004c98 <HAL_RCC_GetPCLK1Freq>
 800622c:	61b8      	str	r0, [r7, #24]
        break;
 800622e:	e013      	b.n	8006258 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7fe fd46 	bl	8004cc0 <HAL_RCC_GetPCLK2Freq>
 8006234:	61b8      	str	r0, [r7, #24]
        break;
 8006236:	e00f      	b.n	8006258 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <UART_SetConfig+0x4c0>)
 800623a:	61bb      	str	r3, [r7, #24]
        break;
 800623c:	e00c      	b.n	8006258 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800623e:	f7fe fc3d 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8006242:	61b8      	str	r0, [r7, #24]
        break;
 8006244:	e008      	b.n	8006258 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624a:	61bb      	str	r3, [r7, #24]
        break;
 800624c:	e004      	b.n	8006258 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	77bb      	strb	r3, [r7, #30]
        break;
 8006256:	bf00      	nop
    }

    if (pclk != 0U)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d018      	beq.n	8006290 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	085a      	lsrs	r2, r3, #1
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	441a      	add	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006270:	b29b      	uxth	r3, r3
 8006272:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b0f      	cmp	r3, #15
 8006278:	d908      	bls.n	800628c <UART_SetConfig+0x49c>
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	d204      	bcs.n	800628c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	60da      	str	r2, [r3, #12]
 800628a:	e001      	b.n	8006290 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800629c:	7fbb      	ldrb	r3, [r7, #30]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40007c00 	.word	0x40007c00
 80062ac:	40023800 	.word	0x40023800
 80062b0:	00f42400 	.word	0x00f42400

080062b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01a      	beq.n	80063ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b2:	d10a      	bne.n	80063ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  }
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006408:	f7fc fb0e 	bl	8002a28 <HAL_GetTick>
 800640c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b08      	cmp	r3, #8
 800641a:	d10e      	bne.n	800643a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f82d 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e023      	b.n	8006482 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b04      	cmp	r3, #4
 8006446:	d10e      	bne.n	8006466 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f817 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e00d      	b.n	8006482 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	4613      	mov	r3, r2
 8006498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649a:	e05e      	b.n	800655a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d05a      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a4:	f7fc fac0 	bl	8002a28 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d302      	bcc.n	80064ba <UART_WaitOnFlagUntilTimeout+0x30>
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d11b      	bne.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0201 	bic.w	r2, r2, #1
 80064d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e043      	b.n	800657a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d02c      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650e:	d124      	bne.n	800655a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006518:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006528:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2220      	movs	r2, #32
 800653e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e00f      	b.n	800657a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4013      	ands	r3, r2
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	429a      	cmp	r2, r3
 8006568:	bf0c      	ite	eq
 800656a:	2301      	moveq	r3, #1
 800656c:	2300      	movne	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	429a      	cmp	r2, r3
 8006576:	d091      	beq.n	800649c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006584:	b084      	sub	sp, #16
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	f107 001c 	add.w	r0, r7, #28
 8006592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	2b01      	cmp	r3, #1
 800659a:	d120      	bne.n	80065de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	4b20      	ldr	r3, [pc, #128]	; (8006630 <USB_CoreInit+0xac>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d105      	bne.n	80065d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa5a 	bl	8006a8c <USB_CoreReset>
 80065d8:	4603      	mov	r3, r0
 80065da:	73fb      	strb	r3, [r7, #15]
 80065dc:	e010      	b.n	8006600 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa4e 	bl	8006a8c <USB_CoreReset>
 80065f0:	4603      	mov	r3, r0
 80065f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10b      	bne.n	800661e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f043 0206 	orr.w	r2, r3, #6
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f043 0220 	orr.w	r2, r3, #32
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800662a:	b004      	add	sp, #16
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	ffbdffbf 	.word	0xffbdffbf

08006634 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f023 0201 	bic.w	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d106      	bne.n	8006682 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60da      	str	r2, [r3, #12]
 8006680:	e00b      	b.n	800669a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	e001      	b.n	800669a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e003      	b.n	80066a2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800669a:	2032      	movs	r0, #50	; 0x32
 800669c:	f7fc f9d0 	bl	8002a40 <HAL_Delay>

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066ac:	b084      	sub	sp, #16
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066c6:	2300      	movs	r3, #0
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	e009      	b.n	80066e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	3340      	adds	r3, #64	; 0x40
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	2200      	movs	r2, #0
 80066d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	3301      	adds	r3, #1
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b0e      	cmp	r3, #14
 80066e4:	d9f2      	bls.n	80066cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d11c      	bne.n	8006726 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066fa:	f043 0302 	orr.w	r3, r3, #2
 80066fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e005      	b.n	8006732 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006738:	461a      	mov	r2, r3
 800673a:	2300      	movs	r3, #0
 800673c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006744:	4619      	mov	r1, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674c:	461a      	mov	r2, r3
 800674e:	680b      	ldr	r3, [r1, #0]
 8006750:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	2b01      	cmp	r3, #1
 8006756:	d10c      	bne.n	8006772 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800675e:	2100      	movs	r1, #0
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f959 	bl	8006a18 <USB_SetDevSpeed>
 8006766:	e018      	b.n	800679a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006768:	2101      	movs	r1, #1
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f954 	bl	8006a18 <USB_SetDevSpeed>
 8006770:	e013      	b.n	800679a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	2b03      	cmp	r3, #3
 8006776:	d10c      	bne.n	8006792 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800677e:	2100      	movs	r1, #0
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f949 	bl	8006a18 <USB_SetDevSpeed>
 8006786:	e008      	b.n	800679a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006788:	2101      	movs	r1, #1
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f944 	bl	8006a18 <USB_SetDevSpeed>
 8006790:	e003      	b.n	800679a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006792:	2103      	movs	r1, #3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f93f 	bl	8006a18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800679a:	2110      	movs	r1, #16
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f8f3 	bl	8006988 <USB_FlushTxFifo>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f911 	bl	80069d4 <USB_FlushRxFifo>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c2:	461a      	mov	r2, r3
 80067c4:	2300      	movs	r3, #0
 80067c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ce:	461a      	mov	r2, r3
 80067d0:	2300      	movs	r3, #0
 80067d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	461a      	mov	r2, r3
 80067dc:	2300      	movs	r3, #0
 80067de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	e043      	b.n	800686e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067fc:	d118      	bne.n	8006830 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006810:	461a      	mov	r2, r3
 8006812:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	e013      	b.n	8006842 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006826:	461a      	mov	r2, r3
 8006828:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e008      	b.n	8006842 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	461a      	mov	r2, r3
 800683e:	2300      	movs	r3, #0
 8006840:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684e:	461a      	mov	r2, r3
 8006850:	2300      	movs	r3, #0
 8006852:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	461a      	mov	r2, r3
 8006862:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006866:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	3301      	adds	r3, #1
 800686c:	613b      	str	r3, [r7, #16]
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	429a      	cmp	r2, r3
 8006874:	d3b7      	bcc.n	80067e6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006876:	2300      	movs	r3, #0
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	e043      	b.n	8006904 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800688e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006892:	d118      	bne.n	80068c6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a6:	461a      	mov	r2, r3
 80068a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	e013      	b.n	80068d8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068bc:	461a      	mov	r2, r3
 80068be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	e008      	b.n	80068d8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	461a      	mov	r2, r3
 80068d4:	2300      	movs	r3, #0
 80068d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	461a      	mov	r2, r3
 80068e6:	2300      	movs	r3, #0
 80068e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f6:	461a      	mov	r2, r3
 80068f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	3301      	adds	r3, #1
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	429a      	cmp	r2, r3
 800690a:	d3b7      	bcc.n	800687c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800691a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800691e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800692c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	2b00      	cmp	r3, #0
 8006932:	d105      	bne.n	8006940 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	f043 0210 	orr.w	r2, r3, #16
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	4b0e      	ldr	r3, [pc, #56]	; (8006980 <USB_DevInit+0x2d4>)
 8006946:	4313      	orrs	r3, r2
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800694c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694e:	2b00      	cmp	r3, #0
 8006950:	d005      	beq.n	800695e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f043 0208 	orr.w	r2, r3, #8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800695e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006960:	2b01      	cmp	r3, #1
 8006962:	d105      	bne.n	8006970 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	4b06      	ldr	r3, [pc, #24]	; (8006984 <USB_DevInit+0x2d8>)
 800696a:	4313      	orrs	r3, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800697c:	b004      	add	sp, #16
 800697e:	4770      	bx	lr
 8006980:	803c3800 	.word	0x803c3800
 8006984:	40000004 	.word	0x40000004

08006988 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	019b      	lsls	r3, r3, #6
 800699a:	f043 0220 	orr.w	r2, r3, #32
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3301      	adds	r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <USB_FlushTxFifo+0x48>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d901      	bls.n	80069b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e006      	b.n	80069c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d0f0      	beq.n	80069a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	00030d40 	.word	0x00030d40

080069d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2210      	movs	r2, #16
 80069e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <USB_FlushRxFifo+0x40>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d901      	bls.n	80069f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e006      	b.n	8006a06 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d0f0      	beq.n	80069e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	00030d40 	.word	0x00030d40

08006a18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a64:	f023 0303 	bic.w	r3, r3, #3
 8006a68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a78:	f043 0302 	orr.w	r3, r3, #2
 8006a7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a13      	ldr	r2, [pc, #76]	; (8006af0 <USB_CoreReset+0x64>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e01b      	b.n	8006ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	daf2      	bge.n	8006a98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f043 0201 	orr.w	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <USB_CoreReset+0x64>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d901      	bls.n	8006ad4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e006      	b.n	8006ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d0f0      	beq.n	8006ac2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	00030d40 	.word	0x00030d40

08006af4 <__errno>:
 8006af4:	4b01      	ldr	r3, [pc, #4]	; (8006afc <__errno+0x8>)
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000094 	.word	0x20000094

08006b00 <__libc_init_array>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	4d0d      	ldr	r5, [pc, #52]	; (8006b38 <__libc_init_array+0x38>)
 8006b04:	4c0d      	ldr	r4, [pc, #52]	; (8006b3c <__libc_init_array+0x3c>)
 8006b06:	1b64      	subs	r4, r4, r5
 8006b08:	10a4      	asrs	r4, r4, #2
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	42a6      	cmp	r6, r4
 8006b0e:	d109      	bne.n	8006b24 <__libc_init_array+0x24>
 8006b10:	4d0b      	ldr	r5, [pc, #44]	; (8006b40 <__libc_init_array+0x40>)
 8006b12:	4c0c      	ldr	r4, [pc, #48]	; (8006b44 <__libc_init_array+0x44>)
 8006b14:	f002 fe24 	bl	8009760 <_init>
 8006b18:	1b64      	subs	r4, r4, r5
 8006b1a:	10a4      	asrs	r4, r4, #2
 8006b1c:	2600      	movs	r6, #0
 8006b1e:	42a6      	cmp	r6, r4
 8006b20:	d105      	bne.n	8006b2e <__libc_init_array+0x2e>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b28:	4798      	blx	r3
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7ee      	b.n	8006b0c <__libc_init_array+0xc>
 8006b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b32:	4798      	blx	r3
 8006b34:	3601      	adds	r6, #1
 8006b36:	e7f2      	b.n	8006b1e <__libc_init_array+0x1e>
 8006b38:	0801bbdc 	.word	0x0801bbdc
 8006b3c:	0801bbdc 	.word	0x0801bbdc
 8006b40:	0801bbdc 	.word	0x0801bbdc
 8006b44:	0801bbe0 	.word	0x0801bbe0

08006b48 <memset>:
 8006b48:	4402      	add	r2, r0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d100      	bne.n	8006b52 <memset+0xa>
 8006b50:	4770      	bx	lr
 8006b52:	f803 1b01 	strb.w	r1, [r3], #1
 8006b56:	e7f9      	b.n	8006b4c <memset+0x4>

08006b58 <__cvt>:
 8006b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5a:	ed2d 8b02 	vpush	{d8}
 8006b5e:	eeb0 8b40 	vmov.f64	d8, d0
 8006b62:	b085      	sub	sp, #20
 8006b64:	4617      	mov	r7, r2
 8006b66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006b68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b6a:	ee18 2a90 	vmov	r2, s17
 8006b6e:	f025 0520 	bic.w	r5, r5, #32
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	bfb6      	itet	lt
 8006b76:	222d      	movlt	r2, #45	; 0x2d
 8006b78:	2200      	movge	r2, #0
 8006b7a:	eeb1 8b40 	vneglt.f64	d8, d0
 8006b7e:	2d46      	cmp	r5, #70	; 0x46
 8006b80:	460c      	mov	r4, r1
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	d004      	beq.n	8006b90 <__cvt+0x38>
 8006b86:	2d45      	cmp	r5, #69	; 0x45
 8006b88:	d100      	bne.n	8006b8c <__cvt+0x34>
 8006b8a:	3401      	adds	r4, #1
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	e000      	b.n	8006b92 <__cvt+0x3a>
 8006b90:	2103      	movs	r1, #3
 8006b92:	ab03      	add	r3, sp, #12
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	ab02      	add	r3, sp, #8
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4633      	mov	r3, r6
 8006b9e:	eeb0 0b48 	vmov.f64	d0, d8
 8006ba2:	f000 fcc9 	bl	8007538 <_dtoa_r>
 8006ba6:	2d47      	cmp	r5, #71	; 0x47
 8006ba8:	d109      	bne.n	8006bbe <__cvt+0x66>
 8006baa:	07fb      	lsls	r3, r7, #31
 8006bac:	d407      	bmi.n	8006bbe <__cvt+0x66>
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bb2:	1a1b      	subs	r3, r3, r0
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	b005      	add	sp, #20
 8006bb8:	ecbd 8b02 	vpop	{d8}
 8006bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bbe:	2d46      	cmp	r5, #70	; 0x46
 8006bc0:	eb00 0204 	add.w	r2, r0, r4
 8006bc4:	d10c      	bne.n	8006be0 <__cvt+0x88>
 8006bc6:	7803      	ldrb	r3, [r0, #0]
 8006bc8:	2b30      	cmp	r3, #48	; 0x30
 8006bca:	d107      	bne.n	8006bdc <__cvt+0x84>
 8006bcc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd4:	bf1c      	itt	ne
 8006bd6:	f1c4 0401 	rsbne	r4, r4, #1
 8006bda:	6034      	strne	r4, [r6, #0]
 8006bdc:	6833      	ldr	r3, [r6, #0]
 8006bde:	441a      	add	r2, r3
 8006be0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be8:	bf08      	it	eq
 8006bea:	9203      	streq	r2, [sp, #12]
 8006bec:	2130      	movs	r1, #48	; 0x30
 8006bee:	9b03      	ldr	r3, [sp, #12]
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d2dc      	bcs.n	8006bae <__cvt+0x56>
 8006bf4:	1c5c      	adds	r4, r3, #1
 8006bf6:	9403      	str	r4, [sp, #12]
 8006bf8:	7019      	strb	r1, [r3, #0]
 8006bfa:	e7f8      	b.n	8006bee <__cvt+0x96>

08006bfc <__exponent>:
 8006bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2900      	cmp	r1, #0
 8006c02:	bfb8      	it	lt
 8006c04:	4249      	neglt	r1, r1
 8006c06:	f803 2b02 	strb.w	r2, [r3], #2
 8006c0a:	bfb4      	ite	lt
 8006c0c:	222d      	movlt	r2, #45	; 0x2d
 8006c0e:	222b      	movge	r2, #43	; 0x2b
 8006c10:	2909      	cmp	r1, #9
 8006c12:	7042      	strb	r2, [r0, #1]
 8006c14:	dd2a      	ble.n	8006c6c <__exponent+0x70>
 8006c16:	f10d 0407 	add.w	r4, sp, #7
 8006c1a:	46a4      	mov	ip, r4
 8006c1c:	270a      	movs	r7, #10
 8006c1e:	46a6      	mov	lr, r4
 8006c20:	460a      	mov	r2, r1
 8006c22:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c26:	fb07 1516 	mls	r5, r7, r6, r1
 8006c2a:	3530      	adds	r5, #48	; 0x30
 8006c2c:	2a63      	cmp	r2, #99	; 0x63
 8006c2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c36:	4631      	mov	r1, r6
 8006c38:	dcf1      	bgt.n	8006c1e <__exponent+0x22>
 8006c3a:	3130      	adds	r1, #48	; 0x30
 8006c3c:	f1ae 0502 	sub.w	r5, lr, #2
 8006c40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c44:	1c44      	adds	r4, r0, #1
 8006c46:	4629      	mov	r1, r5
 8006c48:	4561      	cmp	r1, ip
 8006c4a:	d30a      	bcc.n	8006c62 <__exponent+0x66>
 8006c4c:	f10d 0209 	add.w	r2, sp, #9
 8006c50:	eba2 020e 	sub.w	r2, r2, lr
 8006c54:	4565      	cmp	r5, ip
 8006c56:	bf88      	it	hi
 8006c58:	2200      	movhi	r2, #0
 8006c5a:	4413      	add	r3, r2
 8006c5c:	1a18      	subs	r0, r3, r0
 8006c5e:	b003      	add	sp, #12
 8006c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c6a:	e7ed      	b.n	8006c48 <__exponent+0x4c>
 8006c6c:	2330      	movs	r3, #48	; 0x30
 8006c6e:	3130      	adds	r1, #48	; 0x30
 8006c70:	7083      	strb	r3, [r0, #2]
 8006c72:	70c1      	strb	r1, [r0, #3]
 8006c74:	1d03      	adds	r3, r0, #4
 8006c76:	e7f1      	b.n	8006c5c <__exponent+0x60>

08006c78 <_printf_float>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	b08b      	sub	sp, #44	; 0x2c
 8006c7e:	460c      	mov	r4, r1
 8006c80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006c84:	4616      	mov	r6, r2
 8006c86:	461f      	mov	r7, r3
 8006c88:	4605      	mov	r5, r0
 8006c8a:	f001 f9d7 	bl	800803c <_localeconv_r>
 8006c8e:	f8d0 b000 	ldr.w	fp, [r0]
 8006c92:	4658      	mov	r0, fp
 8006c94:	f7f9 fad4 	bl	8000240 <strlen>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9308      	str	r3, [sp, #32]
 8006c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ca4:	6822      	ldr	r2, [r4, #0]
 8006ca6:	3307      	adds	r3, #7
 8006ca8:	f023 0307 	bic.w	r3, r3, #7
 8006cac:	f103 0108 	add.w	r1, r3, #8
 8006cb0:	f8c8 1000 	str.w	r1, [r8]
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006cbe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006f20 <_printf_float+0x2a8>
 8006cc2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006cc6:	eeb0 6bc0 	vabs.f64	d6, d0
 8006cca:	eeb4 6b47 	vcmp.f64	d6, d7
 8006cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd2:	dd24      	ble.n	8006d1e <_printf_float+0xa6>
 8006cd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cdc:	d502      	bpl.n	8006ce4 <_printf_float+0x6c>
 8006cde:	232d      	movs	r3, #45	; 0x2d
 8006ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce4:	4b90      	ldr	r3, [pc, #576]	; (8006f28 <_printf_float+0x2b0>)
 8006ce6:	4891      	ldr	r0, [pc, #580]	; (8006f2c <_printf_float+0x2b4>)
 8006ce8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006cec:	bf94      	ite	ls
 8006cee:	4698      	movls	r8, r3
 8006cf0:	4680      	movhi	r8, r0
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	f022 0204 	bic.w	r2, r2, #4
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6022      	str	r2, [r4, #0]
 8006cfe:	9304      	str	r3, [sp, #16]
 8006d00:	9700      	str	r7, [sp, #0]
 8006d02:	4633      	mov	r3, r6
 8006d04:	aa09      	add	r2, sp, #36	; 0x24
 8006d06:	4621      	mov	r1, r4
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f000 f9d3 	bl	80070b4 <_printf_common>
 8006d0e:	3001      	adds	r0, #1
 8006d10:	f040 808a 	bne.w	8006e28 <_printf_float+0x1b0>
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295
 8006d18:	b00b      	add	sp, #44	; 0x2c
 8006d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d26:	d709      	bvc.n	8006d3c <_printf_float+0xc4>
 8006d28:	ee10 3a90 	vmov	r3, s1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bfbc      	itt	lt
 8006d30:	232d      	movlt	r3, #45	; 0x2d
 8006d32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d36:	487e      	ldr	r0, [pc, #504]	; (8006f30 <_printf_float+0x2b8>)
 8006d38:	4b7e      	ldr	r3, [pc, #504]	; (8006f34 <_printf_float+0x2bc>)
 8006d3a:	e7d5      	b.n	8006ce8 <_printf_float+0x70>
 8006d3c:	6863      	ldr	r3, [r4, #4]
 8006d3e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d42:	9104      	str	r1, [sp, #16]
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	d13c      	bne.n	8006dc2 <_printf_float+0x14a>
 8006d48:	2306      	movs	r3, #6
 8006d4a:	6063      	str	r3, [r4, #4]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9303      	str	r3, [sp, #12]
 8006d50:	ab08      	add	r3, sp, #32
 8006d52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006d56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d5a:	ab07      	add	r3, sp, #28
 8006d5c:	6861      	ldr	r1, [r4, #4]
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	6022      	str	r2, [r4, #0]
 8006d62:	f10d 031b 	add.w	r3, sp, #27
 8006d66:	4628      	mov	r0, r5
 8006d68:	f7ff fef6 	bl	8006b58 <__cvt>
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	9907      	ldr	r1, [sp, #28]
 8006d70:	2b47      	cmp	r3, #71	; 0x47
 8006d72:	4680      	mov	r8, r0
 8006d74:	d108      	bne.n	8006d88 <_printf_float+0x110>
 8006d76:	1cc8      	adds	r0, r1, #3
 8006d78:	db02      	blt.n	8006d80 <_printf_float+0x108>
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	dd41      	ble.n	8006e04 <_printf_float+0x18c>
 8006d80:	f1a9 0902 	sub.w	r9, r9, #2
 8006d84:	fa5f f989 	uxtb.w	r9, r9
 8006d88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d8c:	d820      	bhi.n	8006dd0 <_printf_float+0x158>
 8006d8e:	3901      	subs	r1, #1
 8006d90:	464a      	mov	r2, r9
 8006d92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d96:	9107      	str	r1, [sp, #28]
 8006d98:	f7ff ff30 	bl	8006bfc <__exponent>
 8006d9c:	9a08      	ldr	r2, [sp, #32]
 8006d9e:	9004      	str	r0, [sp, #16]
 8006da0:	1813      	adds	r3, r2, r0
 8006da2:	2a01      	cmp	r2, #1
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	dc02      	bgt.n	8006dae <_printf_float+0x136>
 8006da8:	6822      	ldr	r2, [r4, #0]
 8006daa:	07d2      	lsls	r2, r2, #31
 8006dac:	d501      	bpl.n	8006db2 <_printf_float+0x13a>
 8006dae:	3301      	adds	r3, #1
 8006db0:	6123      	str	r3, [r4, #16]
 8006db2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0a2      	beq.n	8006d00 <_printf_float+0x88>
 8006dba:	232d      	movs	r3, #45	; 0x2d
 8006dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc0:	e79e      	b.n	8006d00 <_printf_float+0x88>
 8006dc2:	9904      	ldr	r1, [sp, #16]
 8006dc4:	2947      	cmp	r1, #71	; 0x47
 8006dc6:	d1c1      	bne.n	8006d4c <_printf_float+0xd4>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1bf      	bne.n	8006d4c <_printf_float+0xd4>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e7bc      	b.n	8006d4a <_printf_float+0xd2>
 8006dd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006dd4:	d118      	bne.n	8006e08 <_printf_float+0x190>
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	6863      	ldr	r3, [r4, #4]
 8006dda:	dd0b      	ble.n	8006df4 <_printf_float+0x17c>
 8006ddc:	6121      	str	r1, [r4, #16]
 8006dde:	b913      	cbnz	r3, 8006de6 <_printf_float+0x16e>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	07d0      	lsls	r0, r2, #31
 8006de4:	d502      	bpl.n	8006dec <_printf_float+0x174>
 8006de6:	3301      	adds	r3, #1
 8006de8:	440b      	add	r3, r1
 8006dea:	6123      	str	r3, [r4, #16]
 8006dec:	2300      	movs	r3, #0
 8006dee:	65a1      	str	r1, [r4, #88]	; 0x58
 8006df0:	9304      	str	r3, [sp, #16]
 8006df2:	e7de      	b.n	8006db2 <_printf_float+0x13a>
 8006df4:	b913      	cbnz	r3, 8006dfc <_printf_float+0x184>
 8006df6:	6822      	ldr	r2, [r4, #0]
 8006df8:	07d2      	lsls	r2, r2, #31
 8006dfa:	d501      	bpl.n	8006e00 <_printf_float+0x188>
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	e7f4      	b.n	8006dea <_printf_float+0x172>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e7f2      	b.n	8006dea <_printf_float+0x172>
 8006e04:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e08:	9b08      	ldr	r3, [sp, #32]
 8006e0a:	4299      	cmp	r1, r3
 8006e0c:	db05      	blt.n	8006e1a <_printf_float+0x1a2>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	6121      	str	r1, [r4, #16]
 8006e12:	07d8      	lsls	r0, r3, #31
 8006e14:	d5ea      	bpl.n	8006dec <_printf_float+0x174>
 8006e16:	1c4b      	adds	r3, r1, #1
 8006e18:	e7e7      	b.n	8006dea <_printf_float+0x172>
 8006e1a:	2900      	cmp	r1, #0
 8006e1c:	bfd4      	ite	le
 8006e1e:	f1c1 0202 	rsble	r2, r1, #2
 8006e22:	2201      	movgt	r2, #1
 8006e24:	4413      	add	r3, r2
 8006e26:	e7e0      	b.n	8006dea <_printf_float+0x172>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	055a      	lsls	r2, r3, #21
 8006e2c:	d407      	bmi.n	8006e3e <_printf_float+0x1c6>
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	4642      	mov	r2, r8
 8006e32:	4631      	mov	r1, r6
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d12a      	bne.n	8006e92 <_printf_float+0x21a>
 8006e3c:	e76a      	b.n	8006d14 <_printf_float+0x9c>
 8006e3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e42:	f240 80e2 	bls.w	800700a <_printf_float+0x392>
 8006e46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006e4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e52:	d133      	bne.n	8006ebc <_printf_float+0x244>
 8006e54:	4a38      	ldr	r2, [pc, #224]	; (8006f38 <_printf_float+0x2c0>)
 8006e56:	2301      	movs	r3, #1
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b8      	blx	r7
 8006e5e:	3001      	adds	r0, #1
 8006e60:	f43f af58 	beq.w	8006d14 <_printf_float+0x9c>
 8006e64:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	db02      	blt.n	8006e72 <_printf_float+0x1fa>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	07d8      	lsls	r0, r3, #31
 8006e70:	d50f      	bpl.n	8006e92 <_printf_float+0x21a>
 8006e72:	4653      	mov	r3, sl
 8006e74:	465a      	mov	r2, fp
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f af49 	beq.w	8006d14 <_printf_float+0x9c>
 8006e82:	f04f 0800 	mov.w	r8, #0
 8006e86:	f104 091a 	add.w	r9, r4, #26
 8006e8a:	9b08      	ldr	r3, [sp, #32]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	4543      	cmp	r3, r8
 8006e90:	dc09      	bgt.n	8006ea6 <_printf_float+0x22e>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	079b      	lsls	r3, r3, #30
 8006e96:	f100 8108 	bmi.w	80070aa <_printf_float+0x432>
 8006e9a:	68e0      	ldr	r0, [r4, #12]
 8006e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	bfb8      	it	lt
 8006ea2:	4618      	movlt	r0, r3
 8006ea4:	e738      	b.n	8006d18 <_printf_float+0xa0>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	464a      	mov	r2, r9
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f af2f 	beq.w	8006d14 <_printf_float+0x9c>
 8006eb6:	f108 0801 	add.w	r8, r8, #1
 8006eba:	e7e6      	b.n	8006e8a <_printf_float+0x212>
 8006ebc:	9b07      	ldr	r3, [sp, #28]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dc3c      	bgt.n	8006f3c <_printf_float+0x2c4>
 8006ec2:	4a1d      	ldr	r2, [pc, #116]	; (8006f38 <_printf_float+0x2c0>)
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f43f af21 	beq.w	8006d14 <_printf_float+0x9c>
 8006ed2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	d102      	bne.n	8006ee0 <_printf_float+0x268>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	07d9      	lsls	r1, r3, #31
 8006ede:	d5d8      	bpl.n	8006e92 <_printf_float+0x21a>
 8006ee0:	4653      	mov	r3, sl
 8006ee2:	465a      	mov	r2, fp
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47b8      	blx	r7
 8006eea:	3001      	adds	r0, #1
 8006eec:	f43f af12 	beq.w	8006d14 <_printf_float+0x9c>
 8006ef0:	f04f 0900 	mov.w	r9, #0
 8006ef4:	f104 0a1a 	add.w	sl, r4, #26
 8006ef8:	9b07      	ldr	r3, [sp, #28]
 8006efa:	425b      	negs	r3, r3
 8006efc:	454b      	cmp	r3, r9
 8006efe:	dc01      	bgt.n	8006f04 <_printf_float+0x28c>
 8006f00:	9b08      	ldr	r3, [sp, #32]
 8006f02:	e795      	b.n	8006e30 <_printf_float+0x1b8>
 8006f04:	2301      	movs	r3, #1
 8006f06:	4652      	mov	r2, sl
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	f43f af00 	beq.w	8006d14 <_printf_float+0x9c>
 8006f14:	f109 0901 	add.w	r9, r9, #1
 8006f18:	e7ee      	b.n	8006ef8 <_printf_float+0x280>
 8006f1a:	bf00      	nop
 8006f1c:	f3af 8000 	nop.w
 8006f20:	ffffffff 	.word	0xffffffff
 8006f24:	7fefffff 	.word	0x7fefffff
 8006f28:	0801b7f4 	.word	0x0801b7f4
 8006f2c:	0801b7f8 	.word	0x0801b7f8
 8006f30:	0801b800 	.word	0x0801b800
 8006f34:	0801b7fc 	.word	0x0801b7fc
 8006f38:	0801b804 	.word	0x0801b804
 8006f3c:	9a08      	ldr	r2, [sp, #32]
 8006f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f40:	429a      	cmp	r2, r3
 8006f42:	bfa8      	it	ge
 8006f44:	461a      	movge	r2, r3
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	4691      	mov	r9, r2
 8006f4a:	dc38      	bgt.n	8006fbe <_printf_float+0x346>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f54:	f104 021a 	add.w	r2, r4, #26
 8006f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f5a:	9905      	ldr	r1, [sp, #20]
 8006f5c:	9304      	str	r3, [sp, #16]
 8006f5e:	eba3 0309 	sub.w	r3, r3, r9
 8006f62:	428b      	cmp	r3, r1
 8006f64:	dc33      	bgt.n	8006fce <_printf_float+0x356>
 8006f66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	db3c      	blt.n	8006fe8 <_printf_float+0x370>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	07da      	lsls	r2, r3, #31
 8006f72:	d439      	bmi.n	8006fe8 <_printf_float+0x370>
 8006f74:	9a08      	ldr	r2, [sp, #32]
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	9907      	ldr	r1, [sp, #28]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	eba2 0901 	sub.w	r9, r2, r1
 8006f80:	4599      	cmp	r9, r3
 8006f82:	bfa8      	it	ge
 8006f84:	4699      	movge	r9, r3
 8006f86:	f1b9 0f00 	cmp.w	r9, #0
 8006f8a:	dc35      	bgt.n	8006ff8 <_printf_float+0x380>
 8006f8c:	f04f 0800 	mov.w	r8, #0
 8006f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f94:	f104 0a1a 	add.w	sl, r4, #26
 8006f98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	eba3 0309 	sub.w	r3, r3, r9
 8006fa2:	4543      	cmp	r3, r8
 8006fa4:	f77f af75 	ble.w	8006e92 <_printf_float+0x21a>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4652      	mov	r2, sl
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	47b8      	blx	r7
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f43f aeae 	beq.w	8006d14 <_printf_float+0x9c>
 8006fb8:	f108 0801 	add.w	r8, r8, #1
 8006fbc:	e7ec      	b.n	8006f98 <_printf_float+0x320>
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	4631      	mov	r1, r6
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d1bf      	bne.n	8006f4c <_printf_float+0x2d4>
 8006fcc:	e6a2      	b.n	8006d14 <_printf_float+0x9c>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	9204      	str	r2, [sp, #16]
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f43f ae9b 	beq.w	8006d14 <_printf_float+0x9c>
 8006fde:	9b05      	ldr	r3, [sp, #20]
 8006fe0:	9a04      	ldr	r2, [sp, #16]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	9305      	str	r3, [sp, #20]
 8006fe6:	e7b7      	b.n	8006f58 <_printf_float+0x2e0>
 8006fe8:	4653      	mov	r3, sl
 8006fea:	465a      	mov	r2, fp
 8006fec:	4631      	mov	r1, r6
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d1be      	bne.n	8006f74 <_printf_float+0x2fc>
 8006ff6:	e68d      	b.n	8006d14 <_printf_float+0x9c>
 8006ff8:	9a04      	ldr	r2, [sp, #16]
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	4442      	add	r2, r8
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	d1c1      	bne.n	8006f8c <_printf_float+0x314>
 8007008:	e684      	b.n	8006d14 <_printf_float+0x9c>
 800700a:	9a08      	ldr	r2, [sp, #32]
 800700c:	2a01      	cmp	r2, #1
 800700e:	dc01      	bgt.n	8007014 <_printf_float+0x39c>
 8007010:	07db      	lsls	r3, r3, #31
 8007012:	d537      	bpl.n	8007084 <_printf_float+0x40c>
 8007014:	2301      	movs	r3, #1
 8007016:	4642      	mov	r2, r8
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f ae78 	beq.w	8006d14 <_printf_float+0x9c>
 8007024:	4653      	mov	r3, sl
 8007026:	465a      	mov	r2, fp
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	f43f ae70 	beq.w	8006d14 <_printf_float+0x9c>
 8007034:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007038:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800703c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007040:	d01b      	beq.n	800707a <_printf_float+0x402>
 8007042:	9b08      	ldr	r3, [sp, #32]
 8007044:	f108 0201 	add.w	r2, r8, #1
 8007048:	3b01      	subs	r3, #1
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	d10e      	bne.n	8007072 <_printf_float+0x3fa>
 8007054:	e65e      	b.n	8006d14 <_printf_float+0x9c>
 8007056:	2301      	movs	r3, #1
 8007058:	464a      	mov	r2, r9
 800705a:	4631      	mov	r1, r6
 800705c:	4628      	mov	r0, r5
 800705e:	47b8      	blx	r7
 8007060:	3001      	adds	r0, #1
 8007062:	f43f ae57 	beq.w	8006d14 <_printf_float+0x9c>
 8007066:	f108 0801 	add.w	r8, r8, #1
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	3b01      	subs	r3, #1
 800706e:	4543      	cmp	r3, r8
 8007070:	dcf1      	bgt.n	8007056 <_printf_float+0x3de>
 8007072:	9b04      	ldr	r3, [sp, #16]
 8007074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007078:	e6db      	b.n	8006e32 <_printf_float+0x1ba>
 800707a:	f04f 0800 	mov.w	r8, #0
 800707e:	f104 091a 	add.w	r9, r4, #26
 8007082:	e7f2      	b.n	800706a <_printf_float+0x3f2>
 8007084:	2301      	movs	r3, #1
 8007086:	4642      	mov	r2, r8
 8007088:	e7df      	b.n	800704a <_printf_float+0x3d2>
 800708a:	2301      	movs	r3, #1
 800708c:	464a      	mov	r2, r9
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	f43f ae3d 	beq.w	8006d14 <_printf_float+0x9c>
 800709a:	f108 0801 	add.w	r8, r8, #1
 800709e:	68e3      	ldr	r3, [r4, #12]
 80070a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070a2:	1a5b      	subs	r3, r3, r1
 80070a4:	4543      	cmp	r3, r8
 80070a6:	dcf0      	bgt.n	800708a <_printf_float+0x412>
 80070a8:	e6f7      	b.n	8006e9a <_printf_float+0x222>
 80070aa:	f04f 0800 	mov.w	r8, #0
 80070ae:	f104 0919 	add.w	r9, r4, #25
 80070b2:	e7f4      	b.n	800709e <_printf_float+0x426>

080070b4 <_printf_common>:
 80070b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b8:	4616      	mov	r6, r2
 80070ba:	4699      	mov	r9, r3
 80070bc:	688a      	ldr	r2, [r1, #8]
 80070be:	690b      	ldr	r3, [r1, #16]
 80070c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	bfb8      	it	lt
 80070c8:	4613      	movlt	r3, r2
 80070ca:	6033      	str	r3, [r6, #0]
 80070cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070d0:	4607      	mov	r7, r0
 80070d2:	460c      	mov	r4, r1
 80070d4:	b10a      	cbz	r2, 80070da <_printf_common+0x26>
 80070d6:	3301      	adds	r3, #1
 80070d8:	6033      	str	r3, [r6, #0]
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	0699      	lsls	r1, r3, #26
 80070de:	bf42      	ittt	mi
 80070e0:	6833      	ldrmi	r3, [r6, #0]
 80070e2:	3302      	addmi	r3, #2
 80070e4:	6033      	strmi	r3, [r6, #0]
 80070e6:	6825      	ldr	r5, [r4, #0]
 80070e8:	f015 0506 	ands.w	r5, r5, #6
 80070ec:	d106      	bne.n	80070fc <_printf_common+0x48>
 80070ee:	f104 0a19 	add.w	sl, r4, #25
 80070f2:	68e3      	ldr	r3, [r4, #12]
 80070f4:	6832      	ldr	r2, [r6, #0]
 80070f6:	1a9b      	subs	r3, r3, r2
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	dc26      	bgt.n	800714a <_printf_common+0x96>
 80070fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007100:	1e13      	subs	r3, r2, #0
 8007102:	6822      	ldr	r2, [r4, #0]
 8007104:	bf18      	it	ne
 8007106:	2301      	movne	r3, #1
 8007108:	0692      	lsls	r2, r2, #26
 800710a:	d42b      	bmi.n	8007164 <_printf_common+0xb0>
 800710c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007110:	4649      	mov	r1, r9
 8007112:	4638      	mov	r0, r7
 8007114:	47c0      	blx	r8
 8007116:	3001      	adds	r0, #1
 8007118:	d01e      	beq.n	8007158 <_printf_common+0xa4>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	68e5      	ldr	r5, [r4, #12]
 800711e:	6832      	ldr	r2, [r6, #0]
 8007120:	f003 0306 	and.w	r3, r3, #6
 8007124:	2b04      	cmp	r3, #4
 8007126:	bf08      	it	eq
 8007128:	1aad      	subeq	r5, r5, r2
 800712a:	68a3      	ldr	r3, [r4, #8]
 800712c:	6922      	ldr	r2, [r4, #16]
 800712e:	bf0c      	ite	eq
 8007130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007134:	2500      	movne	r5, #0
 8007136:	4293      	cmp	r3, r2
 8007138:	bfc4      	itt	gt
 800713a:	1a9b      	subgt	r3, r3, r2
 800713c:	18ed      	addgt	r5, r5, r3
 800713e:	2600      	movs	r6, #0
 8007140:	341a      	adds	r4, #26
 8007142:	42b5      	cmp	r5, r6
 8007144:	d11a      	bne.n	800717c <_printf_common+0xc8>
 8007146:	2000      	movs	r0, #0
 8007148:	e008      	b.n	800715c <_printf_common+0xa8>
 800714a:	2301      	movs	r3, #1
 800714c:	4652      	mov	r2, sl
 800714e:	4649      	mov	r1, r9
 8007150:	4638      	mov	r0, r7
 8007152:	47c0      	blx	r8
 8007154:	3001      	adds	r0, #1
 8007156:	d103      	bne.n	8007160 <_printf_common+0xac>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007160:	3501      	adds	r5, #1
 8007162:	e7c6      	b.n	80070f2 <_printf_common+0x3e>
 8007164:	18e1      	adds	r1, r4, r3
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	2030      	movs	r0, #48	; 0x30
 800716a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800716e:	4422      	add	r2, r4
 8007170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007178:	3302      	adds	r3, #2
 800717a:	e7c7      	b.n	800710c <_printf_common+0x58>
 800717c:	2301      	movs	r3, #1
 800717e:	4622      	mov	r2, r4
 8007180:	4649      	mov	r1, r9
 8007182:	4638      	mov	r0, r7
 8007184:	47c0      	blx	r8
 8007186:	3001      	adds	r0, #1
 8007188:	d0e6      	beq.n	8007158 <_printf_common+0xa4>
 800718a:	3601      	adds	r6, #1
 800718c:	e7d9      	b.n	8007142 <_printf_common+0x8e>
	...

08007190 <_printf_i>:
 8007190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	460c      	mov	r4, r1
 8007196:	4691      	mov	r9, r2
 8007198:	7e27      	ldrb	r7, [r4, #24]
 800719a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800719c:	2f78      	cmp	r7, #120	; 0x78
 800719e:	4680      	mov	r8, r0
 80071a0:	469a      	mov	sl, r3
 80071a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a6:	d807      	bhi.n	80071b8 <_printf_i+0x28>
 80071a8:	2f62      	cmp	r7, #98	; 0x62
 80071aa:	d80a      	bhi.n	80071c2 <_printf_i+0x32>
 80071ac:	2f00      	cmp	r7, #0
 80071ae:	f000 80d8 	beq.w	8007362 <_printf_i+0x1d2>
 80071b2:	2f58      	cmp	r7, #88	; 0x58
 80071b4:	f000 80a3 	beq.w	80072fe <_printf_i+0x16e>
 80071b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071c0:	e03a      	b.n	8007238 <_printf_i+0xa8>
 80071c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071c6:	2b15      	cmp	r3, #21
 80071c8:	d8f6      	bhi.n	80071b8 <_printf_i+0x28>
 80071ca:	a001      	add	r0, pc, #4	; (adr r0, 80071d0 <_printf_i+0x40>)
 80071cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80071d0:	08007229 	.word	0x08007229
 80071d4:	0800723d 	.word	0x0800723d
 80071d8:	080071b9 	.word	0x080071b9
 80071dc:	080071b9 	.word	0x080071b9
 80071e0:	080071b9 	.word	0x080071b9
 80071e4:	080071b9 	.word	0x080071b9
 80071e8:	0800723d 	.word	0x0800723d
 80071ec:	080071b9 	.word	0x080071b9
 80071f0:	080071b9 	.word	0x080071b9
 80071f4:	080071b9 	.word	0x080071b9
 80071f8:	080071b9 	.word	0x080071b9
 80071fc:	08007349 	.word	0x08007349
 8007200:	0800726d 	.word	0x0800726d
 8007204:	0800732b 	.word	0x0800732b
 8007208:	080071b9 	.word	0x080071b9
 800720c:	080071b9 	.word	0x080071b9
 8007210:	0800736b 	.word	0x0800736b
 8007214:	080071b9 	.word	0x080071b9
 8007218:	0800726d 	.word	0x0800726d
 800721c:	080071b9 	.word	0x080071b9
 8007220:	080071b9 	.word	0x080071b9
 8007224:	08007333 	.word	0x08007333
 8007228:	680b      	ldr	r3, [r1, #0]
 800722a:	1d1a      	adds	r2, r3, #4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	600a      	str	r2, [r1, #0]
 8007230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007238:	2301      	movs	r3, #1
 800723a:	e0a3      	b.n	8007384 <_printf_i+0x1f4>
 800723c:	6825      	ldr	r5, [r4, #0]
 800723e:	6808      	ldr	r0, [r1, #0]
 8007240:	062e      	lsls	r6, r5, #24
 8007242:	f100 0304 	add.w	r3, r0, #4
 8007246:	d50a      	bpl.n	800725e <_printf_i+0xce>
 8007248:	6805      	ldr	r5, [r0, #0]
 800724a:	600b      	str	r3, [r1, #0]
 800724c:	2d00      	cmp	r5, #0
 800724e:	da03      	bge.n	8007258 <_printf_i+0xc8>
 8007250:	232d      	movs	r3, #45	; 0x2d
 8007252:	426d      	negs	r5, r5
 8007254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007258:	485e      	ldr	r0, [pc, #376]	; (80073d4 <_printf_i+0x244>)
 800725a:	230a      	movs	r3, #10
 800725c:	e019      	b.n	8007292 <_printf_i+0x102>
 800725e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007262:	6805      	ldr	r5, [r0, #0]
 8007264:	600b      	str	r3, [r1, #0]
 8007266:	bf18      	it	ne
 8007268:	b22d      	sxthne	r5, r5
 800726a:	e7ef      	b.n	800724c <_printf_i+0xbc>
 800726c:	680b      	ldr	r3, [r1, #0]
 800726e:	6825      	ldr	r5, [r4, #0]
 8007270:	1d18      	adds	r0, r3, #4
 8007272:	6008      	str	r0, [r1, #0]
 8007274:	0628      	lsls	r0, r5, #24
 8007276:	d501      	bpl.n	800727c <_printf_i+0xec>
 8007278:	681d      	ldr	r5, [r3, #0]
 800727a:	e002      	b.n	8007282 <_printf_i+0xf2>
 800727c:	0669      	lsls	r1, r5, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0xe8>
 8007280:	881d      	ldrh	r5, [r3, #0]
 8007282:	4854      	ldr	r0, [pc, #336]	; (80073d4 <_printf_i+0x244>)
 8007284:	2f6f      	cmp	r7, #111	; 0x6f
 8007286:	bf0c      	ite	eq
 8007288:	2308      	moveq	r3, #8
 800728a:	230a      	movne	r3, #10
 800728c:	2100      	movs	r1, #0
 800728e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007292:	6866      	ldr	r6, [r4, #4]
 8007294:	60a6      	str	r6, [r4, #8]
 8007296:	2e00      	cmp	r6, #0
 8007298:	bfa2      	ittt	ge
 800729a:	6821      	ldrge	r1, [r4, #0]
 800729c:	f021 0104 	bicge.w	r1, r1, #4
 80072a0:	6021      	strge	r1, [r4, #0]
 80072a2:	b90d      	cbnz	r5, 80072a8 <_printf_i+0x118>
 80072a4:	2e00      	cmp	r6, #0
 80072a6:	d04d      	beq.n	8007344 <_printf_i+0x1b4>
 80072a8:	4616      	mov	r6, r2
 80072aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80072ae:	fb03 5711 	mls	r7, r3, r1, r5
 80072b2:	5dc7      	ldrb	r7, [r0, r7]
 80072b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072b8:	462f      	mov	r7, r5
 80072ba:	42bb      	cmp	r3, r7
 80072bc:	460d      	mov	r5, r1
 80072be:	d9f4      	bls.n	80072aa <_printf_i+0x11a>
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d10b      	bne.n	80072dc <_printf_i+0x14c>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	07df      	lsls	r7, r3, #31
 80072c8:	d508      	bpl.n	80072dc <_printf_i+0x14c>
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	6861      	ldr	r1, [r4, #4]
 80072ce:	4299      	cmp	r1, r3
 80072d0:	bfde      	ittt	le
 80072d2:	2330      	movle	r3, #48	; 0x30
 80072d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072dc:	1b92      	subs	r2, r2, r6
 80072de:	6122      	str	r2, [r4, #16]
 80072e0:	f8cd a000 	str.w	sl, [sp]
 80072e4:	464b      	mov	r3, r9
 80072e6:	aa03      	add	r2, sp, #12
 80072e8:	4621      	mov	r1, r4
 80072ea:	4640      	mov	r0, r8
 80072ec:	f7ff fee2 	bl	80070b4 <_printf_common>
 80072f0:	3001      	adds	r0, #1
 80072f2:	d14c      	bne.n	800738e <_printf_i+0x1fe>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	b004      	add	sp, #16
 80072fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fe:	4835      	ldr	r0, [pc, #212]	; (80073d4 <_printf_i+0x244>)
 8007300:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	680e      	ldr	r6, [r1, #0]
 8007308:	061f      	lsls	r7, r3, #24
 800730a:	f856 5b04 	ldr.w	r5, [r6], #4
 800730e:	600e      	str	r6, [r1, #0]
 8007310:	d514      	bpl.n	800733c <_printf_i+0x1ac>
 8007312:	07d9      	lsls	r1, r3, #31
 8007314:	bf44      	itt	mi
 8007316:	f043 0320 	orrmi.w	r3, r3, #32
 800731a:	6023      	strmi	r3, [r4, #0]
 800731c:	b91d      	cbnz	r5, 8007326 <_printf_i+0x196>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	f023 0320 	bic.w	r3, r3, #32
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	2310      	movs	r3, #16
 8007328:	e7b0      	b.n	800728c <_printf_i+0xfc>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f043 0320 	orr.w	r3, r3, #32
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	2378      	movs	r3, #120	; 0x78
 8007334:	4828      	ldr	r0, [pc, #160]	; (80073d8 <_printf_i+0x248>)
 8007336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800733a:	e7e3      	b.n	8007304 <_printf_i+0x174>
 800733c:	065e      	lsls	r6, r3, #25
 800733e:	bf48      	it	mi
 8007340:	b2ad      	uxthmi	r5, r5
 8007342:	e7e6      	b.n	8007312 <_printf_i+0x182>
 8007344:	4616      	mov	r6, r2
 8007346:	e7bb      	b.n	80072c0 <_printf_i+0x130>
 8007348:	680b      	ldr	r3, [r1, #0]
 800734a:	6826      	ldr	r6, [r4, #0]
 800734c:	6960      	ldr	r0, [r4, #20]
 800734e:	1d1d      	adds	r5, r3, #4
 8007350:	600d      	str	r5, [r1, #0]
 8007352:	0635      	lsls	r5, r6, #24
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	d501      	bpl.n	800735c <_printf_i+0x1cc>
 8007358:	6018      	str	r0, [r3, #0]
 800735a:	e002      	b.n	8007362 <_printf_i+0x1d2>
 800735c:	0671      	lsls	r1, r6, #25
 800735e:	d5fb      	bpl.n	8007358 <_printf_i+0x1c8>
 8007360:	8018      	strh	r0, [r3, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	4616      	mov	r6, r2
 8007368:	e7ba      	b.n	80072e0 <_printf_i+0x150>
 800736a:	680b      	ldr	r3, [r1, #0]
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	600a      	str	r2, [r1, #0]
 8007370:	681e      	ldr	r6, [r3, #0]
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	2100      	movs	r1, #0
 8007376:	4630      	mov	r0, r6
 8007378:	f7f8 ff6a 	bl	8000250 <memchr>
 800737c:	b108      	cbz	r0, 8007382 <_printf_i+0x1f2>
 800737e:	1b80      	subs	r0, r0, r6
 8007380:	6060      	str	r0, [r4, #4]
 8007382:	6863      	ldr	r3, [r4, #4]
 8007384:	6123      	str	r3, [r4, #16]
 8007386:	2300      	movs	r3, #0
 8007388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738c:	e7a8      	b.n	80072e0 <_printf_i+0x150>
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	4632      	mov	r2, r6
 8007392:	4649      	mov	r1, r9
 8007394:	4640      	mov	r0, r8
 8007396:	47d0      	blx	sl
 8007398:	3001      	adds	r0, #1
 800739a:	d0ab      	beq.n	80072f4 <_printf_i+0x164>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	079b      	lsls	r3, r3, #30
 80073a0:	d413      	bmi.n	80073ca <_printf_i+0x23a>
 80073a2:	68e0      	ldr	r0, [r4, #12]
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	4298      	cmp	r0, r3
 80073a8:	bfb8      	it	lt
 80073aa:	4618      	movlt	r0, r3
 80073ac:	e7a4      	b.n	80072f8 <_printf_i+0x168>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4632      	mov	r2, r6
 80073b2:	4649      	mov	r1, r9
 80073b4:	4640      	mov	r0, r8
 80073b6:	47d0      	blx	sl
 80073b8:	3001      	adds	r0, #1
 80073ba:	d09b      	beq.n	80072f4 <_printf_i+0x164>
 80073bc:	3501      	adds	r5, #1
 80073be:	68e3      	ldr	r3, [r4, #12]
 80073c0:	9903      	ldr	r1, [sp, #12]
 80073c2:	1a5b      	subs	r3, r3, r1
 80073c4:	42ab      	cmp	r3, r5
 80073c6:	dcf2      	bgt.n	80073ae <_printf_i+0x21e>
 80073c8:	e7eb      	b.n	80073a2 <_printf_i+0x212>
 80073ca:	2500      	movs	r5, #0
 80073cc:	f104 0619 	add.w	r6, r4, #25
 80073d0:	e7f5      	b.n	80073be <_printf_i+0x22e>
 80073d2:	bf00      	nop
 80073d4:	0801b806 	.word	0x0801b806
 80073d8:	0801b817 	.word	0x0801b817

080073dc <siprintf>:
 80073dc:	b40e      	push	{r1, r2, r3}
 80073de:	b500      	push	{lr}
 80073e0:	b09c      	sub	sp, #112	; 0x70
 80073e2:	ab1d      	add	r3, sp, #116	; 0x74
 80073e4:	9002      	str	r0, [sp, #8]
 80073e6:	9006      	str	r0, [sp, #24]
 80073e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073ec:	4809      	ldr	r0, [pc, #36]	; (8007414 <siprintf+0x38>)
 80073ee:	9107      	str	r1, [sp, #28]
 80073f0:	9104      	str	r1, [sp, #16]
 80073f2:	4909      	ldr	r1, [pc, #36]	; (8007418 <siprintf+0x3c>)
 80073f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f8:	9105      	str	r1, [sp, #20]
 80073fa:	6800      	ldr	r0, [r0, #0]
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	a902      	add	r1, sp, #8
 8007400:	f001 faca 	bl	8008998 <_svfiprintf_r>
 8007404:	9b02      	ldr	r3, [sp, #8]
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	b01c      	add	sp, #112	; 0x70
 800740c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007410:	b003      	add	sp, #12
 8007412:	4770      	bx	lr
 8007414:	20000094 	.word	0x20000094
 8007418:	ffff0208 	.word	0xffff0208

0800741c <quorem>:
 800741c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	6903      	ldr	r3, [r0, #16]
 8007422:	690c      	ldr	r4, [r1, #16]
 8007424:	42a3      	cmp	r3, r4
 8007426:	4607      	mov	r7, r0
 8007428:	f2c0 8081 	blt.w	800752e <quorem+0x112>
 800742c:	3c01      	subs	r4, #1
 800742e:	f101 0814 	add.w	r8, r1, #20
 8007432:	f100 0514 	add.w	r5, r0, #20
 8007436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800743a:	9301      	str	r3, [sp, #4]
 800743c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007444:	3301      	adds	r3, #1
 8007446:	429a      	cmp	r2, r3
 8007448:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800744c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007450:	fbb2 f6f3 	udiv	r6, r2, r3
 8007454:	d331      	bcc.n	80074ba <quorem+0x9e>
 8007456:	f04f 0e00 	mov.w	lr, #0
 800745a:	4640      	mov	r0, r8
 800745c:	46ac      	mov	ip, r5
 800745e:	46f2      	mov	sl, lr
 8007460:	f850 2b04 	ldr.w	r2, [r0], #4
 8007464:	b293      	uxth	r3, r2
 8007466:	fb06 e303 	mla	r3, r6, r3, lr
 800746a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800746e:	b29b      	uxth	r3, r3
 8007470:	ebaa 0303 	sub.w	r3, sl, r3
 8007474:	0c12      	lsrs	r2, r2, #16
 8007476:	f8dc a000 	ldr.w	sl, [ip]
 800747a:	fb06 e202 	mla	r2, r6, r2, lr
 800747e:	fa13 f38a 	uxtah	r3, r3, sl
 8007482:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007486:	fa1f fa82 	uxth.w	sl, r2
 800748a:	f8dc 2000 	ldr.w	r2, [ip]
 800748e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007492:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007496:	b29b      	uxth	r3, r3
 8007498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800749c:	4581      	cmp	r9, r0
 800749e:	f84c 3b04 	str.w	r3, [ip], #4
 80074a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074a6:	d2db      	bcs.n	8007460 <quorem+0x44>
 80074a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80074ac:	b92b      	cbnz	r3, 80074ba <quorem+0x9e>
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	3b04      	subs	r3, #4
 80074b2:	429d      	cmp	r5, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	d32e      	bcc.n	8007516 <quorem+0xfa>
 80074b8:	613c      	str	r4, [r7, #16]
 80074ba:	4638      	mov	r0, r7
 80074bc:	f001 f856 	bl	800856c <__mcmp>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	db24      	blt.n	800750e <quorem+0xf2>
 80074c4:	3601      	adds	r6, #1
 80074c6:	4628      	mov	r0, r5
 80074c8:	f04f 0c00 	mov.w	ip, #0
 80074cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80074d0:	f8d0 e000 	ldr.w	lr, [r0]
 80074d4:	b293      	uxth	r3, r2
 80074d6:	ebac 0303 	sub.w	r3, ip, r3
 80074da:	0c12      	lsrs	r2, r2, #16
 80074dc:	fa13 f38e 	uxtah	r3, r3, lr
 80074e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074ee:	45c1      	cmp	r9, r8
 80074f0:	f840 3b04 	str.w	r3, [r0], #4
 80074f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074f8:	d2e8      	bcs.n	80074cc <quorem+0xb0>
 80074fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007502:	b922      	cbnz	r2, 800750e <quorem+0xf2>
 8007504:	3b04      	subs	r3, #4
 8007506:	429d      	cmp	r5, r3
 8007508:	461a      	mov	r2, r3
 800750a:	d30a      	bcc.n	8007522 <quorem+0x106>
 800750c:	613c      	str	r4, [r7, #16]
 800750e:	4630      	mov	r0, r6
 8007510:	b003      	add	sp, #12
 8007512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	3b04      	subs	r3, #4
 800751a:	2a00      	cmp	r2, #0
 800751c:	d1cc      	bne.n	80074b8 <quorem+0x9c>
 800751e:	3c01      	subs	r4, #1
 8007520:	e7c7      	b.n	80074b2 <quorem+0x96>
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	3b04      	subs	r3, #4
 8007526:	2a00      	cmp	r2, #0
 8007528:	d1f0      	bne.n	800750c <quorem+0xf0>
 800752a:	3c01      	subs	r4, #1
 800752c:	e7eb      	b.n	8007506 <quorem+0xea>
 800752e:	2000      	movs	r0, #0
 8007530:	e7ee      	b.n	8007510 <quorem+0xf4>
 8007532:	0000      	movs	r0, r0
 8007534:	0000      	movs	r0, r0
	...

08007538 <_dtoa_r>:
 8007538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	ec59 8b10 	vmov	r8, r9, d0
 8007540:	b095      	sub	sp, #84	; 0x54
 8007542:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007544:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007546:	9107      	str	r1, [sp, #28]
 8007548:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800754c:	4606      	mov	r6, r0
 800754e:	9209      	str	r2, [sp, #36]	; 0x24
 8007550:	9310      	str	r3, [sp, #64]	; 0x40
 8007552:	b975      	cbnz	r5, 8007572 <_dtoa_r+0x3a>
 8007554:	2010      	movs	r0, #16
 8007556:	f000 fd75 	bl	8008044 <malloc>
 800755a:	4602      	mov	r2, r0
 800755c:	6270      	str	r0, [r6, #36]	; 0x24
 800755e:	b920      	cbnz	r0, 800756a <_dtoa_r+0x32>
 8007560:	4bab      	ldr	r3, [pc, #684]	; (8007810 <_dtoa_r+0x2d8>)
 8007562:	21ea      	movs	r1, #234	; 0xea
 8007564:	48ab      	ldr	r0, [pc, #684]	; (8007814 <_dtoa_r+0x2dc>)
 8007566:	f001 fb27 	bl	8008bb8 <__assert_func>
 800756a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800756e:	6005      	str	r5, [r0, #0]
 8007570:	60c5      	str	r5, [r0, #12]
 8007572:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007574:	6819      	ldr	r1, [r3, #0]
 8007576:	b151      	cbz	r1, 800758e <_dtoa_r+0x56>
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	604a      	str	r2, [r1, #4]
 800757c:	2301      	movs	r3, #1
 800757e:	4093      	lsls	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
 8007582:	4630      	mov	r0, r6
 8007584:	f000 fdb4 	bl	80080f0 <_Bfree>
 8007588:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	f1b9 0300 	subs.w	r3, r9, #0
 8007592:	bfbb      	ittet	lt
 8007594:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007598:	9303      	strlt	r3, [sp, #12]
 800759a:	2300      	movge	r3, #0
 800759c:	2201      	movlt	r2, #1
 800759e:	bfac      	ite	ge
 80075a0:	6023      	strge	r3, [r4, #0]
 80075a2:	6022      	strlt	r2, [r4, #0]
 80075a4:	4b9c      	ldr	r3, [pc, #624]	; (8007818 <_dtoa_r+0x2e0>)
 80075a6:	9c03      	ldr	r4, [sp, #12]
 80075a8:	43a3      	bics	r3, r4
 80075aa:	d11a      	bne.n	80075e2 <_dtoa_r+0xaa>
 80075ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80075b8:	ea53 0308 	orrs.w	r3, r3, r8
 80075bc:	f000 8512 	beq.w	8007fe4 <_dtoa_r+0xaac>
 80075c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075c2:	b953      	cbnz	r3, 80075da <_dtoa_r+0xa2>
 80075c4:	4b95      	ldr	r3, [pc, #596]	; (800781c <_dtoa_r+0x2e4>)
 80075c6:	e01f      	b.n	8007608 <_dtoa_r+0xd0>
 80075c8:	4b95      	ldr	r3, [pc, #596]	; (8007820 <_dtoa_r+0x2e8>)
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	3308      	adds	r3, #8
 80075ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	9800      	ldr	r0, [sp, #0]
 80075d4:	b015      	add	sp, #84	; 0x54
 80075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075da:	4b90      	ldr	r3, [pc, #576]	; (800781c <_dtoa_r+0x2e4>)
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	3303      	adds	r3, #3
 80075e0:	e7f5      	b.n	80075ce <_dtoa_r+0x96>
 80075e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80075f2:	d10b      	bne.n	800760c <_dtoa_r+0xd4>
 80075f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075f6:	2301      	movs	r3, #1
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 84ee 	beq.w	8007fde <_dtoa_r+0xaa6>
 8007602:	4888      	ldr	r0, [pc, #544]	; (8007824 <_dtoa_r+0x2ec>)
 8007604:	6018      	str	r0, [r3, #0]
 8007606:	1e43      	subs	r3, r0, #1
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	e7e2      	b.n	80075d2 <_dtoa_r+0x9a>
 800760c:	a913      	add	r1, sp, #76	; 0x4c
 800760e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007612:	aa12      	add	r2, sp, #72	; 0x48
 8007614:	4630      	mov	r0, r6
 8007616:	f001 f84d 	bl	80086b4 <__d2b>
 800761a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800761e:	4605      	mov	r5, r0
 8007620:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007622:	2900      	cmp	r1, #0
 8007624:	d047      	beq.n	80076b6 <_dtoa_r+0x17e>
 8007626:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007628:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800762c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007630:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007638:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800763c:	2400      	movs	r4, #0
 800763e:	ec43 2b16 	vmov	d6, r2, r3
 8007642:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007646:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80077f8 <_dtoa_r+0x2c0>
 800764a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800764e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007800 <_dtoa_r+0x2c8>
 8007652:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007656:	eeb0 7b46 	vmov.f64	d7, d6
 800765a:	ee06 1a90 	vmov	s13, r1
 800765e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007662:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007808 <_dtoa_r+0x2d0>
 8007666:	eea5 7b06 	vfma.f64	d7, d5, d6
 800766a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800766e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007676:	ee16 ba90 	vmov	fp, s13
 800767a:	9411      	str	r4, [sp, #68]	; 0x44
 800767c:	d508      	bpl.n	8007690 <_dtoa_r+0x158>
 800767e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007682:	eeb4 6b47 	vcmp.f64	d6, d7
 8007686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768a:	bf18      	it	ne
 800768c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007690:	f1bb 0f16 	cmp.w	fp, #22
 8007694:	d832      	bhi.n	80076fc <_dtoa_r+0x1c4>
 8007696:	4b64      	ldr	r3, [pc, #400]	; (8007828 <_dtoa_r+0x2f0>)
 8007698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800769c:	ed93 7b00 	vldr	d7, [r3]
 80076a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80076a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ac:	d501      	bpl.n	80076b2 <_dtoa_r+0x17a>
 80076ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076b2:	2300      	movs	r3, #0
 80076b4:	e023      	b.n	80076fe <_dtoa_r+0x1c6>
 80076b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80076b8:	4401      	add	r1, r0
 80076ba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80076be:	2b20      	cmp	r3, #32
 80076c0:	bfc3      	ittte	gt
 80076c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076c6:	fa04 f303 	lslgt.w	r3, r4, r3
 80076ca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80076ce:	f1c3 0320 	rsble	r3, r3, #32
 80076d2:	bfc6      	itte	gt
 80076d4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80076d8:	ea43 0308 	orrgt.w	r3, r3, r8
 80076dc:	fa08 f303 	lslle.w	r3, r8, r3
 80076e0:	ee07 3a90 	vmov	s15, r3
 80076e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80076e8:	3901      	subs	r1, #1
 80076ea:	ed8d 7b00 	vstr	d7, [sp]
 80076ee:	9c01      	ldr	r4, [sp, #4]
 80076f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80076f8:	2401      	movs	r4, #1
 80076fa:	e7a0      	b.n	800763e <_dtoa_r+0x106>
 80076fc:	2301      	movs	r3, #1
 80076fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007700:	1a43      	subs	r3, r0, r1
 8007702:	1e5a      	subs	r2, r3, #1
 8007704:	bf45      	ittet	mi
 8007706:	f1c3 0301 	rsbmi	r3, r3, #1
 800770a:	9305      	strmi	r3, [sp, #20]
 800770c:	2300      	movpl	r3, #0
 800770e:	2300      	movmi	r3, #0
 8007710:	9206      	str	r2, [sp, #24]
 8007712:	bf54      	ite	pl
 8007714:	9305      	strpl	r3, [sp, #20]
 8007716:	9306      	strmi	r3, [sp, #24]
 8007718:	f1bb 0f00 	cmp.w	fp, #0
 800771c:	db18      	blt.n	8007750 <_dtoa_r+0x218>
 800771e:	9b06      	ldr	r3, [sp, #24]
 8007720:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007724:	445b      	add	r3, fp
 8007726:	9306      	str	r3, [sp, #24]
 8007728:	2300      	movs	r3, #0
 800772a:	9a07      	ldr	r2, [sp, #28]
 800772c:	2a09      	cmp	r2, #9
 800772e:	d849      	bhi.n	80077c4 <_dtoa_r+0x28c>
 8007730:	2a05      	cmp	r2, #5
 8007732:	bfc4      	itt	gt
 8007734:	3a04      	subgt	r2, #4
 8007736:	9207      	strgt	r2, [sp, #28]
 8007738:	9a07      	ldr	r2, [sp, #28]
 800773a:	f1a2 0202 	sub.w	r2, r2, #2
 800773e:	bfcc      	ite	gt
 8007740:	2400      	movgt	r4, #0
 8007742:	2401      	movle	r4, #1
 8007744:	2a03      	cmp	r2, #3
 8007746:	d848      	bhi.n	80077da <_dtoa_r+0x2a2>
 8007748:	e8df f002 	tbb	[pc, r2]
 800774c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007750:	9b05      	ldr	r3, [sp, #20]
 8007752:	2200      	movs	r2, #0
 8007754:	eba3 030b 	sub.w	r3, r3, fp
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	920e      	str	r2, [sp, #56]	; 0x38
 800775c:	f1cb 0300 	rsb	r3, fp, #0
 8007760:	e7e3      	b.n	800772a <_dtoa_r+0x1f2>
 8007762:	2200      	movs	r2, #0
 8007764:	9208      	str	r2, [sp, #32]
 8007766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007768:	2a00      	cmp	r2, #0
 800776a:	dc39      	bgt.n	80077e0 <_dtoa_r+0x2a8>
 800776c:	f04f 0a01 	mov.w	sl, #1
 8007770:	46d1      	mov	r9, sl
 8007772:	4652      	mov	r2, sl
 8007774:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007778:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800777a:	2100      	movs	r1, #0
 800777c:	6079      	str	r1, [r7, #4]
 800777e:	2004      	movs	r0, #4
 8007780:	f100 0c14 	add.w	ip, r0, #20
 8007784:	4594      	cmp	ip, r2
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	d92f      	bls.n	80077ea <_dtoa_r+0x2b2>
 800778a:	4630      	mov	r0, r6
 800778c:	930c      	str	r3, [sp, #48]	; 0x30
 800778e:	f000 fc6f 	bl	8008070 <_Balloc>
 8007792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007794:	9000      	str	r0, [sp, #0]
 8007796:	4602      	mov	r2, r0
 8007798:	2800      	cmp	r0, #0
 800779a:	d149      	bne.n	8007830 <_dtoa_r+0x2f8>
 800779c:	4b23      	ldr	r3, [pc, #140]	; (800782c <_dtoa_r+0x2f4>)
 800779e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077a2:	e6df      	b.n	8007564 <_dtoa_r+0x2c>
 80077a4:	2201      	movs	r2, #1
 80077a6:	e7dd      	b.n	8007764 <_dtoa_r+0x22c>
 80077a8:	2200      	movs	r2, #0
 80077aa:	9208      	str	r2, [sp, #32]
 80077ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ae:	eb0b 0a02 	add.w	sl, fp, r2
 80077b2:	f10a 0901 	add.w	r9, sl, #1
 80077b6:	464a      	mov	r2, r9
 80077b8:	2a01      	cmp	r2, #1
 80077ba:	bfb8      	it	lt
 80077bc:	2201      	movlt	r2, #1
 80077be:	e7db      	b.n	8007778 <_dtoa_r+0x240>
 80077c0:	2201      	movs	r2, #1
 80077c2:	e7f2      	b.n	80077aa <_dtoa_r+0x272>
 80077c4:	2401      	movs	r4, #1
 80077c6:	2200      	movs	r2, #0
 80077c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80077cc:	f04f 3aff 	mov.w	sl, #4294967295
 80077d0:	2100      	movs	r1, #0
 80077d2:	46d1      	mov	r9, sl
 80077d4:	2212      	movs	r2, #18
 80077d6:	9109      	str	r1, [sp, #36]	; 0x24
 80077d8:	e7ce      	b.n	8007778 <_dtoa_r+0x240>
 80077da:	2201      	movs	r2, #1
 80077dc:	9208      	str	r2, [sp, #32]
 80077de:	e7f5      	b.n	80077cc <_dtoa_r+0x294>
 80077e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80077e4:	46d1      	mov	r9, sl
 80077e6:	4652      	mov	r2, sl
 80077e8:	e7c6      	b.n	8007778 <_dtoa_r+0x240>
 80077ea:	3101      	adds	r1, #1
 80077ec:	6079      	str	r1, [r7, #4]
 80077ee:	0040      	lsls	r0, r0, #1
 80077f0:	e7c6      	b.n	8007780 <_dtoa_r+0x248>
 80077f2:	bf00      	nop
 80077f4:	f3af 8000 	nop.w
 80077f8:	636f4361 	.word	0x636f4361
 80077fc:	3fd287a7 	.word	0x3fd287a7
 8007800:	8b60c8b3 	.word	0x8b60c8b3
 8007804:	3fc68a28 	.word	0x3fc68a28
 8007808:	509f79fb 	.word	0x509f79fb
 800780c:	3fd34413 	.word	0x3fd34413
 8007810:	0801b835 	.word	0x0801b835
 8007814:	0801b84c 	.word	0x0801b84c
 8007818:	7ff00000 	.word	0x7ff00000
 800781c:	0801b831 	.word	0x0801b831
 8007820:	0801b828 	.word	0x0801b828
 8007824:	0801b805 	.word	0x0801b805
 8007828:	0801b948 	.word	0x0801b948
 800782c:	0801b8ab 	.word	0x0801b8ab
 8007830:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007832:	9900      	ldr	r1, [sp, #0]
 8007834:	6011      	str	r1, [r2, #0]
 8007836:	f1b9 0f0e 	cmp.w	r9, #14
 800783a:	d872      	bhi.n	8007922 <_dtoa_r+0x3ea>
 800783c:	2c00      	cmp	r4, #0
 800783e:	d070      	beq.n	8007922 <_dtoa_r+0x3ea>
 8007840:	f1bb 0f00 	cmp.w	fp, #0
 8007844:	f340 80a6 	ble.w	8007994 <_dtoa_r+0x45c>
 8007848:	49ca      	ldr	r1, [pc, #808]	; (8007b74 <_dtoa_r+0x63c>)
 800784a:	f00b 020f 	and.w	r2, fp, #15
 800784e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007852:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007856:	ed92 7b00 	vldr	d7, [r2]
 800785a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800785e:	f000 808d 	beq.w	800797c <_dtoa_r+0x444>
 8007862:	4ac5      	ldr	r2, [pc, #788]	; (8007b78 <_dtoa_r+0x640>)
 8007864:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007868:	ed92 6b08 	vldr	d6, [r2, #32]
 800786c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007870:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007874:	f001 010f 	and.w	r1, r1, #15
 8007878:	2203      	movs	r2, #3
 800787a:	48bf      	ldr	r0, [pc, #764]	; (8007b78 <_dtoa_r+0x640>)
 800787c:	2900      	cmp	r1, #0
 800787e:	d17f      	bne.n	8007980 <_dtoa_r+0x448>
 8007880:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007884:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007888:	ed8d 7b02 	vstr	d7, [sp, #8]
 800788c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800788e:	2900      	cmp	r1, #0
 8007890:	f000 80b2 	beq.w	80079f8 <_dtoa_r+0x4c0>
 8007894:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800789c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80078a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a4:	f140 80a8 	bpl.w	80079f8 <_dtoa_r+0x4c0>
 80078a8:	f1b9 0f00 	cmp.w	r9, #0
 80078ac:	f000 80a4 	beq.w	80079f8 <_dtoa_r+0x4c0>
 80078b0:	f1ba 0f00 	cmp.w	sl, #0
 80078b4:	dd31      	ble.n	800791a <_dtoa_r+0x3e2>
 80078b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80078ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80078c6:	3201      	adds	r2, #1
 80078c8:	4650      	mov	r0, sl
 80078ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80078ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80078d2:	ee07 2a90 	vmov	s15, r2
 80078d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80078da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80078de:	ed8d 5b02 	vstr	d5, [sp, #8]
 80078e2:	9c03      	ldr	r4, [sp, #12]
 80078e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80078e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f040 8086 	bne.w	80079fe <_dtoa_r+0x4c6>
 80078f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80078f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80078fa:	ec42 1b17 	vmov	d7, r1, r2
 80078fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007906:	f300 8272 	bgt.w	8007dee <_dtoa_r+0x8b6>
 800790a:	eeb1 7b47 	vneg.f64	d7, d7
 800790e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007916:	f100 8267 	bmi.w	8007de8 <_dtoa_r+0x8b0>
 800791a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800791e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007922:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007924:	2a00      	cmp	r2, #0
 8007926:	f2c0 8129 	blt.w	8007b7c <_dtoa_r+0x644>
 800792a:	f1bb 0f0e 	cmp.w	fp, #14
 800792e:	f300 8125 	bgt.w	8007b7c <_dtoa_r+0x644>
 8007932:	4b90      	ldr	r3, [pc, #576]	; (8007b74 <_dtoa_r+0x63c>)
 8007934:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007938:	ed93 6b00 	vldr	d6, [r3]
 800793c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793e:	2b00      	cmp	r3, #0
 8007940:	f280 80c3 	bge.w	8007aca <_dtoa_r+0x592>
 8007944:	f1b9 0f00 	cmp.w	r9, #0
 8007948:	f300 80bf 	bgt.w	8007aca <_dtoa_r+0x592>
 800794c:	f040 824c 	bne.w	8007de8 <_dtoa_r+0x8b0>
 8007950:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007954:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007958:	ed9d 7b02 	vldr	d7, [sp, #8]
 800795c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007964:	464c      	mov	r4, r9
 8007966:	464f      	mov	r7, r9
 8007968:	f280 8222 	bge.w	8007db0 <_dtoa_r+0x878>
 800796c:	f8dd 8000 	ldr.w	r8, [sp]
 8007970:	2331      	movs	r3, #49	; 0x31
 8007972:	f808 3b01 	strb.w	r3, [r8], #1
 8007976:	f10b 0b01 	add.w	fp, fp, #1
 800797a:	e21e      	b.n	8007dba <_dtoa_r+0x882>
 800797c:	2202      	movs	r2, #2
 800797e:	e77c      	b.n	800787a <_dtoa_r+0x342>
 8007980:	07cc      	lsls	r4, r1, #31
 8007982:	d504      	bpl.n	800798e <_dtoa_r+0x456>
 8007984:	ed90 6b00 	vldr	d6, [r0]
 8007988:	3201      	adds	r2, #1
 800798a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800798e:	1049      	asrs	r1, r1, #1
 8007990:	3008      	adds	r0, #8
 8007992:	e773      	b.n	800787c <_dtoa_r+0x344>
 8007994:	d02e      	beq.n	80079f4 <_dtoa_r+0x4bc>
 8007996:	f1cb 0100 	rsb	r1, fp, #0
 800799a:	4a76      	ldr	r2, [pc, #472]	; (8007b74 <_dtoa_r+0x63c>)
 800799c:	f001 000f 	and.w	r0, r1, #15
 80079a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80079a4:	ed92 7b00 	vldr	d7, [r2]
 80079a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80079ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80079b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80079b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80079b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80079bc:	486e      	ldr	r0, [pc, #440]	; (8007b78 <_dtoa_r+0x640>)
 80079be:	1109      	asrs	r1, r1, #4
 80079c0:	2400      	movs	r4, #0
 80079c2:	2202      	movs	r2, #2
 80079c4:	b939      	cbnz	r1, 80079d6 <_dtoa_r+0x49e>
 80079c6:	2c00      	cmp	r4, #0
 80079c8:	f43f af60 	beq.w	800788c <_dtoa_r+0x354>
 80079cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d4:	e75a      	b.n	800788c <_dtoa_r+0x354>
 80079d6:	07cf      	lsls	r7, r1, #31
 80079d8:	d509      	bpl.n	80079ee <_dtoa_r+0x4b6>
 80079da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80079de:	ed90 7b00 	vldr	d7, [r0]
 80079e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80079e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80079ea:	3201      	adds	r2, #1
 80079ec:	2401      	movs	r4, #1
 80079ee:	1049      	asrs	r1, r1, #1
 80079f0:	3008      	adds	r0, #8
 80079f2:	e7e7      	b.n	80079c4 <_dtoa_r+0x48c>
 80079f4:	2202      	movs	r2, #2
 80079f6:	e749      	b.n	800788c <_dtoa_r+0x354>
 80079f8:	465f      	mov	r7, fp
 80079fa:	4648      	mov	r0, r9
 80079fc:	e765      	b.n	80078ca <_dtoa_r+0x392>
 80079fe:	ec42 1b17 	vmov	d7, r1, r2
 8007a02:	4a5c      	ldr	r2, [pc, #368]	; (8007b74 <_dtoa_r+0x63c>)
 8007a04:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007a08:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007a0c:	9a00      	ldr	r2, [sp, #0]
 8007a0e:	1814      	adds	r4, r2, r0
 8007a10:	9a08      	ldr	r2, [sp, #32]
 8007a12:	b352      	cbz	r2, 8007a6a <_dtoa_r+0x532>
 8007a14:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007a18:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007a1c:	f8dd 8000 	ldr.w	r8, [sp]
 8007a20:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007a24:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007a28:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007a30:	ee14 2a90 	vmov	r2, s9
 8007a34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a38:	3230      	adds	r2, #48	; 0x30
 8007a3a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a46:	f808 2b01 	strb.w	r2, [r8], #1
 8007a4a:	d439      	bmi.n	8007ac0 <_dtoa_r+0x588>
 8007a4c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007a50:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a58:	d472      	bmi.n	8007b40 <_dtoa_r+0x608>
 8007a5a:	45a0      	cmp	r8, r4
 8007a5c:	f43f af5d 	beq.w	800791a <_dtoa_r+0x3e2>
 8007a60:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007a64:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007a68:	e7e0      	b.n	8007a2c <_dtoa_r+0x4f4>
 8007a6a:	f8dd 8000 	ldr.w	r8, [sp]
 8007a6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007a72:	4621      	mov	r1, r4
 8007a74:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007a78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007a7c:	ee14 2a90 	vmov	r2, s9
 8007a80:	3230      	adds	r2, #48	; 0x30
 8007a82:	f808 2b01 	strb.w	r2, [r8], #1
 8007a86:	45a0      	cmp	r8, r4
 8007a88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a8c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a90:	d118      	bne.n	8007ac4 <_dtoa_r+0x58c>
 8007a92:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007a96:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007a9a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa2:	dc4d      	bgt.n	8007b40 <_dtoa_r+0x608>
 8007aa4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007aa8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab0:	f57f af33 	bpl.w	800791a <_dtoa_r+0x3e2>
 8007ab4:	4688      	mov	r8, r1
 8007ab6:	3901      	subs	r1, #1
 8007ab8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007abc:	2b30      	cmp	r3, #48	; 0x30
 8007abe:	d0f9      	beq.n	8007ab4 <_dtoa_r+0x57c>
 8007ac0:	46bb      	mov	fp, r7
 8007ac2:	e02a      	b.n	8007b1a <_dtoa_r+0x5e2>
 8007ac4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007ac8:	e7d6      	b.n	8007a78 <_dtoa_r+0x540>
 8007aca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ace:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007ad2:	f8dd 8000 	ldr.w	r8, [sp]
 8007ad6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007ada:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007ade:	ee15 3a10 	vmov	r3, s10
 8007ae2:	3330      	adds	r3, #48	; 0x30
 8007ae4:	f808 3b01 	strb.w	r3, [r8], #1
 8007ae8:	9b00      	ldr	r3, [sp, #0]
 8007aea:	eba8 0303 	sub.w	r3, r8, r3
 8007aee:	4599      	cmp	r9, r3
 8007af0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007af4:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007af8:	d133      	bne.n	8007b62 <_dtoa_r+0x62a>
 8007afa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007afe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b06:	dc1a      	bgt.n	8007b3e <_dtoa_r+0x606>
 8007b08:	eeb4 7b46 	vcmp.f64	d7, d6
 8007b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b10:	d103      	bne.n	8007b1a <_dtoa_r+0x5e2>
 8007b12:	ee15 3a10 	vmov	r3, s10
 8007b16:	07d9      	lsls	r1, r3, #31
 8007b18:	d411      	bmi.n	8007b3e <_dtoa_r+0x606>
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f000 fae7 	bl	80080f0 <_Bfree>
 8007b22:	2300      	movs	r3, #0
 8007b24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b26:	f888 3000 	strb.w	r3, [r8]
 8007b2a:	f10b 0301 	add.w	r3, fp, #1
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f43f ad4d 	beq.w	80075d2 <_dtoa_r+0x9a>
 8007b38:	f8c3 8000 	str.w	r8, [r3]
 8007b3c:	e549      	b.n	80075d2 <_dtoa_r+0x9a>
 8007b3e:	465f      	mov	r7, fp
 8007b40:	4643      	mov	r3, r8
 8007b42:	4698      	mov	r8, r3
 8007b44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b48:	2a39      	cmp	r2, #57	; 0x39
 8007b4a:	d106      	bne.n	8007b5a <_dtoa_r+0x622>
 8007b4c:	9a00      	ldr	r2, [sp, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d1f7      	bne.n	8007b42 <_dtoa_r+0x60a>
 8007b52:	9900      	ldr	r1, [sp, #0]
 8007b54:	2230      	movs	r2, #48	; 0x30
 8007b56:	3701      	adds	r7, #1
 8007b58:	700a      	strb	r2, [r1, #0]
 8007b5a:	781a      	ldrb	r2, [r3, #0]
 8007b5c:	3201      	adds	r2, #1
 8007b5e:	701a      	strb	r2, [r3, #0]
 8007b60:	e7ae      	b.n	8007ac0 <_dtoa_r+0x588>
 8007b62:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007b66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6e:	d1b2      	bne.n	8007ad6 <_dtoa_r+0x59e>
 8007b70:	e7d3      	b.n	8007b1a <_dtoa_r+0x5e2>
 8007b72:	bf00      	nop
 8007b74:	0801b948 	.word	0x0801b948
 8007b78:	0801b920 	.word	0x0801b920
 8007b7c:	9908      	ldr	r1, [sp, #32]
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	f000 80d1 	beq.w	8007d26 <_dtoa_r+0x7ee>
 8007b84:	9907      	ldr	r1, [sp, #28]
 8007b86:	2901      	cmp	r1, #1
 8007b88:	f300 80b4 	bgt.w	8007cf4 <_dtoa_r+0x7bc>
 8007b8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b8e:	2900      	cmp	r1, #0
 8007b90:	f000 80ac 	beq.w	8007cec <_dtoa_r+0x7b4>
 8007b94:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007b9c:	461c      	mov	r4, r3
 8007b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba0:	9b05      	ldr	r3, [sp, #20]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	9305      	str	r3, [sp, #20]
 8007ba6:	9b06      	ldr	r3, [sp, #24]
 8007ba8:	2101      	movs	r1, #1
 8007baa:	4413      	add	r3, r2
 8007bac:	4630      	mov	r0, r6
 8007bae:	9306      	str	r3, [sp, #24]
 8007bb0:	f000 fb5a 	bl	8008268 <__i2b>
 8007bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	f1b8 0f00 	cmp.w	r8, #0
 8007bbc:	dd0d      	ble.n	8007bda <_dtoa_r+0x6a2>
 8007bbe:	9a06      	ldr	r2, [sp, #24]
 8007bc0:	2a00      	cmp	r2, #0
 8007bc2:	dd0a      	ble.n	8007bda <_dtoa_r+0x6a2>
 8007bc4:	4542      	cmp	r2, r8
 8007bc6:	9905      	ldr	r1, [sp, #20]
 8007bc8:	bfa8      	it	ge
 8007bca:	4642      	movge	r2, r8
 8007bcc:	1a89      	subs	r1, r1, r2
 8007bce:	9105      	str	r1, [sp, #20]
 8007bd0:	9906      	ldr	r1, [sp, #24]
 8007bd2:	eba8 0802 	sub.w	r8, r8, r2
 8007bd6:	1a8a      	subs	r2, r1, r2
 8007bd8:	9206      	str	r2, [sp, #24]
 8007bda:	b303      	cbz	r3, 8007c1e <_dtoa_r+0x6e6>
 8007bdc:	9a08      	ldr	r2, [sp, #32]
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	f000 80a6 	beq.w	8007d30 <_dtoa_r+0x7f8>
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	dd13      	ble.n	8007c10 <_dtoa_r+0x6d8>
 8007be8:	4639      	mov	r1, r7
 8007bea:	4622      	mov	r2, r4
 8007bec:	4630      	mov	r0, r6
 8007bee:	930c      	str	r3, [sp, #48]	; 0x30
 8007bf0:	f000 fbf6 	bl	80083e0 <__pow5mult>
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	4601      	mov	r1, r0
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f000 fb4a 	bl	8008294 <__multiply>
 8007c00:	4629      	mov	r1, r5
 8007c02:	900a      	str	r0, [sp, #40]	; 0x28
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 fa73 	bl	80080f0 <_Bfree>
 8007c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c0e:	4615      	mov	r5, r2
 8007c10:	1b1a      	subs	r2, r3, r4
 8007c12:	d004      	beq.n	8007c1e <_dtoa_r+0x6e6>
 8007c14:	4629      	mov	r1, r5
 8007c16:	4630      	mov	r0, r6
 8007c18:	f000 fbe2 	bl	80083e0 <__pow5mult>
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4630      	mov	r0, r6
 8007c22:	f000 fb21 	bl	8008268 <__i2b>
 8007c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	f340 8082 	ble.w	8007d34 <_dtoa_r+0x7fc>
 8007c30:	461a      	mov	r2, r3
 8007c32:	4601      	mov	r1, r0
 8007c34:	4630      	mov	r0, r6
 8007c36:	f000 fbd3 	bl	80083e0 <__pow5mult>
 8007c3a:	9b07      	ldr	r3, [sp, #28]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	4604      	mov	r4, r0
 8007c40:	dd7b      	ble.n	8007d3a <_dtoa_r+0x802>
 8007c42:	2300      	movs	r3, #0
 8007c44:	930a      	str	r3, [sp, #40]	; 0x28
 8007c46:	6922      	ldr	r2, [r4, #16]
 8007c48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007c4c:	6910      	ldr	r0, [r2, #16]
 8007c4e:	f000 fabb 	bl	80081c8 <__hi0bits>
 8007c52:	f1c0 0020 	rsb	r0, r0, #32
 8007c56:	9b06      	ldr	r3, [sp, #24]
 8007c58:	4418      	add	r0, r3
 8007c5a:	f010 001f 	ands.w	r0, r0, #31
 8007c5e:	f000 808d 	beq.w	8007d7c <_dtoa_r+0x844>
 8007c62:	f1c0 0220 	rsb	r2, r0, #32
 8007c66:	2a04      	cmp	r2, #4
 8007c68:	f340 8086 	ble.w	8007d78 <_dtoa_r+0x840>
 8007c6c:	f1c0 001c 	rsb	r0, r0, #28
 8007c70:	9b05      	ldr	r3, [sp, #20]
 8007c72:	4403      	add	r3, r0
 8007c74:	9305      	str	r3, [sp, #20]
 8007c76:	9b06      	ldr	r3, [sp, #24]
 8007c78:	4403      	add	r3, r0
 8007c7a:	4480      	add	r8, r0
 8007c7c:	9306      	str	r3, [sp, #24]
 8007c7e:	9b05      	ldr	r3, [sp, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dd05      	ble.n	8007c90 <_dtoa_r+0x758>
 8007c84:	4629      	mov	r1, r5
 8007c86:	461a      	mov	r2, r3
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 fc03 	bl	8008494 <__lshift>
 8007c8e:	4605      	mov	r5, r0
 8007c90:	9b06      	ldr	r3, [sp, #24]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dd05      	ble.n	8007ca2 <_dtoa_r+0x76a>
 8007c96:	4621      	mov	r1, r4
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 fbfa 	bl	8008494 <__lshift>
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d06b      	beq.n	8007d80 <_dtoa_r+0x848>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 fc5e 	bl	800856c <__mcmp>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	da65      	bge.n	8007d80 <_dtoa_r+0x848>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	220a      	movs	r2, #10
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f000 fa3a 	bl	8008134 <__multadd>
 8007cc0:	9b08      	ldr	r3, [sp, #32]
 8007cc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 8192 	beq.w	8007ff2 <_dtoa_r+0xaba>
 8007cce:	4639      	mov	r1, r7
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	220a      	movs	r2, #10
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f000 fa2d 	bl	8008134 <__multadd>
 8007cda:	f1ba 0f00 	cmp.w	sl, #0
 8007cde:	4607      	mov	r7, r0
 8007ce0:	f300 808e 	bgt.w	8007e00 <_dtoa_r+0x8c8>
 8007ce4:	9b07      	ldr	r3, [sp, #28]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	dc51      	bgt.n	8007d8e <_dtoa_r+0x856>
 8007cea:	e089      	b.n	8007e00 <_dtoa_r+0x8c8>
 8007cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007cf2:	e751      	b.n	8007b98 <_dtoa_r+0x660>
 8007cf4:	f109 34ff 	add.w	r4, r9, #4294967295
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	bfbf      	itttt	lt
 8007cfc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007cfe:	1ae3      	sublt	r3, r4, r3
 8007d00:	18d2      	addlt	r2, r2, r3
 8007d02:	4613      	movlt	r3, r2
 8007d04:	bfb7      	itett	lt
 8007d06:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007d08:	1b1c      	subge	r4, r3, r4
 8007d0a:	4623      	movlt	r3, r4
 8007d0c:	2400      	movlt	r4, #0
 8007d0e:	f1b9 0f00 	cmp.w	r9, #0
 8007d12:	bfb5      	itete	lt
 8007d14:	9a05      	ldrlt	r2, [sp, #20]
 8007d16:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8007d1a:	eba2 0809 	sublt.w	r8, r2, r9
 8007d1e:	464a      	movge	r2, r9
 8007d20:	bfb8      	it	lt
 8007d22:	2200      	movlt	r2, #0
 8007d24:	e73b      	b.n	8007b9e <_dtoa_r+0x666>
 8007d26:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007d2a:	9f08      	ldr	r7, [sp, #32]
 8007d2c:	461c      	mov	r4, r3
 8007d2e:	e743      	b.n	8007bb8 <_dtoa_r+0x680>
 8007d30:	461a      	mov	r2, r3
 8007d32:	e76f      	b.n	8007c14 <_dtoa_r+0x6dc>
 8007d34:	9b07      	ldr	r3, [sp, #28]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	dc18      	bgt.n	8007d6c <_dtoa_r+0x834>
 8007d3a:	9b02      	ldr	r3, [sp, #8]
 8007d3c:	b9b3      	cbnz	r3, 8007d6c <_dtoa_r+0x834>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007d44:	b9a2      	cbnz	r2, 8007d70 <_dtoa_r+0x838>
 8007d46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d4a:	0d12      	lsrs	r2, r2, #20
 8007d4c:	0512      	lsls	r2, r2, #20
 8007d4e:	b18a      	cbz	r2, 8007d74 <_dtoa_r+0x83c>
 8007d50:	9b05      	ldr	r3, [sp, #20]
 8007d52:	3301      	adds	r3, #1
 8007d54:	9305      	str	r3, [sp, #20]
 8007d56:	9b06      	ldr	r3, [sp, #24]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	9306      	str	r3, [sp, #24]
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f47f af6f 	bne.w	8007c46 <_dtoa_r+0x70e>
 8007d68:	2001      	movs	r0, #1
 8007d6a:	e774      	b.n	8007c56 <_dtoa_r+0x71e>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e7f6      	b.n	8007d5e <_dtoa_r+0x826>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	e7f4      	b.n	8007d5e <_dtoa_r+0x826>
 8007d74:	920a      	str	r2, [sp, #40]	; 0x28
 8007d76:	e7f3      	b.n	8007d60 <_dtoa_r+0x828>
 8007d78:	d081      	beq.n	8007c7e <_dtoa_r+0x746>
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	301c      	adds	r0, #28
 8007d7e:	e777      	b.n	8007c70 <_dtoa_r+0x738>
 8007d80:	f1b9 0f00 	cmp.w	r9, #0
 8007d84:	dc37      	bgt.n	8007df6 <_dtoa_r+0x8be>
 8007d86:	9b07      	ldr	r3, [sp, #28]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	dd34      	ble.n	8007df6 <_dtoa_r+0x8be>
 8007d8c:	46ca      	mov	sl, r9
 8007d8e:	f1ba 0f00 	cmp.w	sl, #0
 8007d92:	d10d      	bne.n	8007db0 <_dtoa_r+0x878>
 8007d94:	4621      	mov	r1, r4
 8007d96:	4653      	mov	r3, sl
 8007d98:	2205      	movs	r2, #5
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f000 f9ca 	bl	8008134 <__multadd>
 8007da0:	4601      	mov	r1, r0
 8007da2:	4604      	mov	r4, r0
 8007da4:	4628      	mov	r0, r5
 8007da6:	f000 fbe1 	bl	800856c <__mcmp>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	f73f adde 	bgt.w	800796c <_dtoa_r+0x434>
 8007db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db2:	f8dd 8000 	ldr.w	r8, [sp]
 8007db6:	ea6f 0b03 	mvn.w	fp, r3
 8007dba:	f04f 0900 	mov.w	r9, #0
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f000 f995 	bl	80080f0 <_Bfree>
 8007dc6:	2f00      	cmp	r7, #0
 8007dc8:	f43f aea7 	beq.w	8007b1a <_dtoa_r+0x5e2>
 8007dcc:	f1b9 0f00 	cmp.w	r9, #0
 8007dd0:	d005      	beq.n	8007dde <_dtoa_r+0x8a6>
 8007dd2:	45b9      	cmp	r9, r7
 8007dd4:	d003      	beq.n	8007dde <_dtoa_r+0x8a6>
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f000 f989 	bl	80080f0 <_Bfree>
 8007dde:	4639      	mov	r1, r7
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f985 	bl	80080f0 <_Bfree>
 8007de6:	e698      	b.n	8007b1a <_dtoa_r+0x5e2>
 8007de8:	2400      	movs	r4, #0
 8007dea:	4627      	mov	r7, r4
 8007dec:	e7e0      	b.n	8007db0 <_dtoa_r+0x878>
 8007dee:	46bb      	mov	fp, r7
 8007df0:	4604      	mov	r4, r0
 8007df2:	4607      	mov	r7, r0
 8007df4:	e5ba      	b.n	800796c <_dtoa_r+0x434>
 8007df6:	9b08      	ldr	r3, [sp, #32]
 8007df8:	46ca      	mov	sl, r9
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 8100 	beq.w	8008000 <_dtoa_r+0xac8>
 8007e00:	f1b8 0f00 	cmp.w	r8, #0
 8007e04:	dd05      	ble.n	8007e12 <_dtoa_r+0x8da>
 8007e06:	4639      	mov	r1, r7
 8007e08:	4642      	mov	r2, r8
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f000 fb42 	bl	8008494 <__lshift>
 8007e10:	4607      	mov	r7, r0
 8007e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d05d      	beq.n	8007ed4 <_dtoa_r+0x99c>
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f000 f928 	bl	8008070 <_Balloc>
 8007e20:	4680      	mov	r8, r0
 8007e22:	b928      	cbnz	r0, 8007e30 <_dtoa_r+0x8f8>
 8007e24:	4b82      	ldr	r3, [pc, #520]	; (8008030 <_dtoa_r+0xaf8>)
 8007e26:	4602      	mov	r2, r0
 8007e28:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e2c:	f7ff bb9a 	b.w	8007564 <_dtoa_r+0x2c>
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	3202      	adds	r2, #2
 8007e34:	0092      	lsls	r2, r2, #2
 8007e36:	f107 010c 	add.w	r1, r7, #12
 8007e3a:	300c      	adds	r0, #12
 8007e3c:	f000 f90a 	bl	8008054 <memcpy>
 8007e40:	2201      	movs	r2, #1
 8007e42:	4641      	mov	r1, r8
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 fb25 	bl	8008494 <__lshift>
 8007e4a:	9b00      	ldr	r3, [sp, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	9b00      	ldr	r3, [sp, #0]
 8007e52:	4453      	add	r3, sl
 8007e54:	9309      	str	r3, [sp, #36]	; 0x24
 8007e56:	9b02      	ldr	r3, [sp, #8]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	46b9      	mov	r9, r7
 8007e5e:	9308      	str	r3, [sp, #32]
 8007e60:	4607      	mov	r7, r0
 8007e62:	9b05      	ldr	r3, [sp, #20]
 8007e64:	4621      	mov	r1, r4
 8007e66:	3b01      	subs	r3, #1
 8007e68:	4628      	mov	r0, r5
 8007e6a:	9302      	str	r3, [sp, #8]
 8007e6c:	f7ff fad6 	bl	800741c <quorem>
 8007e70:	4603      	mov	r3, r0
 8007e72:	3330      	adds	r3, #48	; 0x30
 8007e74:	9006      	str	r0, [sp, #24]
 8007e76:	4649      	mov	r1, r9
 8007e78:	4628      	mov	r0, r5
 8007e7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e7c:	f000 fb76 	bl	800856c <__mcmp>
 8007e80:	463a      	mov	r2, r7
 8007e82:	4682      	mov	sl, r0
 8007e84:	4621      	mov	r1, r4
 8007e86:	4630      	mov	r0, r6
 8007e88:	f000 fb8c 	bl	80085a4 <__mdiff>
 8007e8c:	68c2      	ldr	r2, [r0, #12]
 8007e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e90:	4680      	mov	r8, r0
 8007e92:	bb0a      	cbnz	r2, 8007ed8 <_dtoa_r+0x9a0>
 8007e94:	4601      	mov	r1, r0
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 fb68 	bl	800856c <__mcmp>
 8007e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	920e      	str	r2, [sp, #56]	; 0x38
 8007ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ea8:	f000 f922 	bl	80080f0 <_Bfree>
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007eb4:	ea43 0102 	orr.w	r1, r3, r2
 8007eb8:	9b08      	ldr	r3, [sp, #32]
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ebe:	d10d      	bne.n	8007edc <_dtoa_r+0x9a4>
 8007ec0:	2b39      	cmp	r3, #57	; 0x39
 8007ec2:	d029      	beq.n	8007f18 <_dtoa_r+0x9e0>
 8007ec4:	f1ba 0f00 	cmp.w	sl, #0
 8007ec8:	dd01      	ble.n	8007ece <_dtoa_r+0x996>
 8007eca:	9b06      	ldr	r3, [sp, #24]
 8007ecc:	3331      	adds	r3, #49	; 0x31
 8007ece:	9a02      	ldr	r2, [sp, #8]
 8007ed0:	7013      	strb	r3, [r2, #0]
 8007ed2:	e774      	b.n	8007dbe <_dtoa_r+0x886>
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	e7b8      	b.n	8007e4a <_dtoa_r+0x912>
 8007ed8:	2201      	movs	r2, #1
 8007eda:	e7e1      	b.n	8007ea0 <_dtoa_r+0x968>
 8007edc:	f1ba 0f00 	cmp.w	sl, #0
 8007ee0:	db06      	blt.n	8007ef0 <_dtoa_r+0x9b8>
 8007ee2:	9907      	ldr	r1, [sp, #28]
 8007ee4:	ea41 0a0a 	orr.w	sl, r1, sl
 8007ee8:	9908      	ldr	r1, [sp, #32]
 8007eea:	ea5a 0101 	orrs.w	r1, sl, r1
 8007eee:	d120      	bne.n	8007f32 <_dtoa_r+0x9fa>
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	ddec      	ble.n	8007ece <_dtoa_r+0x996>
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	4630      	mov	r0, r6
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	f000 faca 	bl	8008494 <__lshift>
 8007f00:	4621      	mov	r1, r4
 8007f02:	4605      	mov	r5, r0
 8007f04:	f000 fb32 	bl	800856c <__mcmp>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	9b05      	ldr	r3, [sp, #20]
 8007f0c:	dc02      	bgt.n	8007f14 <_dtoa_r+0x9dc>
 8007f0e:	d1de      	bne.n	8007ece <_dtoa_r+0x996>
 8007f10:	07da      	lsls	r2, r3, #31
 8007f12:	d5dc      	bpl.n	8007ece <_dtoa_r+0x996>
 8007f14:	2b39      	cmp	r3, #57	; 0x39
 8007f16:	d1d8      	bne.n	8007eca <_dtoa_r+0x992>
 8007f18:	9a02      	ldr	r2, [sp, #8]
 8007f1a:	2339      	movs	r3, #57	; 0x39
 8007f1c:	7013      	strb	r3, [r2, #0]
 8007f1e:	4643      	mov	r3, r8
 8007f20:	4698      	mov	r8, r3
 8007f22:	3b01      	subs	r3, #1
 8007f24:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007f28:	2a39      	cmp	r2, #57	; 0x39
 8007f2a:	d051      	beq.n	8007fd0 <_dtoa_r+0xa98>
 8007f2c:	3201      	adds	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e745      	b.n	8007dbe <_dtoa_r+0x886>
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	dd03      	ble.n	8007f3e <_dtoa_r+0xa06>
 8007f36:	2b39      	cmp	r3, #57	; 0x39
 8007f38:	d0ee      	beq.n	8007f18 <_dtoa_r+0x9e0>
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	e7c7      	b.n	8007ece <_dtoa_r+0x996>
 8007f3e:	9a05      	ldr	r2, [sp, #20]
 8007f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f42:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f46:	428a      	cmp	r2, r1
 8007f48:	d02b      	beq.n	8007fa2 <_dtoa_r+0xa6a>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	220a      	movs	r2, #10
 8007f50:	4630      	mov	r0, r6
 8007f52:	f000 f8ef 	bl	8008134 <__multadd>
 8007f56:	45b9      	cmp	r9, r7
 8007f58:	4605      	mov	r5, r0
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	f04f 020a 	mov.w	r2, #10
 8007f62:	4649      	mov	r1, r9
 8007f64:	4630      	mov	r0, r6
 8007f66:	d107      	bne.n	8007f78 <_dtoa_r+0xa40>
 8007f68:	f000 f8e4 	bl	8008134 <__multadd>
 8007f6c:	4681      	mov	r9, r0
 8007f6e:	4607      	mov	r7, r0
 8007f70:	9b05      	ldr	r3, [sp, #20]
 8007f72:	3301      	adds	r3, #1
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	e774      	b.n	8007e62 <_dtoa_r+0x92a>
 8007f78:	f000 f8dc 	bl	8008134 <__multadd>
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	4681      	mov	r9, r0
 8007f80:	2300      	movs	r3, #0
 8007f82:	220a      	movs	r2, #10
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 f8d5 	bl	8008134 <__multadd>
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	e7f0      	b.n	8007f70 <_dtoa_r+0xa38>
 8007f8e:	f1ba 0f00 	cmp.w	sl, #0
 8007f92:	9a00      	ldr	r2, [sp, #0]
 8007f94:	bfcc      	ite	gt
 8007f96:	46d0      	movgt	r8, sl
 8007f98:	f04f 0801 	movle.w	r8, #1
 8007f9c:	4490      	add	r8, r2
 8007f9e:	f04f 0900 	mov.w	r9, #0
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	9302      	str	r3, [sp, #8]
 8007faa:	f000 fa73 	bl	8008494 <__lshift>
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	f000 fadb 	bl	800856c <__mcmp>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	dcb1      	bgt.n	8007f1e <_dtoa_r+0x9e6>
 8007fba:	d102      	bne.n	8007fc2 <_dtoa_r+0xa8a>
 8007fbc:	9b02      	ldr	r3, [sp, #8]
 8007fbe:	07db      	lsls	r3, r3, #31
 8007fc0:	d4ad      	bmi.n	8007f1e <_dtoa_r+0x9e6>
 8007fc2:	4643      	mov	r3, r8
 8007fc4:	4698      	mov	r8, r3
 8007fc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fca:	2a30      	cmp	r2, #48	; 0x30
 8007fcc:	d0fa      	beq.n	8007fc4 <_dtoa_r+0xa8c>
 8007fce:	e6f6      	b.n	8007dbe <_dtoa_r+0x886>
 8007fd0:	9a00      	ldr	r2, [sp, #0]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d1a4      	bne.n	8007f20 <_dtoa_r+0x9e8>
 8007fd6:	f10b 0b01 	add.w	fp, fp, #1
 8007fda:	2331      	movs	r3, #49	; 0x31
 8007fdc:	e778      	b.n	8007ed0 <_dtoa_r+0x998>
 8007fde:	4b15      	ldr	r3, [pc, #84]	; (8008034 <_dtoa_r+0xafc>)
 8007fe0:	f7ff bb12 	b.w	8007608 <_dtoa_r+0xd0>
 8007fe4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f47f aaee 	bne.w	80075c8 <_dtoa_r+0x90>
 8007fec:	4b12      	ldr	r3, [pc, #72]	; (8008038 <_dtoa_r+0xb00>)
 8007fee:	f7ff bb0b 	b.w	8007608 <_dtoa_r+0xd0>
 8007ff2:	f1ba 0f00 	cmp.w	sl, #0
 8007ff6:	dc03      	bgt.n	8008000 <_dtoa_r+0xac8>
 8007ff8:	9b07      	ldr	r3, [sp, #28]
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	f73f aec7 	bgt.w	8007d8e <_dtoa_r+0x856>
 8008000:	f8dd 8000 	ldr.w	r8, [sp]
 8008004:	4621      	mov	r1, r4
 8008006:	4628      	mov	r0, r5
 8008008:	f7ff fa08 	bl	800741c <quorem>
 800800c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008010:	f808 3b01 	strb.w	r3, [r8], #1
 8008014:	9a00      	ldr	r2, [sp, #0]
 8008016:	eba8 0202 	sub.w	r2, r8, r2
 800801a:	4592      	cmp	sl, r2
 800801c:	ddb7      	ble.n	8007f8e <_dtoa_r+0xa56>
 800801e:	4629      	mov	r1, r5
 8008020:	2300      	movs	r3, #0
 8008022:	220a      	movs	r2, #10
 8008024:	4630      	mov	r0, r6
 8008026:	f000 f885 	bl	8008134 <__multadd>
 800802a:	4605      	mov	r5, r0
 800802c:	e7ea      	b.n	8008004 <_dtoa_r+0xacc>
 800802e:	bf00      	nop
 8008030:	0801b8ab 	.word	0x0801b8ab
 8008034:	0801b804 	.word	0x0801b804
 8008038:	0801b828 	.word	0x0801b828

0800803c <_localeconv_r>:
 800803c:	4800      	ldr	r0, [pc, #0]	; (8008040 <_localeconv_r+0x4>)
 800803e:	4770      	bx	lr
 8008040:	200001e8 	.word	0x200001e8

08008044 <malloc>:
 8008044:	4b02      	ldr	r3, [pc, #8]	; (8008050 <malloc+0xc>)
 8008046:	4601      	mov	r1, r0
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	f000 bbef 	b.w	800882c <_malloc_r>
 800804e:	bf00      	nop
 8008050:	20000094 	.word	0x20000094

08008054 <memcpy>:
 8008054:	440a      	add	r2, r1
 8008056:	4291      	cmp	r1, r2
 8008058:	f100 33ff 	add.w	r3, r0, #4294967295
 800805c:	d100      	bne.n	8008060 <memcpy+0xc>
 800805e:	4770      	bx	lr
 8008060:	b510      	push	{r4, lr}
 8008062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008066:	f803 4f01 	strb.w	r4, [r3, #1]!
 800806a:	4291      	cmp	r1, r2
 800806c:	d1f9      	bne.n	8008062 <memcpy+0xe>
 800806e:	bd10      	pop	{r4, pc}

08008070 <_Balloc>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	b976      	cbnz	r6, 8008098 <_Balloc+0x28>
 800807a:	2010      	movs	r0, #16
 800807c:	f7ff ffe2 	bl	8008044 <malloc>
 8008080:	4602      	mov	r2, r0
 8008082:	6260      	str	r0, [r4, #36]	; 0x24
 8008084:	b920      	cbnz	r0, 8008090 <_Balloc+0x20>
 8008086:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <_Balloc+0x78>)
 8008088:	4818      	ldr	r0, [pc, #96]	; (80080ec <_Balloc+0x7c>)
 800808a:	2166      	movs	r1, #102	; 0x66
 800808c:	f000 fd94 	bl	8008bb8 <__assert_func>
 8008090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008094:	6006      	str	r6, [r0, #0]
 8008096:	60c6      	str	r6, [r0, #12]
 8008098:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800809a:	68f3      	ldr	r3, [r6, #12]
 800809c:	b183      	cbz	r3, 80080c0 <_Balloc+0x50>
 800809e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080a6:	b9b8      	cbnz	r0, 80080d8 <_Balloc+0x68>
 80080a8:	2101      	movs	r1, #1
 80080aa:	fa01 f605 	lsl.w	r6, r1, r5
 80080ae:	1d72      	adds	r2, r6, #5
 80080b0:	0092      	lsls	r2, r2, #2
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fb5a 	bl	800876c <_calloc_r>
 80080b8:	b160      	cbz	r0, 80080d4 <_Balloc+0x64>
 80080ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080be:	e00e      	b.n	80080de <_Balloc+0x6e>
 80080c0:	2221      	movs	r2, #33	; 0x21
 80080c2:	2104      	movs	r1, #4
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fb51 	bl	800876c <_calloc_r>
 80080ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080cc:	60f0      	str	r0, [r6, #12]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e4      	bne.n	800809e <_Balloc+0x2e>
 80080d4:	2000      	movs	r0, #0
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	6802      	ldr	r2, [r0, #0]
 80080da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080de:	2300      	movs	r3, #0
 80080e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080e4:	e7f7      	b.n	80080d6 <_Balloc+0x66>
 80080e6:	bf00      	nop
 80080e8:	0801b835 	.word	0x0801b835
 80080ec:	0801b8bc 	.word	0x0801b8bc

080080f0 <_Bfree>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	b976      	cbnz	r6, 8008118 <_Bfree+0x28>
 80080fa:	2010      	movs	r0, #16
 80080fc:	f7ff ffa2 	bl	8008044 <malloc>
 8008100:	4602      	mov	r2, r0
 8008102:	6268      	str	r0, [r5, #36]	; 0x24
 8008104:	b920      	cbnz	r0, 8008110 <_Bfree+0x20>
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <_Bfree+0x3c>)
 8008108:	4809      	ldr	r0, [pc, #36]	; (8008130 <_Bfree+0x40>)
 800810a:	218a      	movs	r1, #138	; 0x8a
 800810c:	f000 fd54 	bl	8008bb8 <__assert_func>
 8008110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008114:	6006      	str	r6, [r0, #0]
 8008116:	60c6      	str	r6, [r0, #12]
 8008118:	b13c      	cbz	r4, 800812a <_Bfree+0x3a>
 800811a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800811c:	6862      	ldr	r2, [r4, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008124:	6021      	str	r1, [r4, #0]
 8008126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	0801b835 	.word	0x0801b835
 8008130:	0801b8bc 	.word	0x0801b8bc

08008134 <__multadd>:
 8008134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008138:	690e      	ldr	r6, [r1, #16]
 800813a:	4607      	mov	r7, r0
 800813c:	4698      	mov	r8, r3
 800813e:	460c      	mov	r4, r1
 8008140:	f101 0014 	add.w	r0, r1, #20
 8008144:	2300      	movs	r3, #0
 8008146:	6805      	ldr	r5, [r0, #0]
 8008148:	b2a9      	uxth	r1, r5
 800814a:	fb02 8101 	mla	r1, r2, r1, r8
 800814e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008152:	0c2d      	lsrs	r5, r5, #16
 8008154:	fb02 c505 	mla	r5, r2, r5, ip
 8008158:	b289      	uxth	r1, r1
 800815a:	3301      	adds	r3, #1
 800815c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008160:	429e      	cmp	r6, r3
 8008162:	f840 1b04 	str.w	r1, [r0], #4
 8008166:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800816a:	dcec      	bgt.n	8008146 <__multadd+0x12>
 800816c:	f1b8 0f00 	cmp.w	r8, #0
 8008170:	d022      	beq.n	80081b8 <__multadd+0x84>
 8008172:	68a3      	ldr	r3, [r4, #8]
 8008174:	42b3      	cmp	r3, r6
 8008176:	dc19      	bgt.n	80081ac <__multadd+0x78>
 8008178:	6861      	ldr	r1, [r4, #4]
 800817a:	4638      	mov	r0, r7
 800817c:	3101      	adds	r1, #1
 800817e:	f7ff ff77 	bl	8008070 <_Balloc>
 8008182:	4605      	mov	r5, r0
 8008184:	b928      	cbnz	r0, 8008192 <__multadd+0x5e>
 8008186:	4602      	mov	r2, r0
 8008188:	4b0d      	ldr	r3, [pc, #52]	; (80081c0 <__multadd+0x8c>)
 800818a:	480e      	ldr	r0, [pc, #56]	; (80081c4 <__multadd+0x90>)
 800818c:	21b5      	movs	r1, #181	; 0xb5
 800818e:	f000 fd13 	bl	8008bb8 <__assert_func>
 8008192:	6922      	ldr	r2, [r4, #16]
 8008194:	3202      	adds	r2, #2
 8008196:	f104 010c 	add.w	r1, r4, #12
 800819a:	0092      	lsls	r2, r2, #2
 800819c:	300c      	adds	r0, #12
 800819e:	f7ff ff59 	bl	8008054 <memcpy>
 80081a2:	4621      	mov	r1, r4
 80081a4:	4638      	mov	r0, r7
 80081a6:	f7ff ffa3 	bl	80080f0 <_Bfree>
 80081aa:	462c      	mov	r4, r5
 80081ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80081b0:	3601      	adds	r6, #1
 80081b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80081b6:	6126      	str	r6, [r4, #16]
 80081b8:	4620      	mov	r0, r4
 80081ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081be:	bf00      	nop
 80081c0:	0801b8ab 	.word	0x0801b8ab
 80081c4:	0801b8bc 	.word	0x0801b8bc

080081c8 <__hi0bits>:
 80081c8:	0c03      	lsrs	r3, r0, #16
 80081ca:	041b      	lsls	r3, r3, #16
 80081cc:	b9d3      	cbnz	r3, 8008204 <__hi0bits+0x3c>
 80081ce:	0400      	lsls	r0, r0, #16
 80081d0:	2310      	movs	r3, #16
 80081d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081d6:	bf04      	itt	eq
 80081d8:	0200      	lsleq	r0, r0, #8
 80081da:	3308      	addeq	r3, #8
 80081dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081e0:	bf04      	itt	eq
 80081e2:	0100      	lsleq	r0, r0, #4
 80081e4:	3304      	addeq	r3, #4
 80081e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081ea:	bf04      	itt	eq
 80081ec:	0080      	lsleq	r0, r0, #2
 80081ee:	3302      	addeq	r3, #2
 80081f0:	2800      	cmp	r0, #0
 80081f2:	db05      	blt.n	8008200 <__hi0bits+0x38>
 80081f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081f8:	f103 0301 	add.w	r3, r3, #1
 80081fc:	bf08      	it	eq
 80081fe:	2320      	moveq	r3, #32
 8008200:	4618      	mov	r0, r3
 8008202:	4770      	bx	lr
 8008204:	2300      	movs	r3, #0
 8008206:	e7e4      	b.n	80081d2 <__hi0bits+0xa>

08008208 <__lo0bits>:
 8008208:	6803      	ldr	r3, [r0, #0]
 800820a:	f013 0207 	ands.w	r2, r3, #7
 800820e:	4601      	mov	r1, r0
 8008210:	d00b      	beq.n	800822a <__lo0bits+0x22>
 8008212:	07da      	lsls	r2, r3, #31
 8008214:	d424      	bmi.n	8008260 <__lo0bits+0x58>
 8008216:	0798      	lsls	r0, r3, #30
 8008218:	bf49      	itett	mi
 800821a:	085b      	lsrmi	r3, r3, #1
 800821c:	089b      	lsrpl	r3, r3, #2
 800821e:	2001      	movmi	r0, #1
 8008220:	600b      	strmi	r3, [r1, #0]
 8008222:	bf5c      	itt	pl
 8008224:	600b      	strpl	r3, [r1, #0]
 8008226:	2002      	movpl	r0, #2
 8008228:	4770      	bx	lr
 800822a:	b298      	uxth	r0, r3
 800822c:	b9b0      	cbnz	r0, 800825c <__lo0bits+0x54>
 800822e:	0c1b      	lsrs	r3, r3, #16
 8008230:	2010      	movs	r0, #16
 8008232:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008236:	bf04      	itt	eq
 8008238:	0a1b      	lsreq	r3, r3, #8
 800823a:	3008      	addeq	r0, #8
 800823c:	071a      	lsls	r2, r3, #28
 800823e:	bf04      	itt	eq
 8008240:	091b      	lsreq	r3, r3, #4
 8008242:	3004      	addeq	r0, #4
 8008244:	079a      	lsls	r2, r3, #30
 8008246:	bf04      	itt	eq
 8008248:	089b      	lsreq	r3, r3, #2
 800824a:	3002      	addeq	r0, #2
 800824c:	07da      	lsls	r2, r3, #31
 800824e:	d403      	bmi.n	8008258 <__lo0bits+0x50>
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	f100 0001 	add.w	r0, r0, #1
 8008256:	d005      	beq.n	8008264 <__lo0bits+0x5c>
 8008258:	600b      	str	r3, [r1, #0]
 800825a:	4770      	bx	lr
 800825c:	4610      	mov	r0, r2
 800825e:	e7e8      	b.n	8008232 <__lo0bits+0x2a>
 8008260:	2000      	movs	r0, #0
 8008262:	4770      	bx	lr
 8008264:	2020      	movs	r0, #32
 8008266:	4770      	bx	lr

08008268 <__i2b>:
 8008268:	b510      	push	{r4, lr}
 800826a:	460c      	mov	r4, r1
 800826c:	2101      	movs	r1, #1
 800826e:	f7ff feff 	bl	8008070 <_Balloc>
 8008272:	4602      	mov	r2, r0
 8008274:	b928      	cbnz	r0, 8008282 <__i2b+0x1a>
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <__i2b+0x24>)
 8008278:	4805      	ldr	r0, [pc, #20]	; (8008290 <__i2b+0x28>)
 800827a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800827e:	f000 fc9b 	bl	8008bb8 <__assert_func>
 8008282:	2301      	movs	r3, #1
 8008284:	6144      	str	r4, [r0, #20]
 8008286:	6103      	str	r3, [r0, #16]
 8008288:	bd10      	pop	{r4, pc}
 800828a:	bf00      	nop
 800828c:	0801b8ab 	.word	0x0801b8ab
 8008290:	0801b8bc 	.word	0x0801b8bc

08008294 <__multiply>:
 8008294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	4614      	mov	r4, r2
 800829a:	690a      	ldr	r2, [r1, #16]
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	429a      	cmp	r2, r3
 80082a0:	bfb8      	it	lt
 80082a2:	460b      	movlt	r3, r1
 80082a4:	460d      	mov	r5, r1
 80082a6:	bfbc      	itt	lt
 80082a8:	4625      	movlt	r5, r4
 80082aa:	461c      	movlt	r4, r3
 80082ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80082b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80082b4:	68ab      	ldr	r3, [r5, #8]
 80082b6:	6869      	ldr	r1, [r5, #4]
 80082b8:	eb0a 0709 	add.w	r7, sl, r9
 80082bc:	42bb      	cmp	r3, r7
 80082be:	b085      	sub	sp, #20
 80082c0:	bfb8      	it	lt
 80082c2:	3101      	addlt	r1, #1
 80082c4:	f7ff fed4 	bl	8008070 <_Balloc>
 80082c8:	b930      	cbnz	r0, 80082d8 <__multiply+0x44>
 80082ca:	4602      	mov	r2, r0
 80082cc:	4b42      	ldr	r3, [pc, #264]	; (80083d8 <__multiply+0x144>)
 80082ce:	4843      	ldr	r0, [pc, #268]	; (80083dc <__multiply+0x148>)
 80082d0:	f240 115d 	movw	r1, #349	; 0x15d
 80082d4:	f000 fc70 	bl	8008bb8 <__assert_func>
 80082d8:	f100 0614 	add.w	r6, r0, #20
 80082dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80082e0:	4633      	mov	r3, r6
 80082e2:	2200      	movs	r2, #0
 80082e4:	4543      	cmp	r3, r8
 80082e6:	d31e      	bcc.n	8008326 <__multiply+0x92>
 80082e8:	f105 0c14 	add.w	ip, r5, #20
 80082ec:	f104 0314 	add.w	r3, r4, #20
 80082f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80082f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80082f8:	9202      	str	r2, [sp, #8]
 80082fa:	ebac 0205 	sub.w	r2, ip, r5
 80082fe:	3a15      	subs	r2, #21
 8008300:	f022 0203 	bic.w	r2, r2, #3
 8008304:	3204      	adds	r2, #4
 8008306:	f105 0115 	add.w	r1, r5, #21
 800830a:	458c      	cmp	ip, r1
 800830c:	bf38      	it	cc
 800830e:	2204      	movcc	r2, #4
 8008310:	9201      	str	r2, [sp, #4]
 8008312:	9a02      	ldr	r2, [sp, #8]
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	429a      	cmp	r2, r3
 8008318:	d808      	bhi.n	800832c <__multiply+0x98>
 800831a:	2f00      	cmp	r7, #0
 800831c:	dc55      	bgt.n	80083ca <__multiply+0x136>
 800831e:	6107      	str	r7, [r0, #16]
 8008320:	b005      	add	sp, #20
 8008322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008326:	f843 2b04 	str.w	r2, [r3], #4
 800832a:	e7db      	b.n	80082e4 <__multiply+0x50>
 800832c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008330:	f1ba 0f00 	cmp.w	sl, #0
 8008334:	d020      	beq.n	8008378 <__multiply+0xe4>
 8008336:	f105 0e14 	add.w	lr, r5, #20
 800833a:	46b1      	mov	r9, r6
 800833c:	2200      	movs	r2, #0
 800833e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008342:	f8d9 b000 	ldr.w	fp, [r9]
 8008346:	b2a1      	uxth	r1, r4
 8008348:	fa1f fb8b 	uxth.w	fp, fp
 800834c:	fb0a b101 	mla	r1, sl, r1, fp
 8008350:	4411      	add	r1, r2
 8008352:	f8d9 2000 	ldr.w	r2, [r9]
 8008356:	0c24      	lsrs	r4, r4, #16
 8008358:	0c12      	lsrs	r2, r2, #16
 800835a:	fb0a 2404 	mla	r4, sl, r4, r2
 800835e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008362:	b289      	uxth	r1, r1
 8008364:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008368:	45f4      	cmp	ip, lr
 800836a:	f849 1b04 	str.w	r1, [r9], #4
 800836e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008372:	d8e4      	bhi.n	800833e <__multiply+0xaa>
 8008374:	9901      	ldr	r1, [sp, #4]
 8008376:	5072      	str	r2, [r6, r1]
 8008378:	9a03      	ldr	r2, [sp, #12]
 800837a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800837e:	3304      	adds	r3, #4
 8008380:	f1b9 0f00 	cmp.w	r9, #0
 8008384:	d01f      	beq.n	80083c6 <__multiply+0x132>
 8008386:	6834      	ldr	r4, [r6, #0]
 8008388:	f105 0114 	add.w	r1, r5, #20
 800838c:	46b6      	mov	lr, r6
 800838e:	f04f 0a00 	mov.w	sl, #0
 8008392:	880a      	ldrh	r2, [r1, #0]
 8008394:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008398:	fb09 b202 	mla	r2, r9, r2, fp
 800839c:	4492      	add	sl, r2
 800839e:	b2a4      	uxth	r4, r4
 80083a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80083a4:	f84e 4b04 	str.w	r4, [lr], #4
 80083a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80083ac:	f8be 2000 	ldrh.w	r2, [lr]
 80083b0:	0c24      	lsrs	r4, r4, #16
 80083b2:	fb09 2404 	mla	r4, r9, r4, r2
 80083b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80083ba:	458c      	cmp	ip, r1
 80083bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083c0:	d8e7      	bhi.n	8008392 <__multiply+0xfe>
 80083c2:	9a01      	ldr	r2, [sp, #4]
 80083c4:	50b4      	str	r4, [r6, r2]
 80083c6:	3604      	adds	r6, #4
 80083c8:	e7a3      	b.n	8008312 <__multiply+0x7e>
 80083ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1a5      	bne.n	800831e <__multiply+0x8a>
 80083d2:	3f01      	subs	r7, #1
 80083d4:	e7a1      	b.n	800831a <__multiply+0x86>
 80083d6:	bf00      	nop
 80083d8:	0801b8ab 	.word	0x0801b8ab
 80083dc:	0801b8bc 	.word	0x0801b8bc

080083e0 <__pow5mult>:
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	4615      	mov	r5, r2
 80083e6:	f012 0203 	ands.w	r2, r2, #3
 80083ea:	4606      	mov	r6, r0
 80083ec:	460f      	mov	r7, r1
 80083ee:	d007      	beq.n	8008400 <__pow5mult+0x20>
 80083f0:	4c25      	ldr	r4, [pc, #148]	; (8008488 <__pow5mult+0xa8>)
 80083f2:	3a01      	subs	r2, #1
 80083f4:	2300      	movs	r3, #0
 80083f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083fa:	f7ff fe9b 	bl	8008134 <__multadd>
 80083fe:	4607      	mov	r7, r0
 8008400:	10ad      	asrs	r5, r5, #2
 8008402:	d03d      	beq.n	8008480 <__pow5mult+0xa0>
 8008404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008406:	b97c      	cbnz	r4, 8008428 <__pow5mult+0x48>
 8008408:	2010      	movs	r0, #16
 800840a:	f7ff fe1b 	bl	8008044 <malloc>
 800840e:	4602      	mov	r2, r0
 8008410:	6270      	str	r0, [r6, #36]	; 0x24
 8008412:	b928      	cbnz	r0, 8008420 <__pow5mult+0x40>
 8008414:	4b1d      	ldr	r3, [pc, #116]	; (800848c <__pow5mult+0xac>)
 8008416:	481e      	ldr	r0, [pc, #120]	; (8008490 <__pow5mult+0xb0>)
 8008418:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800841c:	f000 fbcc 	bl	8008bb8 <__assert_func>
 8008420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008424:	6004      	str	r4, [r0, #0]
 8008426:	60c4      	str	r4, [r0, #12]
 8008428:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800842c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008430:	b94c      	cbnz	r4, 8008446 <__pow5mult+0x66>
 8008432:	f240 2171 	movw	r1, #625	; 0x271
 8008436:	4630      	mov	r0, r6
 8008438:	f7ff ff16 	bl	8008268 <__i2b>
 800843c:	2300      	movs	r3, #0
 800843e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008442:	4604      	mov	r4, r0
 8008444:	6003      	str	r3, [r0, #0]
 8008446:	f04f 0900 	mov.w	r9, #0
 800844a:	07eb      	lsls	r3, r5, #31
 800844c:	d50a      	bpl.n	8008464 <__pow5mult+0x84>
 800844e:	4639      	mov	r1, r7
 8008450:	4622      	mov	r2, r4
 8008452:	4630      	mov	r0, r6
 8008454:	f7ff ff1e 	bl	8008294 <__multiply>
 8008458:	4639      	mov	r1, r7
 800845a:	4680      	mov	r8, r0
 800845c:	4630      	mov	r0, r6
 800845e:	f7ff fe47 	bl	80080f0 <_Bfree>
 8008462:	4647      	mov	r7, r8
 8008464:	106d      	asrs	r5, r5, #1
 8008466:	d00b      	beq.n	8008480 <__pow5mult+0xa0>
 8008468:	6820      	ldr	r0, [r4, #0]
 800846a:	b938      	cbnz	r0, 800847c <__pow5mult+0x9c>
 800846c:	4622      	mov	r2, r4
 800846e:	4621      	mov	r1, r4
 8008470:	4630      	mov	r0, r6
 8008472:	f7ff ff0f 	bl	8008294 <__multiply>
 8008476:	6020      	str	r0, [r4, #0]
 8008478:	f8c0 9000 	str.w	r9, [r0]
 800847c:	4604      	mov	r4, r0
 800847e:	e7e4      	b.n	800844a <__pow5mult+0x6a>
 8008480:	4638      	mov	r0, r7
 8008482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008486:	bf00      	nop
 8008488:	0801ba10 	.word	0x0801ba10
 800848c:	0801b835 	.word	0x0801b835
 8008490:	0801b8bc 	.word	0x0801b8bc

08008494 <__lshift>:
 8008494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008498:	460c      	mov	r4, r1
 800849a:	6849      	ldr	r1, [r1, #4]
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	4607      	mov	r7, r0
 80084a6:	4691      	mov	r9, r2
 80084a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084ac:	f108 0601 	add.w	r6, r8, #1
 80084b0:	42b3      	cmp	r3, r6
 80084b2:	db0b      	blt.n	80084cc <__lshift+0x38>
 80084b4:	4638      	mov	r0, r7
 80084b6:	f7ff fddb 	bl	8008070 <_Balloc>
 80084ba:	4605      	mov	r5, r0
 80084bc:	b948      	cbnz	r0, 80084d2 <__lshift+0x3e>
 80084be:	4602      	mov	r2, r0
 80084c0:	4b28      	ldr	r3, [pc, #160]	; (8008564 <__lshift+0xd0>)
 80084c2:	4829      	ldr	r0, [pc, #164]	; (8008568 <__lshift+0xd4>)
 80084c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084c8:	f000 fb76 	bl	8008bb8 <__assert_func>
 80084cc:	3101      	adds	r1, #1
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	e7ee      	b.n	80084b0 <__lshift+0x1c>
 80084d2:	2300      	movs	r3, #0
 80084d4:	f100 0114 	add.w	r1, r0, #20
 80084d8:	f100 0210 	add.w	r2, r0, #16
 80084dc:	4618      	mov	r0, r3
 80084de:	4553      	cmp	r3, sl
 80084e0:	db33      	blt.n	800854a <__lshift+0xb6>
 80084e2:	6920      	ldr	r0, [r4, #16]
 80084e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084e8:	f104 0314 	add.w	r3, r4, #20
 80084ec:	f019 091f 	ands.w	r9, r9, #31
 80084f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084f8:	d02b      	beq.n	8008552 <__lshift+0xbe>
 80084fa:	f1c9 0e20 	rsb	lr, r9, #32
 80084fe:	468a      	mov	sl, r1
 8008500:	2200      	movs	r2, #0
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	fa00 f009 	lsl.w	r0, r0, r9
 8008508:	4302      	orrs	r2, r0
 800850a:	f84a 2b04 	str.w	r2, [sl], #4
 800850e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008512:	459c      	cmp	ip, r3
 8008514:	fa22 f20e 	lsr.w	r2, r2, lr
 8008518:	d8f3      	bhi.n	8008502 <__lshift+0x6e>
 800851a:	ebac 0304 	sub.w	r3, ip, r4
 800851e:	3b15      	subs	r3, #21
 8008520:	f023 0303 	bic.w	r3, r3, #3
 8008524:	3304      	adds	r3, #4
 8008526:	f104 0015 	add.w	r0, r4, #21
 800852a:	4584      	cmp	ip, r0
 800852c:	bf38      	it	cc
 800852e:	2304      	movcc	r3, #4
 8008530:	50ca      	str	r2, [r1, r3]
 8008532:	b10a      	cbz	r2, 8008538 <__lshift+0xa4>
 8008534:	f108 0602 	add.w	r6, r8, #2
 8008538:	3e01      	subs	r6, #1
 800853a:	4638      	mov	r0, r7
 800853c:	612e      	str	r6, [r5, #16]
 800853e:	4621      	mov	r1, r4
 8008540:	f7ff fdd6 	bl	80080f0 <_Bfree>
 8008544:	4628      	mov	r0, r5
 8008546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854a:	f842 0f04 	str.w	r0, [r2, #4]!
 800854e:	3301      	adds	r3, #1
 8008550:	e7c5      	b.n	80084de <__lshift+0x4a>
 8008552:	3904      	subs	r1, #4
 8008554:	f853 2b04 	ldr.w	r2, [r3], #4
 8008558:	f841 2f04 	str.w	r2, [r1, #4]!
 800855c:	459c      	cmp	ip, r3
 800855e:	d8f9      	bhi.n	8008554 <__lshift+0xc0>
 8008560:	e7ea      	b.n	8008538 <__lshift+0xa4>
 8008562:	bf00      	nop
 8008564:	0801b8ab 	.word	0x0801b8ab
 8008568:	0801b8bc 	.word	0x0801b8bc

0800856c <__mcmp>:
 800856c:	b530      	push	{r4, r5, lr}
 800856e:	6902      	ldr	r2, [r0, #16]
 8008570:	690c      	ldr	r4, [r1, #16]
 8008572:	1b12      	subs	r2, r2, r4
 8008574:	d10e      	bne.n	8008594 <__mcmp+0x28>
 8008576:	f100 0314 	add.w	r3, r0, #20
 800857a:	3114      	adds	r1, #20
 800857c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008584:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008588:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800858c:	42a5      	cmp	r5, r4
 800858e:	d003      	beq.n	8008598 <__mcmp+0x2c>
 8008590:	d305      	bcc.n	800859e <__mcmp+0x32>
 8008592:	2201      	movs	r2, #1
 8008594:	4610      	mov	r0, r2
 8008596:	bd30      	pop	{r4, r5, pc}
 8008598:	4283      	cmp	r3, r0
 800859a:	d3f3      	bcc.n	8008584 <__mcmp+0x18>
 800859c:	e7fa      	b.n	8008594 <__mcmp+0x28>
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	e7f7      	b.n	8008594 <__mcmp+0x28>

080085a4 <__mdiff>:
 80085a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	460c      	mov	r4, r1
 80085aa:	4606      	mov	r6, r0
 80085ac:	4611      	mov	r1, r2
 80085ae:	4620      	mov	r0, r4
 80085b0:	4617      	mov	r7, r2
 80085b2:	f7ff ffdb 	bl	800856c <__mcmp>
 80085b6:	1e05      	subs	r5, r0, #0
 80085b8:	d110      	bne.n	80085dc <__mdiff+0x38>
 80085ba:	4629      	mov	r1, r5
 80085bc:	4630      	mov	r0, r6
 80085be:	f7ff fd57 	bl	8008070 <_Balloc>
 80085c2:	b930      	cbnz	r0, 80085d2 <__mdiff+0x2e>
 80085c4:	4b39      	ldr	r3, [pc, #228]	; (80086ac <__mdiff+0x108>)
 80085c6:	4602      	mov	r2, r0
 80085c8:	f240 2132 	movw	r1, #562	; 0x232
 80085cc:	4838      	ldr	r0, [pc, #224]	; (80086b0 <__mdiff+0x10c>)
 80085ce:	f000 faf3 	bl	8008bb8 <__assert_func>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085dc:	bfa4      	itt	ge
 80085de:	463b      	movge	r3, r7
 80085e0:	4627      	movge	r7, r4
 80085e2:	4630      	mov	r0, r6
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	bfa6      	itte	ge
 80085e8:	461c      	movge	r4, r3
 80085ea:	2500      	movge	r5, #0
 80085ec:	2501      	movlt	r5, #1
 80085ee:	f7ff fd3f 	bl	8008070 <_Balloc>
 80085f2:	b920      	cbnz	r0, 80085fe <__mdiff+0x5a>
 80085f4:	4b2d      	ldr	r3, [pc, #180]	; (80086ac <__mdiff+0x108>)
 80085f6:	4602      	mov	r2, r0
 80085f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085fc:	e7e6      	b.n	80085cc <__mdiff+0x28>
 80085fe:	693e      	ldr	r6, [r7, #16]
 8008600:	60c5      	str	r5, [r0, #12]
 8008602:	6925      	ldr	r5, [r4, #16]
 8008604:	f107 0114 	add.w	r1, r7, #20
 8008608:	f104 0914 	add.w	r9, r4, #20
 800860c:	f100 0e14 	add.w	lr, r0, #20
 8008610:	f107 0210 	add.w	r2, r7, #16
 8008614:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008618:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800861c:	46f2      	mov	sl, lr
 800861e:	2700      	movs	r7, #0
 8008620:	f859 3b04 	ldr.w	r3, [r9], #4
 8008624:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008628:	fa1f f883 	uxth.w	r8, r3
 800862c:	fa17 f78b 	uxtah	r7, r7, fp
 8008630:	0c1b      	lsrs	r3, r3, #16
 8008632:	eba7 0808 	sub.w	r8, r7, r8
 8008636:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800863a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800863e:	fa1f f888 	uxth.w	r8, r8
 8008642:	141f      	asrs	r7, r3, #16
 8008644:	454d      	cmp	r5, r9
 8008646:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800864a:	f84a 3b04 	str.w	r3, [sl], #4
 800864e:	d8e7      	bhi.n	8008620 <__mdiff+0x7c>
 8008650:	1b2b      	subs	r3, r5, r4
 8008652:	3b15      	subs	r3, #21
 8008654:	f023 0303 	bic.w	r3, r3, #3
 8008658:	3304      	adds	r3, #4
 800865a:	3415      	adds	r4, #21
 800865c:	42a5      	cmp	r5, r4
 800865e:	bf38      	it	cc
 8008660:	2304      	movcc	r3, #4
 8008662:	4419      	add	r1, r3
 8008664:	4473      	add	r3, lr
 8008666:	469e      	mov	lr, r3
 8008668:	460d      	mov	r5, r1
 800866a:	4565      	cmp	r5, ip
 800866c:	d30e      	bcc.n	800868c <__mdiff+0xe8>
 800866e:	f10c 0203 	add.w	r2, ip, #3
 8008672:	1a52      	subs	r2, r2, r1
 8008674:	f022 0203 	bic.w	r2, r2, #3
 8008678:	3903      	subs	r1, #3
 800867a:	458c      	cmp	ip, r1
 800867c:	bf38      	it	cc
 800867e:	2200      	movcc	r2, #0
 8008680:	441a      	add	r2, r3
 8008682:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008686:	b17b      	cbz	r3, 80086a8 <__mdiff+0x104>
 8008688:	6106      	str	r6, [r0, #16]
 800868a:	e7a5      	b.n	80085d8 <__mdiff+0x34>
 800868c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008690:	fa17 f488 	uxtah	r4, r7, r8
 8008694:	1422      	asrs	r2, r4, #16
 8008696:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800869a:	b2a4      	uxth	r4, r4
 800869c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80086a0:	f84e 4b04 	str.w	r4, [lr], #4
 80086a4:	1417      	asrs	r7, r2, #16
 80086a6:	e7e0      	b.n	800866a <__mdiff+0xc6>
 80086a8:	3e01      	subs	r6, #1
 80086aa:	e7ea      	b.n	8008682 <__mdiff+0xde>
 80086ac:	0801b8ab 	.word	0x0801b8ab
 80086b0:	0801b8bc 	.word	0x0801b8bc

080086b4 <__d2b>:
 80086b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086b8:	4689      	mov	r9, r1
 80086ba:	2101      	movs	r1, #1
 80086bc:	ec57 6b10 	vmov	r6, r7, d0
 80086c0:	4690      	mov	r8, r2
 80086c2:	f7ff fcd5 	bl	8008070 <_Balloc>
 80086c6:	4604      	mov	r4, r0
 80086c8:	b930      	cbnz	r0, 80086d8 <__d2b+0x24>
 80086ca:	4602      	mov	r2, r0
 80086cc:	4b25      	ldr	r3, [pc, #148]	; (8008764 <__d2b+0xb0>)
 80086ce:	4826      	ldr	r0, [pc, #152]	; (8008768 <__d2b+0xb4>)
 80086d0:	f240 310a 	movw	r1, #778	; 0x30a
 80086d4:	f000 fa70 	bl	8008bb8 <__assert_func>
 80086d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086e0:	bb35      	cbnz	r5, 8008730 <__d2b+0x7c>
 80086e2:	2e00      	cmp	r6, #0
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	d028      	beq.n	800873a <__d2b+0x86>
 80086e8:	4668      	mov	r0, sp
 80086ea:	9600      	str	r6, [sp, #0]
 80086ec:	f7ff fd8c 	bl	8008208 <__lo0bits>
 80086f0:	9900      	ldr	r1, [sp, #0]
 80086f2:	b300      	cbz	r0, 8008736 <__d2b+0x82>
 80086f4:	9a01      	ldr	r2, [sp, #4]
 80086f6:	f1c0 0320 	rsb	r3, r0, #32
 80086fa:	fa02 f303 	lsl.w	r3, r2, r3
 80086fe:	430b      	orrs	r3, r1
 8008700:	40c2      	lsrs	r2, r0
 8008702:	6163      	str	r3, [r4, #20]
 8008704:	9201      	str	r2, [sp, #4]
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	61a3      	str	r3, [r4, #24]
 800870a:	2b00      	cmp	r3, #0
 800870c:	bf14      	ite	ne
 800870e:	2202      	movne	r2, #2
 8008710:	2201      	moveq	r2, #1
 8008712:	6122      	str	r2, [r4, #16]
 8008714:	b1d5      	cbz	r5, 800874c <__d2b+0x98>
 8008716:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800871a:	4405      	add	r5, r0
 800871c:	f8c9 5000 	str.w	r5, [r9]
 8008720:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008724:	f8c8 0000 	str.w	r0, [r8]
 8008728:	4620      	mov	r0, r4
 800872a:	b003      	add	sp, #12
 800872c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008734:	e7d5      	b.n	80086e2 <__d2b+0x2e>
 8008736:	6161      	str	r1, [r4, #20]
 8008738:	e7e5      	b.n	8008706 <__d2b+0x52>
 800873a:	a801      	add	r0, sp, #4
 800873c:	f7ff fd64 	bl	8008208 <__lo0bits>
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	6163      	str	r3, [r4, #20]
 8008744:	2201      	movs	r2, #1
 8008746:	6122      	str	r2, [r4, #16]
 8008748:	3020      	adds	r0, #32
 800874a:	e7e3      	b.n	8008714 <__d2b+0x60>
 800874c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008750:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008754:	f8c9 0000 	str.w	r0, [r9]
 8008758:	6918      	ldr	r0, [r3, #16]
 800875a:	f7ff fd35 	bl	80081c8 <__hi0bits>
 800875e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008762:	e7df      	b.n	8008724 <__d2b+0x70>
 8008764:	0801b8ab 	.word	0x0801b8ab
 8008768:	0801b8bc 	.word	0x0801b8bc

0800876c <_calloc_r>:
 800876c:	b513      	push	{r0, r1, r4, lr}
 800876e:	434a      	muls	r2, r1
 8008770:	4611      	mov	r1, r2
 8008772:	9201      	str	r2, [sp, #4]
 8008774:	f000 f85a 	bl	800882c <_malloc_r>
 8008778:	4604      	mov	r4, r0
 800877a:	b118      	cbz	r0, 8008784 <_calloc_r+0x18>
 800877c:	9a01      	ldr	r2, [sp, #4]
 800877e:	2100      	movs	r1, #0
 8008780:	f7fe f9e2 	bl	8006b48 <memset>
 8008784:	4620      	mov	r0, r4
 8008786:	b002      	add	sp, #8
 8008788:	bd10      	pop	{r4, pc}
	...

0800878c <_free_r>:
 800878c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800878e:	2900      	cmp	r1, #0
 8008790:	d048      	beq.n	8008824 <_free_r+0x98>
 8008792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008796:	9001      	str	r0, [sp, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	f1a1 0404 	sub.w	r4, r1, #4
 800879e:	bfb8      	it	lt
 80087a0:	18e4      	addlt	r4, r4, r3
 80087a2:	f000 fa65 	bl	8008c70 <__malloc_lock>
 80087a6:	4a20      	ldr	r2, [pc, #128]	; (8008828 <_free_r+0x9c>)
 80087a8:	9801      	ldr	r0, [sp, #4]
 80087aa:	6813      	ldr	r3, [r2, #0]
 80087ac:	4615      	mov	r5, r2
 80087ae:	b933      	cbnz	r3, 80087be <_free_r+0x32>
 80087b0:	6063      	str	r3, [r4, #4]
 80087b2:	6014      	str	r4, [r2, #0]
 80087b4:	b003      	add	sp, #12
 80087b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087ba:	f000 ba5f 	b.w	8008c7c <__malloc_unlock>
 80087be:	42a3      	cmp	r3, r4
 80087c0:	d90b      	bls.n	80087da <_free_r+0x4e>
 80087c2:	6821      	ldr	r1, [r4, #0]
 80087c4:	1862      	adds	r2, r4, r1
 80087c6:	4293      	cmp	r3, r2
 80087c8:	bf04      	itt	eq
 80087ca:	681a      	ldreq	r2, [r3, #0]
 80087cc:	685b      	ldreq	r3, [r3, #4]
 80087ce:	6063      	str	r3, [r4, #4]
 80087d0:	bf04      	itt	eq
 80087d2:	1852      	addeq	r2, r2, r1
 80087d4:	6022      	streq	r2, [r4, #0]
 80087d6:	602c      	str	r4, [r5, #0]
 80087d8:	e7ec      	b.n	80087b4 <_free_r+0x28>
 80087da:	461a      	mov	r2, r3
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	b10b      	cbz	r3, 80087e4 <_free_r+0x58>
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d9fa      	bls.n	80087da <_free_r+0x4e>
 80087e4:	6811      	ldr	r1, [r2, #0]
 80087e6:	1855      	adds	r5, r2, r1
 80087e8:	42a5      	cmp	r5, r4
 80087ea:	d10b      	bne.n	8008804 <_free_r+0x78>
 80087ec:	6824      	ldr	r4, [r4, #0]
 80087ee:	4421      	add	r1, r4
 80087f0:	1854      	adds	r4, r2, r1
 80087f2:	42a3      	cmp	r3, r4
 80087f4:	6011      	str	r1, [r2, #0]
 80087f6:	d1dd      	bne.n	80087b4 <_free_r+0x28>
 80087f8:	681c      	ldr	r4, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	6053      	str	r3, [r2, #4]
 80087fe:	4421      	add	r1, r4
 8008800:	6011      	str	r1, [r2, #0]
 8008802:	e7d7      	b.n	80087b4 <_free_r+0x28>
 8008804:	d902      	bls.n	800880c <_free_r+0x80>
 8008806:	230c      	movs	r3, #12
 8008808:	6003      	str	r3, [r0, #0]
 800880a:	e7d3      	b.n	80087b4 <_free_r+0x28>
 800880c:	6825      	ldr	r5, [r4, #0]
 800880e:	1961      	adds	r1, r4, r5
 8008810:	428b      	cmp	r3, r1
 8008812:	bf04      	itt	eq
 8008814:	6819      	ldreq	r1, [r3, #0]
 8008816:	685b      	ldreq	r3, [r3, #4]
 8008818:	6063      	str	r3, [r4, #4]
 800881a:	bf04      	itt	eq
 800881c:	1949      	addeq	r1, r1, r5
 800881e:	6021      	streq	r1, [r4, #0]
 8008820:	6054      	str	r4, [r2, #4]
 8008822:	e7c7      	b.n	80087b4 <_free_r+0x28>
 8008824:	b003      	add	sp, #12
 8008826:	bd30      	pop	{r4, r5, pc}
 8008828:	200002d8 	.word	0x200002d8

0800882c <_malloc_r>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	1ccd      	adds	r5, r1, #3
 8008830:	f025 0503 	bic.w	r5, r5, #3
 8008834:	3508      	adds	r5, #8
 8008836:	2d0c      	cmp	r5, #12
 8008838:	bf38      	it	cc
 800883a:	250c      	movcc	r5, #12
 800883c:	2d00      	cmp	r5, #0
 800883e:	4606      	mov	r6, r0
 8008840:	db01      	blt.n	8008846 <_malloc_r+0x1a>
 8008842:	42a9      	cmp	r1, r5
 8008844:	d903      	bls.n	800884e <_malloc_r+0x22>
 8008846:	230c      	movs	r3, #12
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	2000      	movs	r0, #0
 800884c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800884e:	f000 fa0f 	bl	8008c70 <__malloc_lock>
 8008852:	4921      	ldr	r1, [pc, #132]	; (80088d8 <_malloc_r+0xac>)
 8008854:	680a      	ldr	r2, [r1, #0]
 8008856:	4614      	mov	r4, r2
 8008858:	b99c      	cbnz	r4, 8008882 <_malloc_r+0x56>
 800885a:	4f20      	ldr	r7, [pc, #128]	; (80088dc <_malloc_r+0xb0>)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	b923      	cbnz	r3, 800886a <_malloc_r+0x3e>
 8008860:	4621      	mov	r1, r4
 8008862:	4630      	mov	r0, r6
 8008864:	f000 f998 	bl	8008b98 <_sbrk_r>
 8008868:	6038      	str	r0, [r7, #0]
 800886a:	4629      	mov	r1, r5
 800886c:	4630      	mov	r0, r6
 800886e:	f000 f993 	bl	8008b98 <_sbrk_r>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	d123      	bne.n	80088be <_malloc_r+0x92>
 8008876:	230c      	movs	r3, #12
 8008878:	6033      	str	r3, [r6, #0]
 800887a:	4630      	mov	r0, r6
 800887c:	f000 f9fe 	bl	8008c7c <__malloc_unlock>
 8008880:	e7e3      	b.n	800884a <_malloc_r+0x1e>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	1b5b      	subs	r3, r3, r5
 8008886:	d417      	bmi.n	80088b8 <_malloc_r+0x8c>
 8008888:	2b0b      	cmp	r3, #11
 800888a:	d903      	bls.n	8008894 <_malloc_r+0x68>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	441c      	add	r4, r3
 8008890:	6025      	str	r5, [r4, #0]
 8008892:	e004      	b.n	800889e <_malloc_r+0x72>
 8008894:	6863      	ldr	r3, [r4, #4]
 8008896:	42a2      	cmp	r2, r4
 8008898:	bf0c      	ite	eq
 800889a:	600b      	streq	r3, [r1, #0]
 800889c:	6053      	strne	r3, [r2, #4]
 800889e:	4630      	mov	r0, r6
 80088a0:	f000 f9ec 	bl	8008c7c <__malloc_unlock>
 80088a4:	f104 000b 	add.w	r0, r4, #11
 80088a8:	1d23      	adds	r3, r4, #4
 80088aa:	f020 0007 	bic.w	r0, r0, #7
 80088ae:	1ac2      	subs	r2, r0, r3
 80088b0:	d0cc      	beq.n	800884c <_malloc_r+0x20>
 80088b2:	1a1b      	subs	r3, r3, r0
 80088b4:	50a3      	str	r3, [r4, r2]
 80088b6:	e7c9      	b.n	800884c <_malloc_r+0x20>
 80088b8:	4622      	mov	r2, r4
 80088ba:	6864      	ldr	r4, [r4, #4]
 80088bc:	e7cc      	b.n	8008858 <_malloc_r+0x2c>
 80088be:	1cc4      	adds	r4, r0, #3
 80088c0:	f024 0403 	bic.w	r4, r4, #3
 80088c4:	42a0      	cmp	r0, r4
 80088c6:	d0e3      	beq.n	8008890 <_malloc_r+0x64>
 80088c8:	1a21      	subs	r1, r4, r0
 80088ca:	4630      	mov	r0, r6
 80088cc:	f000 f964 	bl	8008b98 <_sbrk_r>
 80088d0:	3001      	adds	r0, #1
 80088d2:	d1dd      	bne.n	8008890 <_malloc_r+0x64>
 80088d4:	e7cf      	b.n	8008876 <_malloc_r+0x4a>
 80088d6:	bf00      	nop
 80088d8:	200002d8 	.word	0x200002d8
 80088dc:	200002dc 	.word	0x200002dc

080088e0 <__ssputs_r>:
 80088e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e4:	688e      	ldr	r6, [r1, #8]
 80088e6:	429e      	cmp	r6, r3
 80088e8:	4682      	mov	sl, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	4690      	mov	r8, r2
 80088ee:	461f      	mov	r7, r3
 80088f0:	d838      	bhi.n	8008964 <__ssputs_r+0x84>
 80088f2:	898a      	ldrh	r2, [r1, #12]
 80088f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088f8:	d032      	beq.n	8008960 <__ssputs_r+0x80>
 80088fa:	6825      	ldr	r5, [r4, #0]
 80088fc:	6909      	ldr	r1, [r1, #16]
 80088fe:	eba5 0901 	sub.w	r9, r5, r1
 8008902:	6965      	ldr	r5, [r4, #20]
 8008904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800890c:	3301      	adds	r3, #1
 800890e:	444b      	add	r3, r9
 8008910:	106d      	asrs	r5, r5, #1
 8008912:	429d      	cmp	r5, r3
 8008914:	bf38      	it	cc
 8008916:	461d      	movcc	r5, r3
 8008918:	0553      	lsls	r3, r2, #21
 800891a:	d531      	bpl.n	8008980 <__ssputs_r+0xa0>
 800891c:	4629      	mov	r1, r5
 800891e:	f7ff ff85 	bl	800882c <_malloc_r>
 8008922:	4606      	mov	r6, r0
 8008924:	b950      	cbnz	r0, 800893c <__ssputs_r+0x5c>
 8008926:	230c      	movs	r3, #12
 8008928:	f8ca 3000 	str.w	r3, [sl]
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893c:	6921      	ldr	r1, [r4, #16]
 800893e:	464a      	mov	r2, r9
 8008940:	f7ff fb88 	bl	8008054 <memcpy>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800894a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	6126      	str	r6, [r4, #16]
 8008952:	6165      	str	r5, [r4, #20]
 8008954:	444e      	add	r6, r9
 8008956:	eba5 0509 	sub.w	r5, r5, r9
 800895a:	6026      	str	r6, [r4, #0]
 800895c:	60a5      	str	r5, [r4, #8]
 800895e:	463e      	mov	r6, r7
 8008960:	42be      	cmp	r6, r7
 8008962:	d900      	bls.n	8008966 <__ssputs_r+0x86>
 8008964:	463e      	mov	r6, r7
 8008966:	4632      	mov	r2, r6
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	4641      	mov	r1, r8
 800896c:	f000 f966 	bl	8008c3c <memmove>
 8008970:	68a3      	ldr	r3, [r4, #8]
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	1b9b      	subs	r3, r3, r6
 8008976:	4432      	add	r2, r6
 8008978:	60a3      	str	r3, [r4, #8]
 800897a:	6022      	str	r2, [r4, #0]
 800897c:	2000      	movs	r0, #0
 800897e:	e7db      	b.n	8008938 <__ssputs_r+0x58>
 8008980:	462a      	mov	r2, r5
 8008982:	f000 f981 	bl	8008c88 <_realloc_r>
 8008986:	4606      	mov	r6, r0
 8008988:	2800      	cmp	r0, #0
 800898a:	d1e1      	bne.n	8008950 <__ssputs_r+0x70>
 800898c:	6921      	ldr	r1, [r4, #16]
 800898e:	4650      	mov	r0, sl
 8008990:	f7ff fefc 	bl	800878c <_free_r>
 8008994:	e7c7      	b.n	8008926 <__ssputs_r+0x46>
	...

08008998 <_svfiprintf_r>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	4698      	mov	r8, r3
 800899e:	898b      	ldrh	r3, [r1, #12]
 80089a0:	061b      	lsls	r3, r3, #24
 80089a2:	b09d      	sub	sp, #116	; 0x74
 80089a4:	4607      	mov	r7, r0
 80089a6:	460d      	mov	r5, r1
 80089a8:	4614      	mov	r4, r2
 80089aa:	d50e      	bpl.n	80089ca <_svfiprintf_r+0x32>
 80089ac:	690b      	ldr	r3, [r1, #16]
 80089ae:	b963      	cbnz	r3, 80089ca <_svfiprintf_r+0x32>
 80089b0:	2140      	movs	r1, #64	; 0x40
 80089b2:	f7ff ff3b 	bl	800882c <_malloc_r>
 80089b6:	6028      	str	r0, [r5, #0]
 80089b8:	6128      	str	r0, [r5, #16]
 80089ba:	b920      	cbnz	r0, 80089c6 <_svfiprintf_r+0x2e>
 80089bc:	230c      	movs	r3, #12
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295
 80089c4:	e0d1      	b.n	8008b6a <_svfiprintf_r+0x1d2>
 80089c6:	2340      	movs	r3, #64	; 0x40
 80089c8:	616b      	str	r3, [r5, #20]
 80089ca:	2300      	movs	r3, #0
 80089cc:	9309      	str	r3, [sp, #36]	; 0x24
 80089ce:	2320      	movs	r3, #32
 80089d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80089d8:	2330      	movs	r3, #48	; 0x30
 80089da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b84 <_svfiprintf_r+0x1ec>
 80089de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089e2:	f04f 0901 	mov.w	r9, #1
 80089e6:	4623      	mov	r3, r4
 80089e8:	469a      	mov	sl, r3
 80089ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ee:	b10a      	cbz	r2, 80089f4 <_svfiprintf_r+0x5c>
 80089f0:	2a25      	cmp	r2, #37	; 0x25
 80089f2:	d1f9      	bne.n	80089e8 <_svfiprintf_r+0x50>
 80089f4:	ebba 0b04 	subs.w	fp, sl, r4
 80089f8:	d00b      	beq.n	8008a12 <_svfiprintf_r+0x7a>
 80089fa:	465b      	mov	r3, fp
 80089fc:	4622      	mov	r2, r4
 80089fe:	4629      	mov	r1, r5
 8008a00:	4638      	mov	r0, r7
 8008a02:	f7ff ff6d 	bl	80088e0 <__ssputs_r>
 8008a06:	3001      	adds	r0, #1
 8008a08:	f000 80aa 	beq.w	8008b60 <_svfiprintf_r+0x1c8>
 8008a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a0e:	445a      	add	r2, fp
 8008a10:	9209      	str	r2, [sp, #36]	; 0x24
 8008a12:	f89a 3000 	ldrb.w	r3, [sl]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 80a2 	beq.w	8008b60 <_svfiprintf_r+0x1c8>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a26:	f10a 0a01 	add.w	sl, sl, #1
 8008a2a:	9304      	str	r3, [sp, #16]
 8008a2c:	9307      	str	r3, [sp, #28]
 8008a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a32:	931a      	str	r3, [sp, #104]	; 0x68
 8008a34:	4654      	mov	r4, sl
 8008a36:	2205      	movs	r2, #5
 8008a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3c:	4851      	ldr	r0, [pc, #324]	; (8008b84 <_svfiprintf_r+0x1ec>)
 8008a3e:	f7f7 fc07 	bl	8000250 <memchr>
 8008a42:	9a04      	ldr	r2, [sp, #16]
 8008a44:	b9d8      	cbnz	r0, 8008a7e <_svfiprintf_r+0xe6>
 8008a46:	06d0      	lsls	r0, r2, #27
 8008a48:	bf44      	itt	mi
 8008a4a:	2320      	movmi	r3, #32
 8008a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a50:	0711      	lsls	r1, r2, #28
 8008a52:	bf44      	itt	mi
 8008a54:	232b      	movmi	r3, #43	; 0x2b
 8008a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a60:	d015      	beq.n	8008a8e <_svfiprintf_r+0xf6>
 8008a62:	9a07      	ldr	r2, [sp, #28]
 8008a64:	4654      	mov	r4, sl
 8008a66:	2000      	movs	r0, #0
 8008a68:	f04f 0c0a 	mov.w	ip, #10
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a72:	3b30      	subs	r3, #48	; 0x30
 8008a74:	2b09      	cmp	r3, #9
 8008a76:	d94e      	bls.n	8008b16 <_svfiprintf_r+0x17e>
 8008a78:	b1b0      	cbz	r0, 8008aa8 <_svfiprintf_r+0x110>
 8008a7a:	9207      	str	r2, [sp, #28]
 8008a7c:	e014      	b.n	8008aa8 <_svfiprintf_r+0x110>
 8008a7e:	eba0 0308 	sub.w	r3, r0, r8
 8008a82:	fa09 f303 	lsl.w	r3, r9, r3
 8008a86:	4313      	orrs	r3, r2
 8008a88:	9304      	str	r3, [sp, #16]
 8008a8a:	46a2      	mov	sl, r4
 8008a8c:	e7d2      	b.n	8008a34 <_svfiprintf_r+0x9c>
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	1d19      	adds	r1, r3, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	9103      	str	r1, [sp, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bfbb      	ittet	lt
 8008a9a:	425b      	neglt	r3, r3
 8008a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa0:	9307      	strge	r3, [sp, #28]
 8008aa2:	9307      	strlt	r3, [sp, #28]
 8008aa4:	bfb8      	it	lt
 8008aa6:	9204      	strlt	r2, [sp, #16]
 8008aa8:	7823      	ldrb	r3, [r4, #0]
 8008aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8008aac:	d10c      	bne.n	8008ac8 <_svfiprintf_r+0x130>
 8008aae:	7863      	ldrb	r3, [r4, #1]
 8008ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab2:	d135      	bne.n	8008b20 <_svfiprintf_r+0x188>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	1d1a      	adds	r2, r3, #4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	9203      	str	r2, [sp, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	bfb8      	it	lt
 8008ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ac4:	3402      	adds	r4, #2
 8008ac6:	9305      	str	r3, [sp, #20]
 8008ac8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b94 <_svfiprintf_r+0x1fc>
 8008acc:	7821      	ldrb	r1, [r4, #0]
 8008ace:	2203      	movs	r2, #3
 8008ad0:	4650      	mov	r0, sl
 8008ad2:	f7f7 fbbd 	bl	8000250 <memchr>
 8008ad6:	b140      	cbz	r0, 8008aea <_svfiprintf_r+0x152>
 8008ad8:	2340      	movs	r3, #64	; 0x40
 8008ada:	eba0 000a 	sub.w	r0, r0, sl
 8008ade:	fa03 f000 	lsl.w	r0, r3, r0
 8008ae2:	9b04      	ldr	r3, [sp, #16]
 8008ae4:	4303      	orrs	r3, r0
 8008ae6:	3401      	adds	r4, #1
 8008ae8:	9304      	str	r3, [sp, #16]
 8008aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aee:	4826      	ldr	r0, [pc, #152]	; (8008b88 <_svfiprintf_r+0x1f0>)
 8008af0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008af4:	2206      	movs	r2, #6
 8008af6:	f7f7 fbab 	bl	8000250 <memchr>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d038      	beq.n	8008b70 <_svfiprintf_r+0x1d8>
 8008afe:	4b23      	ldr	r3, [pc, #140]	; (8008b8c <_svfiprintf_r+0x1f4>)
 8008b00:	bb1b      	cbnz	r3, 8008b4a <_svfiprintf_r+0x1b2>
 8008b02:	9b03      	ldr	r3, [sp, #12]
 8008b04:	3307      	adds	r3, #7
 8008b06:	f023 0307 	bic.w	r3, r3, #7
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	9303      	str	r3, [sp, #12]
 8008b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b10:	4433      	add	r3, r6
 8008b12:	9309      	str	r3, [sp, #36]	; 0x24
 8008b14:	e767      	b.n	80089e6 <_svfiprintf_r+0x4e>
 8008b16:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	e7a5      	b.n	8008a6c <_svfiprintf_r+0xd4>
 8008b20:	2300      	movs	r3, #0
 8008b22:	3401      	adds	r4, #1
 8008b24:	9305      	str	r3, [sp, #20]
 8008b26:	4619      	mov	r1, r3
 8008b28:	f04f 0c0a 	mov.w	ip, #10
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b32:	3a30      	subs	r2, #48	; 0x30
 8008b34:	2a09      	cmp	r2, #9
 8008b36:	d903      	bls.n	8008b40 <_svfiprintf_r+0x1a8>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0c5      	beq.n	8008ac8 <_svfiprintf_r+0x130>
 8008b3c:	9105      	str	r1, [sp, #20]
 8008b3e:	e7c3      	b.n	8008ac8 <_svfiprintf_r+0x130>
 8008b40:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b44:	4604      	mov	r4, r0
 8008b46:	2301      	movs	r3, #1
 8008b48:	e7f0      	b.n	8008b2c <_svfiprintf_r+0x194>
 8008b4a:	ab03      	add	r3, sp, #12
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	462a      	mov	r2, r5
 8008b50:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <_svfiprintf_r+0x1f8>)
 8008b52:	a904      	add	r1, sp, #16
 8008b54:	4638      	mov	r0, r7
 8008b56:	f7fe f88f 	bl	8006c78 <_printf_float>
 8008b5a:	1c42      	adds	r2, r0, #1
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	d1d6      	bne.n	8008b0e <_svfiprintf_r+0x176>
 8008b60:	89ab      	ldrh	r3, [r5, #12]
 8008b62:	065b      	lsls	r3, r3, #25
 8008b64:	f53f af2c 	bmi.w	80089c0 <_svfiprintf_r+0x28>
 8008b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b6a:	b01d      	add	sp, #116	; 0x74
 8008b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b70:	ab03      	add	r3, sp, #12
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	462a      	mov	r2, r5
 8008b76:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <_svfiprintf_r+0x1f8>)
 8008b78:	a904      	add	r1, sp, #16
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	f7fe fb08 	bl	8007190 <_printf_i>
 8008b80:	e7eb      	b.n	8008b5a <_svfiprintf_r+0x1c2>
 8008b82:	bf00      	nop
 8008b84:	0801ba1c 	.word	0x0801ba1c
 8008b88:	0801ba26 	.word	0x0801ba26
 8008b8c:	08006c79 	.word	0x08006c79
 8008b90:	080088e1 	.word	0x080088e1
 8008b94:	0801ba22 	.word	0x0801ba22

08008b98 <_sbrk_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d06      	ldr	r5, [pc, #24]	; (8008bb4 <_sbrk_r+0x1c>)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	f7f9 fe7e 	bl	80028a4 <_sbrk>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_sbrk_r+0x1a>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_sbrk_r+0x1a>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	20009438 	.word	0x20009438

08008bb8 <__assert_func>:
 8008bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bba:	4614      	mov	r4, r2
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <__assert_func+0x2c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	68d8      	ldr	r0, [r3, #12]
 8008bc6:	b14c      	cbz	r4, 8008bdc <__assert_func+0x24>
 8008bc8:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <__assert_func+0x30>)
 8008bca:	9100      	str	r1, [sp, #0]
 8008bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bd0:	4906      	ldr	r1, [pc, #24]	; (8008bec <__assert_func+0x34>)
 8008bd2:	462b      	mov	r3, r5
 8008bd4:	f000 f80e 	bl	8008bf4 <fiprintf>
 8008bd8:	f000 faa4 	bl	8009124 <abort>
 8008bdc:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <__assert_func+0x38>)
 8008bde:	461c      	mov	r4, r3
 8008be0:	e7f3      	b.n	8008bca <__assert_func+0x12>
 8008be2:	bf00      	nop
 8008be4:	20000094 	.word	0x20000094
 8008be8:	0801ba2d 	.word	0x0801ba2d
 8008bec:	0801ba3a 	.word	0x0801ba3a
 8008bf0:	0801ba68 	.word	0x0801ba68

08008bf4 <fiprintf>:
 8008bf4:	b40e      	push	{r1, r2, r3}
 8008bf6:	b503      	push	{r0, r1, lr}
 8008bf8:	4601      	mov	r1, r0
 8008bfa:	ab03      	add	r3, sp, #12
 8008bfc:	4805      	ldr	r0, [pc, #20]	; (8008c14 <fiprintf+0x20>)
 8008bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c02:	6800      	ldr	r0, [r0, #0]
 8008c04:	9301      	str	r3, [sp, #4]
 8008c06:	f000 f88f 	bl	8008d28 <_vfiprintf_r>
 8008c0a:	b002      	add	sp, #8
 8008c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c10:	b003      	add	sp, #12
 8008c12:	4770      	bx	lr
 8008c14:	20000094 	.word	0x20000094

08008c18 <__ascii_mbtowc>:
 8008c18:	b082      	sub	sp, #8
 8008c1a:	b901      	cbnz	r1, 8008c1e <__ascii_mbtowc+0x6>
 8008c1c:	a901      	add	r1, sp, #4
 8008c1e:	b142      	cbz	r2, 8008c32 <__ascii_mbtowc+0x1a>
 8008c20:	b14b      	cbz	r3, 8008c36 <__ascii_mbtowc+0x1e>
 8008c22:	7813      	ldrb	r3, [r2, #0]
 8008c24:	600b      	str	r3, [r1, #0]
 8008c26:	7812      	ldrb	r2, [r2, #0]
 8008c28:	1e10      	subs	r0, r2, #0
 8008c2a:	bf18      	it	ne
 8008c2c:	2001      	movne	r0, #1
 8008c2e:	b002      	add	sp, #8
 8008c30:	4770      	bx	lr
 8008c32:	4610      	mov	r0, r2
 8008c34:	e7fb      	b.n	8008c2e <__ascii_mbtowc+0x16>
 8008c36:	f06f 0001 	mvn.w	r0, #1
 8008c3a:	e7f8      	b.n	8008c2e <__ascii_mbtowc+0x16>

08008c3c <memmove>:
 8008c3c:	4288      	cmp	r0, r1
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	eb01 0402 	add.w	r4, r1, r2
 8008c44:	d902      	bls.n	8008c4c <memmove+0x10>
 8008c46:	4284      	cmp	r4, r0
 8008c48:	4623      	mov	r3, r4
 8008c4a:	d807      	bhi.n	8008c5c <memmove+0x20>
 8008c4c:	1e43      	subs	r3, r0, #1
 8008c4e:	42a1      	cmp	r1, r4
 8008c50:	d008      	beq.n	8008c64 <memmove+0x28>
 8008c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c5a:	e7f8      	b.n	8008c4e <memmove+0x12>
 8008c5c:	4402      	add	r2, r0
 8008c5e:	4601      	mov	r1, r0
 8008c60:	428a      	cmp	r2, r1
 8008c62:	d100      	bne.n	8008c66 <memmove+0x2a>
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c6e:	e7f7      	b.n	8008c60 <memmove+0x24>

08008c70 <__malloc_lock>:
 8008c70:	4801      	ldr	r0, [pc, #4]	; (8008c78 <__malloc_lock+0x8>)
 8008c72:	f000 bc17 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 8008c76:	bf00      	nop
 8008c78:	20009440 	.word	0x20009440

08008c7c <__malloc_unlock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__malloc_unlock+0x8>)
 8008c7e:	f000 bc12 	b.w	80094a6 <__retarget_lock_release_recursive>
 8008c82:	bf00      	nop
 8008c84:	20009440 	.word	0x20009440

08008c88 <_realloc_r>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	4614      	mov	r4, r2
 8008c8e:	460e      	mov	r6, r1
 8008c90:	b921      	cbnz	r1, 8008c9c <_realloc_r+0x14>
 8008c92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c96:	4611      	mov	r1, r2
 8008c98:	f7ff bdc8 	b.w	800882c <_malloc_r>
 8008c9c:	b922      	cbnz	r2, 8008ca8 <_realloc_r+0x20>
 8008c9e:	f7ff fd75 	bl	800878c <_free_r>
 8008ca2:	4625      	mov	r5, r4
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca8:	f000 fc62 	bl	8009570 <_malloc_usable_size_r>
 8008cac:	42a0      	cmp	r0, r4
 8008cae:	d20f      	bcs.n	8008cd0 <_realloc_r+0x48>
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	f7ff fdba 	bl	800882c <_malloc_r>
 8008cb8:	4605      	mov	r5, r0
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d0f2      	beq.n	8008ca4 <_realloc_r+0x1c>
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	f7ff f9c7 	bl	8008054 <memcpy>
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7ff fd5f 	bl	800878c <_free_r>
 8008cce:	e7e9      	b.n	8008ca4 <_realloc_r+0x1c>
 8008cd0:	4635      	mov	r5, r6
 8008cd2:	e7e7      	b.n	8008ca4 <_realloc_r+0x1c>

08008cd4 <__sfputc_r>:
 8008cd4:	6893      	ldr	r3, [r2, #8]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	b410      	push	{r4}
 8008cdc:	6093      	str	r3, [r2, #8]
 8008cde:	da08      	bge.n	8008cf2 <__sfputc_r+0x1e>
 8008ce0:	6994      	ldr	r4, [r2, #24]
 8008ce2:	42a3      	cmp	r3, r4
 8008ce4:	db01      	blt.n	8008cea <__sfputc_r+0x16>
 8008ce6:	290a      	cmp	r1, #10
 8008ce8:	d103      	bne.n	8008cf2 <__sfputc_r+0x1e>
 8008cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cee:	f000 b94b 	b.w	8008f88 <__swbuf_r>
 8008cf2:	6813      	ldr	r3, [r2, #0]
 8008cf4:	1c58      	adds	r0, r3, #1
 8008cf6:	6010      	str	r0, [r2, #0]
 8008cf8:	7019      	strb	r1, [r3, #0]
 8008cfa:	4608      	mov	r0, r1
 8008cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <__sfputs_r>:
 8008d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d04:	4606      	mov	r6, r0
 8008d06:	460f      	mov	r7, r1
 8008d08:	4614      	mov	r4, r2
 8008d0a:	18d5      	adds	r5, r2, r3
 8008d0c:	42ac      	cmp	r4, r5
 8008d0e:	d101      	bne.n	8008d14 <__sfputs_r+0x12>
 8008d10:	2000      	movs	r0, #0
 8008d12:	e007      	b.n	8008d24 <__sfputs_r+0x22>
 8008d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d18:	463a      	mov	r2, r7
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7ff ffda 	bl	8008cd4 <__sfputc_r>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d1f3      	bne.n	8008d0c <__sfputs_r+0xa>
 8008d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d28 <_vfiprintf_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	b09d      	sub	sp, #116	; 0x74
 8008d30:	4614      	mov	r4, r2
 8008d32:	4698      	mov	r8, r3
 8008d34:	4606      	mov	r6, r0
 8008d36:	b118      	cbz	r0, 8008d40 <_vfiprintf_r+0x18>
 8008d38:	6983      	ldr	r3, [r0, #24]
 8008d3a:	b90b      	cbnz	r3, 8008d40 <_vfiprintf_r+0x18>
 8008d3c:	f000 fb14 	bl	8009368 <__sinit>
 8008d40:	4b89      	ldr	r3, [pc, #548]	; (8008f68 <_vfiprintf_r+0x240>)
 8008d42:	429d      	cmp	r5, r3
 8008d44:	d11b      	bne.n	8008d7e <_vfiprintf_r+0x56>
 8008d46:	6875      	ldr	r5, [r6, #4]
 8008d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d4a:	07d9      	lsls	r1, r3, #31
 8008d4c:	d405      	bmi.n	8008d5a <_vfiprintf_r+0x32>
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	059a      	lsls	r2, r3, #22
 8008d52:	d402      	bmi.n	8008d5a <_vfiprintf_r+0x32>
 8008d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d56:	f000 fba5 	bl	80094a4 <__retarget_lock_acquire_recursive>
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	071b      	lsls	r3, r3, #28
 8008d5e:	d501      	bpl.n	8008d64 <_vfiprintf_r+0x3c>
 8008d60:	692b      	ldr	r3, [r5, #16]
 8008d62:	b9eb      	cbnz	r3, 8008da0 <_vfiprintf_r+0x78>
 8008d64:	4629      	mov	r1, r5
 8008d66:	4630      	mov	r0, r6
 8008d68:	f000 f96e 	bl	8009048 <__swsetup_r>
 8008d6c:	b1c0      	cbz	r0, 8008da0 <_vfiprintf_r+0x78>
 8008d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d70:	07dc      	lsls	r4, r3, #31
 8008d72:	d50e      	bpl.n	8008d92 <_vfiprintf_r+0x6a>
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	b01d      	add	sp, #116	; 0x74
 8008d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7e:	4b7b      	ldr	r3, [pc, #492]	; (8008f6c <_vfiprintf_r+0x244>)
 8008d80:	429d      	cmp	r5, r3
 8008d82:	d101      	bne.n	8008d88 <_vfiprintf_r+0x60>
 8008d84:	68b5      	ldr	r5, [r6, #8]
 8008d86:	e7df      	b.n	8008d48 <_vfiprintf_r+0x20>
 8008d88:	4b79      	ldr	r3, [pc, #484]	; (8008f70 <_vfiprintf_r+0x248>)
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	bf08      	it	eq
 8008d8e:	68f5      	ldreq	r5, [r6, #12]
 8008d90:	e7da      	b.n	8008d48 <_vfiprintf_r+0x20>
 8008d92:	89ab      	ldrh	r3, [r5, #12]
 8008d94:	0598      	lsls	r0, r3, #22
 8008d96:	d4ed      	bmi.n	8008d74 <_vfiprintf_r+0x4c>
 8008d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d9a:	f000 fb84 	bl	80094a6 <__retarget_lock_release_recursive>
 8008d9e:	e7e9      	b.n	8008d74 <_vfiprintf_r+0x4c>
 8008da0:	2300      	movs	r3, #0
 8008da2:	9309      	str	r3, [sp, #36]	; 0x24
 8008da4:	2320      	movs	r3, #32
 8008da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dae:	2330      	movs	r3, #48	; 0x30
 8008db0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f74 <_vfiprintf_r+0x24c>
 8008db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008db8:	f04f 0901 	mov.w	r9, #1
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	469a      	mov	sl, r3
 8008dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dc4:	b10a      	cbz	r2, 8008dca <_vfiprintf_r+0xa2>
 8008dc6:	2a25      	cmp	r2, #37	; 0x25
 8008dc8:	d1f9      	bne.n	8008dbe <_vfiprintf_r+0x96>
 8008dca:	ebba 0b04 	subs.w	fp, sl, r4
 8008dce:	d00b      	beq.n	8008de8 <_vfiprintf_r+0xc0>
 8008dd0:	465b      	mov	r3, fp
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f7ff ff93 	bl	8008d02 <__sfputs_r>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	f000 80aa 	beq.w	8008f36 <_vfiprintf_r+0x20e>
 8008de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008de4:	445a      	add	r2, fp
 8008de6:	9209      	str	r2, [sp, #36]	; 0x24
 8008de8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 80a2 	beq.w	8008f36 <_vfiprintf_r+0x20e>
 8008df2:	2300      	movs	r3, #0
 8008df4:	f04f 32ff 	mov.w	r2, #4294967295
 8008df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dfc:	f10a 0a01 	add.w	sl, sl, #1
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	9307      	str	r3, [sp, #28]
 8008e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e08:	931a      	str	r3, [sp, #104]	; 0x68
 8008e0a:	4654      	mov	r4, sl
 8008e0c:	2205      	movs	r2, #5
 8008e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e12:	4858      	ldr	r0, [pc, #352]	; (8008f74 <_vfiprintf_r+0x24c>)
 8008e14:	f7f7 fa1c 	bl	8000250 <memchr>
 8008e18:	9a04      	ldr	r2, [sp, #16]
 8008e1a:	b9d8      	cbnz	r0, 8008e54 <_vfiprintf_r+0x12c>
 8008e1c:	06d1      	lsls	r1, r2, #27
 8008e1e:	bf44      	itt	mi
 8008e20:	2320      	movmi	r3, #32
 8008e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e26:	0713      	lsls	r3, r2, #28
 8008e28:	bf44      	itt	mi
 8008e2a:	232b      	movmi	r3, #43	; 0x2b
 8008e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e30:	f89a 3000 	ldrb.w	r3, [sl]
 8008e34:	2b2a      	cmp	r3, #42	; 0x2a
 8008e36:	d015      	beq.n	8008e64 <_vfiprintf_r+0x13c>
 8008e38:	9a07      	ldr	r2, [sp, #28]
 8008e3a:	4654      	mov	r4, sl
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	f04f 0c0a 	mov.w	ip, #10
 8008e42:	4621      	mov	r1, r4
 8008e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e48:	3b30      	subs	r3, #48	; 0x30
 8008e4a:	2b09      	cmp	r3, #9
 8008e4c:	d94e      	bls.n	8008eec <_vfiprintf_r+0x1c4>
 8008e4e:	b1b0      	cbz	r0, 8008e7e <_vfiprintf_r+0x156>
 8008e50:	9207      	str	r2, [sp, #28]
 8008e52:	e014      	b.n	8008e7e <_vfiprintf_r+0x156>
 8008e54:	eba0 0308 	sub.w	r3, r0, r8
 8008e58:	fa09 f303 	lsl.w	r3, r9, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	46a2      	mov	sl, r4
 8008e62:	e7d2      	b.n	8008e0a <_vfiprintf_r+0xe2>
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	1d19      	adds	r1, r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	9103      	str	r1, [sp, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	bfbb      	ittet	lt
 8008e70:	425b      	neglt	r3, r3
 8008e72:	f042 0202 	orrlt.w	r2, r2, #2
 8008e76:	9307      	strge	r3, [sp, #28]
 8008e78:	9307      	strlt	r3, [sp, #28]
 8008e7a:	bfb8      	it	lt
 8008e7c:	9204      	strlt	r2, [sp, #16]
 8008e7e:	7823      	ldrb	r3, [r4, #0]
 8008e80:	2b2e      	cmp	r3, #46	; 0x2e
 8008e82:	d10c      	bne.n	8008e9e <_vfiprintf_r+0x176>
 8008e84:	7863      	ldrb	r3, [r4, #1]
 8008e86:	2b2a      	cmp	r3, #42	; 0x2a
 8008e88:	d135      	bne.n	8008ef6 <_vfiprintf_r+0x1ce>
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	1d1a      	adds	r2, r3, #4
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	9203      	str	r2, [sp, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bfb8      	it	lt
 8008e96:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e9a:	3402      	adds	r4, #2
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f84 <_vfiprintf_r+0x25c>
 8008ea2:	7821      	ldrb	r1, [r4, #0]
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	4650      	mov	r0, sl
 8008ea8:	f7f7 f9d2 	bl	8000250 <memchr>
 8008eac:	b140      	cbz	r0, 8008ec0 <_vfiprintf_r+0x198>
 8008eae:	2340      	movs	r3, #64	; 0x40
 8008eb0:	eba0 000a 	sub.w	r0, r0, sl
 8008eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	4303      	orrs	r3, r0
 8008ebc:	3401      	adds	r4, #1
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec4:	482c      	ldr	r0, [pc, #176]	; (8008f78 <_vfiprintf_r+0x250>)
 8008ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eca:	2206      	movs	r2, #6
 8008ecc:	f7f7 f9c0 	bl	8000250 <memchr>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d03f      	beq.n	8008f54 <_vfiprintf_r+0x22c>
 8008ed4:	4b29      	ldr	r3, [pc, #164]	; (8008f7c <_vfiprintf_r+0x254>)
 8008ed6:	bb1b      	cbnz	r3, 8008f20 <_vfiprintf_r+0x1f8>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	3307      	adds	r3, #7
 8008edc:	f023 0307 	bic.w	r3, r3, #7
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	9303      	str	r3, [sp, #12]
 8008ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee6:	443b      	add	r3, r7
 8008ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eea:	e767      	b.n	8008dbc <_vfiprintf_r+0x94>
 8008eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	e7a5      	b.n	8008e42 <_vfiprintf_r+0x11a>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	3401      	adds	r4, #1
 8008efa:	9305      	str	r3, [sp, #20]
 8008efc:	4619      	mov	r1, r3
 8008efe:	f04f 0c0a 	mov.w	ip, #10
 8008f02:	4620      	mov	r0, r4
 8008f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f08:	3a30      	subs	r2, #48	; 0x30
 8008f0a:	2a09      	cmp	r2, #9
 8008f0c:	d903      	bls.n	8008f16 <_vfiprintf_r+0x1ee>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0c5      	beq.n	8008e9e <_vfiprintf_r+0x176>
 8008f12:	9105      	str	r1, [sp, #20]
 8008f14:	e7c3      	b.n	8008e9e <_vfiprintf_r+0x176>
 8008f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e7f0      	b.n	8008f02 <_vfiprintf_r+0x1da>
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	462a      	mov	r2, r5
 8008f26:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <_vfiprintf_r+0x258>)
 8008f28:	a904      	add	r1, sp, #16
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7fd fea4 	bl	8006c78 <_printf_float>
 8008f30:	4607      	mov	r7, r0
 8008f32:	1c78      	adds	r0, r7, #1
 8008f34:	d1d6      	bne.n	8008ee4 <_vfiprintf_r+0x1bc>
 8008f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f38:	07d9      	lsls	r1, r3, #31
 8008f3a:	d405      	bmi.n	8008f48 <_vfiprintf_r+0x220>
 8008f3c:	89ab      	ldrh	r3, [r5, #12]
 8008f3e:	059a      	lsls	r2, r3, #22
 8008f40:	d402      	bmi.n	8008f48 <_vfiprintf_r+0x220>
 8008f42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f44:	f000 faaf 	bl	80094a6 <__retarget_lock_release_recursive>
 8008f48:	89ab      	ldrh	r3, [r5, #12]
 8008f4a:	065b      	lsls	r3, r3, #25
 8008f4c:	f53f af12 	bmi.w	8008d74 <_vfiprintf_r+0x4c>
 8008f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f52:	e711      	b.n	8008d78 <_vfiprintf_r+0x50>
 8008f54:	ab03      	add	r3, sp, #12
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	462a      	mov	r2, r5
 8008f5a:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <_vfiprintf_r+0x258>)
 8008f5c:	a904      	add	r1, sp, #16
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7fe f916 	bl	8007190 <_printf_i>
 8008f64:	e7e4      	b.n	8008f30 <_vfiprintf_r+0x208>
 8008f66:	bf00      	nop
 8008f68:	0801bb94 	.word	0x0801bb94
 8008f6c:	0801bbb4 	.word	0x0801bbb4
 8008f70:	0801bb74 	.word	0x0801bb74
 8008f74:	0801ba1c 	.word	0x0801ba1c
 8008f78:	0801ba26 	.word	0x0801ba26
 8008f7c:	08006c79 	.word	0x08006c79
 8008f80:	08008d03 	.word	0x08008d03
 8008f84:	0801ba22 	.word	0x0801ba22

08008f88 <__swbuf_r>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	460e      	mov	r6, r1
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	4605      	mov	r5, r0
 8008f90:	b118      	cbz	r0, 8008f9a <__swbuf_r+0x12>
 8008f92:	6983      	ldr	r3, [r0, #24]
 8008f94:	b90b      	cbnz	r3, 8008f9a <__swbuf_r+0x12>
 8008f96:	f000 f9e7 	bl	8009368 <__sinit>
 8008f9a:	4b21      	ldr	r3, [pc, #132]	; (8009020 <__swbuf_r+0x98>)
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	d12b      	bne.n	8008ff8 <__swbuf_r+0x70>
 8008fa0:	686c      	ldr	r4, [r5, #4]
 8008fa2:	69a3      	ldr	r3, [r4, #24]
 8008fa4:	60a3      	str	r3, [r4, #8]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	071a      	lsls	r2, r3, #28
 8008faa:	d52f      	bpl.n	800900c <__swbuf_r+0x84>
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	b36b      	cbz	r3, 800900c <__swbuf_r+0x84>
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	6820      	ldr	r0, [r4, #0]
 8008fb4:	1ac0      	subs	r0, r0, r3
 8008fb6:	6963      	ldr	r3, [r4, #20]
 8008fb8:	b2f6      	uxtb	r6, r6
 8008fba:	4283      	cmp	r3, r0
 8008fbc:	4637      	mov	r7, r6
 8008fbe:	dc04      	bgt.n	8008fca <__swbuf_r+0x42>
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 f93c 	bl	8009240 <_fflush_r>
 8008fc8:	bb30      	cbnz	r0, 8009018 <__swbuf_r+0x90>
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	60a3      	str	r3, [r4, #8]
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	6022      	str	r2, [r4, #0]
 8008fd6:	701e      	strb	r6, [r3, #0]
 8008fd8:	6963      	ldr	r3, [r4, #20]
 8008fda:	3001      	adds	r0, #1
 8008fdc:	4283      	cmp	r3, r0
 8008fde:	d004      	beq.n	8008fea <__swbuf_r+0x62>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	07db      	lsls	r3, r3, #31
 8008fe4:	d506      	bpl.n	8008ff4 <__swbuf_r+0x6c>
 8008fe6:	2e0a      	cmp	r6, #10
 8008fe8:	d104      	bne.n	8008ff4 <__swbuf_r+0x6c>
 8008fea:	4621      	mov	r1, r4
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 f927 	bl	8009240 <_fflush_r>
 8008ff2:	b988      	cbnz	r0, 8009018 <__swbuf_r+0x90>
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <__swbuf_r+0x9c>)
 8008ffa:	429c      	cmp	r4, r3
 8008ffc:	d101      	bne.n	8009002 <__swbuf_r+0x7a>
 8008ffe:	68ac      	ldr	r4, [r5, #8]
 8009000:	e7cf      	b.n	8008fa2 <__swbuf_r+0x1a>
 8009002:	4b09      	ldr	r3, [pc, #36]	; (8009028 <__swbuf_r+0xa0>)
 8009004:	429c      	cmp	r4, r3
 8009006:	bf08      	it	eq
 8009008:	68ec      	ldreq	r4, [r5, #12]
 800900a:	e7ca      	b.n	8008fa2 <__swbuf_r+0x1a>
 800900c:	4621      	mov	r1, r4
 800900e:	4628      	mov	r0, r5
 8009010:	f000 f81a 	bl	8009048 <__swsetup_r>
 8009014:	2800      	cmp	r0, #0
 8009016:	d0cb      	beq.n	8008fb0 <__swbuf_r+0x28>
 8009018:	f04f 37ff 	mov.w	r7, #4294967295
 800901c:	e7ea      	b.n	8008ff4 <__swbuf_r+0x6c>
 800901e:	bf00      	nop
 8009020:	0801bb94 	.word	0x0801bb94
 8009024:	0801bbb4 	.word	0x0801bbb4
 8009028:	0801bb74 	.word	0x0801bb74

0800902c <__ascii_wctomb>:
 800902c:	b149      	cbz	r1, 8009042 <__ascii_wctomb+0x16>
 800902e:	2aff      	cmp	r2, #255	; 0xff
 8009030:	bf85      	ittet	hi
 8009032:	238a      	movhi	r3, #138	; 0x8a
 8009034:	6003      	strhi	r3, [r0, #0]
 8009036:	700a      	strbls	r2, [r1, #0]
 8009038:	f04f 30ff 	movhi.w	r0, #4294967295
 800903c:	bf98      	it	ls
 800903e:	2001      	movls	r0, #1
 8009040:	4770      	bx	lr
 8009042:	4608      	mov	r0, r1
 8009044:	4770      	bx	lr
	...

08009048 <__swsetup_r>:
 8009048:	4b32      	ldr	r3, [pc, #200]	; (8009114 <__swsetup_r+0xcc>)
 800904a:	b570      	push	{r4, r5, r6, lr}
 800904c:	681d      	ldr	r5, [r3, #0]
 800904e:	4606      	mov	r6, r0
 8009050:	460c      	mov	r4, r1
 8009052:	b125      	cbz	r5, 800905e <__swsetup_r+0x16>
 8009054:	69ab      	ldr	r3, [r5, #24]
 8009056:	b913      	cbnz	r3, 800905e <__swsetup_r+0x16>
 8009058:	4628      	mov	r0, r5
 800905a:	f000 f985 	bl	8009368 <__sinit>
 800905e:	4b2e      	ldr	r3, [pc, #184]	; (8009118 <__swsetup_r+0xd0>)
 8009060:	429c      	cmp	r4, r3
 8009062:	d10f      	bne.n	8009084 <__swsetup_r+0x3c>
 8009064:	686c      	ldr	r4, [r5, #4]
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800906c:	0719      	lsls	r1, r3, #28
 800906e:	d42c      	bmi.n	80090ca <__swsetup_r+0x82>
 8009070:	06dd      	lsls	r5, r3, #27
 8009072:	d411      	bmi.n	8009098 <__swsetup_r+0x50>
 8009074:	2309      	movs	r3, #9
 8009076:	6033      	str	r3, [r6, #0]
 8009078:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	f04f 30ff 	mov.w	r0, #4294967295
 8009082:	e03e      	b.n	8009102 <__swsetup_r+0xba>
 8009084:	4b25      	ldr	r3, [pc, #148]	; (800911c <__swsetup_r+0xd4>)
 8009086:	429c      	cmp	r4, r3
 8009088:	d101      	bne.n	800908e <__swsetup_r+0x46>
 800908a:	68ac      	ldr	r4, [r5, #8]
 800908c:	e7eb      	b.n	8009066 <__swsetup_r+0x1e>
 800908e:	4b24      	ldr	r3, [pc, #144]	; (8009120 <__swsetup_r+0xd8>)
 8009090:	429c      	cmp	r4, r3
 8009092:	bf08      	it	eq
 8009094:	68ec      	ldreq	r4, [r5, #12]
 8009096:	e7e6      	b.n	8009066 <__swsetup_r+0x1e>
 8009098:	0758      	lsls	r0, r3, #29
 800909a:	d512      	bpl.n	80090c2 <__swsetup_r+0x7a>
 800909c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800909e:	b141      	cbz	r1, 80090b2 <__swsetup_r+0x6a>
 80090a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a4:	4299      	cmp	r1, r3
 80090a6:	d002      	beq.n	80090ae <__swsetup_r+0x66>
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7ff fb6f 	bl	800878c <_free_r>
 80090ae:	2300      	movs	r3, #0
 80090b0:	6363      	str	r3, [r4, #52]	; 0x34
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090b8:	81a3      	strh	r3, [r4, #12]
 80090ba:	2300      	movs	r3, #0
 80090bc:	6063      	str	r3, [r4, #4]
 80090be:	6923      	ldr	r3, [r4, #16]
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f043 0308 	orr.w	r3, r3, #8
 80090c8:	81a3      	strh	r3, [r4, #12]
 80090ca:	6923      	ldr	r3, [r4, #16]
 80090cc:	b94b      	cbnz	r3, 80090e2 <__swsetup_r+0x9a>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d8:	d003      	beq.n	80090e2 <__swsetup_r+0x9a>
 80090da:	4621      	mov	r1, r4
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 fa07 	bl	80094f0 <__smakebuf_r>
 80090e2:	89a0      	ldrh	r0, [r4, #12]
 80090e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090e8:	f010 0301 	ands.w	r3, r0, #1
 80090ec:	d00a      	beq.n	8009104 <__swsetup_r+0xbc>
 80090ee:	2300      	movs	r3, #0
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	6963      	ldr	r3, [r4, #20]
 80090f4:	425b      	negs	r3, r3
 80090f6:	61a3      	str	r3, [r4, #24]
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	b943      	cbnz	r3, 800910e <__swsetup_r+0xc6>
 80090fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009100:	d1ba      	bne.n	8009078 <__swsetup_r+0x30>
 8009102:	bd70      	pop	{r4, r5, r6, pc}
 8009104:	0781      	lsls	r1, r0, #30
 8009106:	bf58      	it	pl
 8009108:	6963      	ldrpl	r3, [r4, #20]
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	e7f4      	b.n	80090f8 <__swsetup_r+0xb0>
 800910e:	2000      	movs	r0, #0
 8009110:	e7f7      	b.n	8009102 <__swsetup_r+0xba>
 8009112:	bf00      	nop
 8009114:	20000094 	.word	0x20000094
 8009118:	0801bb94 	.word	0x0801bb94
 800911c:	0801bbb4 	.word	0x0801bbb4
 8009120:	0801bb74 	.word	0x0801bb74

08009124 <abort>:
 8009124:	b508      	push	{r3, lr}
 8009126:	2006      	movs	r0, #6
 8009128:	f000 fa52 	bl	80095d0 <raise>
 800912c:	2001      	movs	r0, #1
 800912e:	f7f9 fb41 	bl	80027b4 <_exit>
	...

08009134 <__sflush_r>:
 8009134:	898a      	ldrh	r2, [r1, #12]
 8009136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913a:	4605      	mov	r5, r0
 800913c:	0710      	lsls	r0, r2, #28
 800913e:	460c      	mov	r4, r1
 8009140:	d458      	bmi.n	80091f4 <__sflush_r+0xc0>
 8009142:	684b      	ldr	r3, [r1, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	dc05      	bgt.n	8009154 <__sflush_r+0x20>
 8009148:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800914a:	2b00      	cmp	r3, #0
 800914c:	dc02      	bgt.n	8009154 <__sflush_r+0x20>
 800914e:	2000      	movs	r0, #0
 8009150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009156:	2e00      	cmp	r6, #0
 8009158:	d0f9      	beq.n	800914e <__sflush_r+0x1a>
 800915a:	2300      	movs	r3, #0
 800915c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009160:	682f      	ldr	r7, [r5, #0]
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	d032      	beq.n	80091cc <__sflush_r+0x98>
 8009166:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	075a      	lsls	r2, r3, #29
 800916c:	d505      	bpl.n	800917a <__sflush_r+0x46>
 800916e:	6863      	ldr	r3, [r4, #4]
 8009170:	1ac0      	subs	r0, r0, r3
 8009172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009174:	b10b      	cbz	r3, 800917a <__sflush_r+0x46>
 8009176:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009178:	1ac0      	subs	r0, r0, r3
 800917a:	2300      	movs	r3, #0
 800917c:	4602      	mov	r2, r0
 800917e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009180:	6a21      	ldr	r1, [r4, #32]
 8009182:	4628      	mov	r0, r5
 8009184:	47b0      	blx	r6
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	d106      	bne.n	800919a <__sflush_r+0x66>
 800918c:	6829      	ldr	r1, [r5, #0]
 800918e:	291d      	cmp	r1, #29
 8009190:	d82c      	bhi.n	80091ec <__sflush_r+0xb8>
 8009192:	4a2a      	ldr	r2, [pc, #168]	; (800923c <__sflush_r+0x108>)
 8009194:	40ca      	lsrs	r2, r1
 8009196:	07d6      	lsls	r6, r2, #31
 8009198:	d528      	bpl.n	80091ec <__sflush_r+0xb8>
 800919a:	2200      	movs	r2, #0
 800919c:	6062      	str	r2, [r4, #4]
 800919e:	04d9      	lsls	r1, r3, #19
 80091a0:	6922      	ldr	r2, [r4, #16]
 80091a2:	6022      	str	r2, [r4, #0]
 80091a4:	d504      	bpl.n	80091b0 <__sflush_r+0x7c>
 80091a6:	1c42      	adds	r2, r0, #1
 80091a8:	d101      	bne.n	80091ae <__sflush_r+0x7a>
 80091aa:	682b      	ldr	r3, [r5, #0]
 80091ac:	b903      	cbnz	r3, 80091b0 <__sflush_r+0x7c>
 80091ae:	6560      	str	r0, [r4, #84]	; 0x54
 80091b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091b2:	602f      	str	r7, [r5, #0]
 80091b4:	2900      	cmp	r1, #0
 80091b6:	d0ca      	beq.n	800914e <__sflush_r+0x1a>
 80091b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091bc:	4299      	cmp	r1, r3
 80091be:	d002      	beq.n	80091c6 <__sflush_r+0x92>
 80091c0:	4628      	mov	r0, r5
 80091c2:	f7ff fae3 	bl	800878c <_free_r>
 80091c6:	2000      	movs	r0, #0
 80091c8:	6360      	str	r0, [r4, #52]	; 0x34
 80091ca:	e7c1      	b.n	8009150 <__sflush_r+0x1c>
 80091cc:	6a21      	ldr	r1, [r4, #32]
 80091ce:	2301      	movs	r3, #1
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b0      	blx	r6
 80091d4:	1c41      	adds	r1, r0, #1
 80091d6:	d1c7      	bne.n	8009168 <__sflush_r+0x34>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0c4      	beq.n	8009168 <__sflush_r+0x34>
 80091de:	2b1d      	cmp	r3, #29
 80091e0:	d001      	beq.n	80091e6 <__sflush_r+0xb2>
 80091e2:	2b16      	cmp	r3, #22
 80091e4:	d101      	bne.n	80091ea <__sflush_r+0xb6>
 80091e6:	602f      	str	r7, [r5, #0]
 80091e8:	e7b1      	b.n	800914e <__sflush_r+0x1a>
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f0:	81a3      	strh	r3, [r4, #12]
 80091f2:	e7ad      	b.n	8009150 <__sflush_r+0x1c>
 80091f4:	690f      	ldr	r7, [r1, #16]
 80091f6:	2f00      	cmp	r7, #0
 80091f8:	d0a9      	beq.n	800914e <__sflush_r+0x1a>
 80091fa:	0793      	lsls	r3, r2, #30
 80091fc:	680e      	ldr	r6, [r1, #0]
 80091fe:	bf08      	it	eq
 8009200:	694b      	ldreq	r3, [r1, #20]
 8009202:	600f      	str	r7, [r1, #0]
 8009204:	bf18      	it	ne
 8009206:	2300      	movne	r3, #0
 8009208:	eba6 0807 	sub.w	r8, r6, r7
 800920c:	608b      	str	r3, [r1, #8]
 800920e:	f1b8 0f00 	cmp.w	r8, #0
 8009212:	dd9c      	ble.n	800914e <__sflush_r+0x1a>
 8009214:	6a21      	ldr	r1, [r4, #32]
 8009216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009218:	4643      	mov	r3, r8
 800921a:	463a      	mov	r2, r7
 800921c:	4628      	mov	r0, r5
 800921e:	47b0      	blx	r6
 8009220:	2800      	cmp	r0, #0
 8009222:	dc06      	bgt.n	8009232 <__sflush_r+0xfe>
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800922a:	81a3      	strh	r3, [r4, #12]
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	e78e      	b.n	8009150 <__sflush_r+0x1c>
 8009232:	4407      	add	r7, r0
 8009234:	eba8 0800 	sub.w	r8, r8, r0
 8009238:	e7e9      	b.n	800920e <__sflush_r+0xda>
 800923a:	bf00      	nop
 800923c:	20400001 	.word	0x20400001

08009240 <_fflush_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	690b      	ldr	r3, [r1, #16]
 8009244:	4605      	mov	r5, r0
 8009246:	460c      	mov	r4, r1
 8009248:	b913      	cbnz	r3, 8009250 <_fflush_r+0x10>
 800924a:	2500      	movs	r5, #0
 800924c:	4628      	mov	r0, r5
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	b118      	cbz	r0, 800925a <_fflush_r+0x1a>
 8009252:	6983      	ldr	r3, [r0, #24]
 8009254:	b90b      	cbnz	r3, 800925a <_fflush_r+0x1a>
 8009256:	f000 f887 	bl	8009368 <__sinit>
 800925a:	4b14      	ldr	r3, [pc, #80]	; (80092ac <_fflush_r+0x6c>)
 800925c:	429c      	cmp	r4, r3
 800925e:	d11b      	bne.n	8009298 <_fflush_r+0x58>
 8009260:	686c      	ldr	r4, [r5, #4]
 8009262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0ef      	beq.n	800924a <_fflush_r+0xa>
 800926a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800926c:	07d0      	lsls	r0, r2, #31
 800926e:	d404      	bmi.n	800927a <_fflush_r+0x3a>
 8009270:	0599      	lsls	r1, r3, #22
 8009272:	d402      	bmi.n	800927a <_fflush_r+0x3a>
 8009274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009276:	f000 f915 	bl	80094a4 <__retarget_lock_acquire_recursive>
 800927a:	4628      	mov	r0, r5
 800927c:	4621      	mov	r1, r4
 800927e:	f7ff ff59 	bl	8009134 <__sflush_r>
 8009282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009284:	07da      	lsls	r2, r3, #31
 8009286:	4605      	mov	r5, r0
 8009288:	d4e0      	bmi.n	800924c <_fflush_r+0xc>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	059b      	lsls	r3, r3, #22
 800928e:	d4dd      	bmi.n	800924c <_fflush_r+0xc>
 8009290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009292:	f000 f908 	bl	80094a6 <__retarget_lock_release_recursive>
 8009296:	e7d9      	b.n	800924c <_fflush_r+0xc>
 8009298:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <_fflush_r+0x70>)
 800929a:	429c      	cmp	r4, r3
 800929c:	d101      	bne.n	80092a2 <_fflush_r+0x62>
 800929e:	68ac      	ldr	r4, [r5, #8]
 80092a0:	e7df      	b.n	8009262 <_fflush_r+0x22>
 80092a2:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <_fflush_r+0x74>)
 80092a4:	429c      	cmp	r4, r3
 80092a6:	bf08      	it	eq
 80092a8:	68ec      	ldreq	r4, [r5, #12]
 80092aa:	e7da      	b.n	8009262 <_fflush_r+0x22>
 80092ac:	0801bb94 	.word	0x0801bb94
 80092b0:	0801bbb4 	.word	0x0801bbb4
 80092b4:	0801bb74 	.word	0x0801bb74

080092b8 <std>:
 80092b8:	2300      	movs	r3, #0
 80092ba:	b510      	push	{r4, lr}
 80092bc:	4604      	mov	r4, r0
 80092be:	e9c0 3300 	strd	r3, r3, [r0]
 80092c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092c6:	6083      	str	r3, [r0, #8]
 80092c8:	8181      	strh	r1, [r0, #12]
 80092ca:	6643      	str	r3, [r0, #100]	; 0x64
 80092cc:	81c2      	strh	r2, [r0, #14]
 80092ce:	6183      	str	r3, [r0, #24]
 80092d0:	4619      	mov	r1, r3
 80092d2:	2208      	movs	r2, #8
 80092d4:	305c      	adds	r0, #92	; 0x5c
 80092d6:	f7fd fc37 	bl	8006b48 <memset>
 80092da:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <std+0x38>)
 80092dc:	6263      	str	r3, [r4, #36]	; 0x24
 80092de:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <std+0x3c>)
 80092e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092e2:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <std+0x40>)
 80092e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092e6:	4b05      	ldr	r3, [pc, #20]	; (80092fc <std+0x44>)
 80092e8:	6224      	str	r4, [r4, #32]
 80092ea:	6323      	str	r3, [r4, #48]	; 0x30
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	bf00      	nop
 80092f0:	08009609 	.word	0x08009609
 80092f4:	0800962b 	.word	0x0800962b
 80092f8:	08009663 	.word	0x08009663
 80092fc:	08009687 	.word	0x08009687

08009300 <_cleanup_r>:
 8009300:	4901      	ldr	r1, [pc, #4]	; (8009308 <_cleanup_r+0x8>)
 8009302:	f000 b8af 	b.w	8009464 <_fwalk_reent>
 8009306:	bf00      	nop
 8009308:	08009241 	.word	0x08009241

0800930c <__sfmoreglue>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	1e4a      	subs	r2, r1, #1
 8009310:	2568      	movs	r5, #104	; 0x68
 8009312:	4355      	muls	r5, r2
 8009314:	460e      	mov	r6, r1
 8009316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800931a:	f7ff fa87 	bl	800882c <_malloc_r>
 800931e:	4604      	mov	r4, r0
 8009320:	b140      	cbz	r0, 8009334 <__sfmoreglue+0x28>
 8009322:	2100      	movs	r1, #0
 8009324:	e9c0 1600 	strd	r1, r6, [r0]
 8009328:	300c      	adds	r0, #12
 800932a:	60a0      	str	r0, [r4, #8]
 800932c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009330:	f7fd fc0a 	bl	8006b48 <memset>
 8009334:	4620      	mov	r0, r4
 8009336:	bd70      	pop	{r4, r5, r6, pc}

08009338 <__sfp_lock_acquire>:
 8009338:	4801      	ldr	r0, [pc, #4]	; (8009340 <__sfp_lock_acquire+0x8>)
 800933a:	f000 b8b3 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 800933e:	bf00      	nop
 8009340:	20009444 	.word	0x20009444

08009344 <__sfp_lock_release>:
 8009344:	4801      	ldr	r0, [pc, #4]	; (800934c <__sfp_lock_release+0x8>)
 8009346:	f000 b8ae 	b.w	80094a6 <__retarget_lock_release_recursive>
 800934a:	bf00      	nop
 800934c:	20009444 	.word	0x20009444

08009350 <__sinit_lock_acquire>:
 8009350:	4801      	ldr	r0, [pc, #4]	; (8009358 <__sinit_lock_acquire+0x8>)
 8009352:	f000 b8a7 	b.w	80094a4 <__retarget_lock_acquire_recursive>
 8009356:	bf00      	nop
 8009358:	2000943f 	.word	0x2000943f

0800935c <__sinit_lock_release>:
 800935c:	4801      	ldr	r0, [pc, #4]	; (8009364 <__sinit_lock_release+0x8>)
 800935e:	f000 b8a2 	b.w	80094a6 <__retarget_lock_release_recursive>
 8009362:	bf00      	nop
 8009364:	2000943f 	.word	0x2000943f

08009368 <__sinit>:
 8009368:	b510      	push	{r4, lr}
 800936a:	4604      	mov	r4, r0
 800936c:	f7ff fff0 	bl	8009350 <__sinit_lock_acquire>
 8009370:	69a3      	ldr	r3, [r4, #24]
 8009372:	b11b      	cbz	r3, 800937c <__sinit+0x14>
 8009374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009378:	f7ff bff0 	b.w	800935c <__sinit_lock_release>
 800937c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009380:	6523      	str	r3, [r4, #80]	; 0x50
 8009382:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <__sinit+0x68>)
 8009384:	4a13      	ldr	r2, [pc, #76]	; (80093d4 <__sinit+0x6c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	62a2      	str	r2, [r4, #40]	; 0x28
 800938a:	42a3      	cmp	r3, r4
 800938c:	bf04      	itt	eq
 800938e:	2301      	moveq	r3, #1
 8009390:	61a3      	streq	r3, [r4, #24]
 8009392:	4620      	mov	r0, r4
 8009394:	f000 f820 	bl	80093d8 <__sfp>
 8009398:	6060      	str	r0, [r4, #4]
 800939a:	4620      	mov	r0, r4
 800939c:	f000 f81c 	bl	80093d8 <__sfp>
 80093a0:	60a0      	str	r0, [r4, #8]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 f818 	bl	80093d8 <__sfp>
 80093a8:	2200      	movs	r2, #0
 80093aa:	60e0      	str	r0, [r4, #12]
 80093ac:	2104      	movs	r1, #4
 80093ae:	6860      	ldr	r0, [r4, #4]
 80093b0:	f7ff ff82 	bl	80092b8 <std>
 80093b4:	68a0      	ldr	r0, [r4, #8]
 80093b6:	2201      	movs	r2, #1
 80093b8:	2109      	movs	r1, #9
 80093ba:	f7ff ff7d 	bl	80092b8 <std>
 80093be:	68e0      	ldr	r0, [r4, #12]
 80093c0:	2202      	movs	r2, #2
 80093c2:	2112      	movs	r1, #18
 80093c4:	f7ff ff78 	bl	80092b8 <std>
 80093c8:	2301      	movs	r3, #1
 80093ca:	61a3      	str	r3, [r4, #24]
 80093cc:	e7d2      	b.n	8009374 <__sinit+0xc>
 80093ce:	bf00      	nop
 80093d0:	0801b7f0 	.word	0x0801b7f0
 80093d4:	08009301 	.word	0x08009301

080093d8 <__sfp>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	4607      	mov	r7, r0
 80093dc:	f7ff ffac 	bl	8009338 <__sfp_lock_acquire>
 80093e0:	4b1e      	ldr	r3, [pc, #120]	; (800945c <__sfp+0x84>)
 80093e2:	681e      	ldr	r6, [r3, #0]
 80093e4:	69b3      	ldr	r3, [r6, #24]
 80093e6:	b913      	cbnz	r3, 80093ee <__sfp+0x16>
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff ffbd 	bl	8009368 <__sinit>
 80093ee:	3648      	adds	r6, #72	; 0x48
 80093f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	d503      	bpl.n	8009400 <__sfp+0x28>
 80093f8:	6833      	ldr	r3, [r6, #0]
 80093fa:	b30b      	cbz	r3, 8009440 <__sfp+0x68>
 80093fc:	6836      	ldr	r6, [r6, #0]
 80093fe:	e7f7      	b.n	80093f0 <__sfp+0x18>
 8009400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009404:	b9d5      	cbnz	r5, 800943c <__sfp+0x64>
 8009406:	4b16      	ldr	r3, [pc, #88]	; (8009460 <__sfp+0x88>)
 8009408:	60e3      	str	r3, [r4, #12]
 800940a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800940e:	6665      	str	r5, [r4, #100]	; 0x64
 8009410:	f000 f847 	bl	80094a2 <__retarget_lock_init_recursive>
 8009414:	f7ff ff96 	bl	8009344 <__sfp_lock_release>
 8009418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800941c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009420:	6025      	str	r5, [r4, #0]
 8009422:	61a5      	str	r5, [r4, #24]
 8009424:	2208      	movs	r2, #8
 8009426:	4629      	mov	r1, r5
 8009428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800942c:	f7fd fb8c 	bl	8006b48 <memset>
 8009430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009438:	4620      	mov	r0, r4
 800943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800943c:	3468      	adds	r4, #104	; 0x68
 800943e:	e7d9      	b.n	80093f4 <__sfp+0x1c>
 8009440:	2104      	movs	r1, #4
 8009442:	4638      	mov	r0, r7
 8009444:	f7ff ff62 	bl	800930c <__sfmoreglue>
 8009448:	4604      	mov	r4, r0
 800944a:	6030      	str	r0, [r6, #0]
 800944c:	2800      	cmp	r0, #0
 800944e:	d1d5      	bne.n	80093fc <__sfp+0x24>
 8009450:	f7ff ff78 	bl	8009344 <__sfp_lock_release>
 8009454:	230c      	movs	r3, #12
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	e7ee      	b.n	8009438 <__sfp+0x60>
 800945a:	bf00      	nop
 800945c:	0801b7f0 	.word	0x0801b7f0
 8009460:	ffff0001 	.word	0xffff0001

08009464 <_fwalk_reent>:
 8009464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009468:	4606      	mov	r6, r0
 800946a:	4688      	mov	r8, r1
 800946c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009470:	2700      	movs	r7, #0
 8009472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009476:	f1b9 0901 	subs.w	r9, r9, #1
 800947a:	d505      	bpl.n	8009488 <_fwalk_reent+0x24>
 800947c:	6824      	ldr	r4, [r4, #0]
 800947e:	2c00      	cmp	r4, #0
 8009480:	d1f7      	bne.n	8009472 <_fwalk_reent+0xe>
 8009482:	4638      	mov	r0, r7
 8009484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009488:	89ab      	ldrh	r3, [r5, #12]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d907      	bls.n	800949e <_fwalk_reent+0x3a>
 800948e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009492:	3301      	adds	r3, #1
 8009494:	d003      	beq.n	800949e <_fwalk_reent+0x3a>
 8009496:	4629      	mov	r1, r5
 8009498:	4630      	mov	r0, r6
 800949a:	47c0      	blx	r8
 800949c:	4307      	orrs	r7, r0
 800949e:	3568      	adds	r5, #104	; 0x68
 80094a0:	e7e9      	b.n	8009476 <_fwalk_reent+0x12>

080094a2 <__retarget_lock_init_recursive>:
 80094a2:	4770      	bx	lr

080094a4 <__retarget_lock_acquire_recursive>:
 80094a4:	4770      	bx	lr

080094a6 <__retarget_lock_release_recursive>:
 80094a6:	4770      	bx	lr

080094a8 <__swhatbuf_r>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	460e      	mov	r6, r1
 80094ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b0:	2900      	cmp	r1, #0
 80094b2:	b096      	sub	sp, #88	; 0x58
 80094b4:	4614      	mov	r4, r2
 80094b6:	461d      	mov	r5, r3
 80094b8:	da07      	bge.n	80094ca <__swhatbuf_r+0x22>
 80094ba:	2300      	movs	r3, #0
 80094bc:	602b      	str	r3, [r5, #0]
 80094be:	89b3      	ldrh	r3, [r6, #12]
 80094c0:	061a      	lsls	r2, r3, #24
 80094c2:	d410      	bmi.n	80094e6 <__swhatbuf_r+0x3e>
 80094c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094c8:	e00e      	b.n	80094e8 <__swhatbuf_r+0x40>
 80094ca:	466a      	mov	r2, sp
 80094cc:	f000 f902 	bl	80096d4 <_fstat_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	dbf2      	blt.n	80094ba <__swhatbuf_r+0x12>
 80094d4:	9a01      	ldr	r2, [sp, #4]
 80094d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094de:	425a      	negs	r2, r3
 80094e0:	415a      	adcs	r2, r3
 80094e2:	602a      	str	r2, [r5, #0]
 80094e4:	e7ee      	b.n	80094c4 <__swhatbuf_r+0x1c>
 80094e6:	2340      	movs	r3, #64	; 0x40
 80094e8:	2000      	movs	r0, #0
 80094ea:	6023      	str	r3, [r4, #0]
 80094ec:	b016      	add	sp, #88	; 0x58
 80094ee:	bd70      	pop	{r4, r5, r6, pc}

080094f0 <__smakebuf_r>:
 80094f0:	898b      	ldrh	r3, [r1, #12]
 80094f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094f4:	079d      	lsls	r5, r3, #30
 80094f6:	4606      	mov	r6, r0
 80094f8:	460c      	mov	r4, r1
 80094fa:	d507      	bpl.n	800950c <__smakebuf_r+0x1c>
 80094fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	6123      	str	r3, [r4, #16]
 8009504:	2301      	movs	r3, #1
 8009506:	6163      	str	r3, [r4, #20]
 8009508:	b002      	add	sp, #8
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	ab01      	add	r3, sp, #4
 800950e:	466a      	mov	r2, sp
 8009510:	f7ff ffca 	bl	80094a8 <__swhatbuf_r>
 8009514:	9900      	ldr	r1, [sp, #0]
 8009516:	4605      	mov	r5, r0
 8009518:	4630      	mov	r0, r6
 800951a:	f7ff f987 	bl	800882c <_malloc_r>
 800951e:	b948      	cbnz	r0, 8009534 <__smakebuf_r+0x44>
 8009520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009524:	059a      	lsls	r2, r3, #22
 8009526:	d4ef      	bmi.n	8009508 <__smakebuf_r+0x18>
 8009528:	f023 0303 	bic.w	r3, r3, #3
 800952c:	f043 0302 	orr.w	r3, r3, #2
 8009530:	81a3      	strh	r3, [r4, #12]
 8009532:	e7e3      	b.n	80094fc <__smakebuf_r+0xc>
 8009534:	4b0d      	ldr	r3, [pc, #52]	; (800956c <__smakebuf_r+0x7c>)
 8009536:	62b3      	str	r3, [r6, #40]	; 0x28
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	6020      	str	r0, [r4, #0]
 800953c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009540:	81a3      	strh	r3, [r4, #12]
 8009542:	9b00      	ldr	r3, [sp, #0]
 8009544:	6163      	str	r3, [r4, #20]
 8009546:	9b01      	ldr	r3, [sp, #4]
 8009548:	6120      	str	r0, [r4, #16]
 800954a:	b15b      	cbz	r3, 8009564 <__smakebuf_r+0x74>
 800954c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009550:	4630      	mov	r0, r6
 8009552:	f000 f8d1 	bl	80096f8 <_isatty_r>
 8009556:	b128      	cbz	r0, 8009564 <__smakebuf_r+0x74>
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	f023 0303 	bic.w	r3, r3, #3
 800955e:	f043 0301 	orr.w	r3, r3, #1
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	89a0      	ldrh	r0, [r4, #12]
 8009566:	4305      	orrs	r5, r0
 8009568:	81a5      	strh	r5, [r4, #12]
 800956a:	e7cd      	b.n	8009508 <__smakebuf_r+0x18>
 800956c:	08009301 	.word	0x08009301

08009570 <_malloc_usable_size_r>:
 8009570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009574:	1f18      	subs	r0, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfbc      	itt	lt
 800957a:	580b      	ldrlt	r3, [r1, r0]
 800957c:	18c0      	addlt	r0, r0, r3
 800957e:	4770      	bx	lr

08009580 <_raise_r>:
 8009580:	291f      	cmp	r1, #31
 8009582:	b538      	push	{r3, r4, r5, lr}
 8009584:	4604      	mov	r4, r0
 8009586:	460d      	mov	r5, r1
 8009588:	d904      	bls.n	8009594 <_raise_r+0x14>
 800958a:	2316      	movs	r3, #22
 800958c:	6003      	str	r3, [r0, #0]
 800958e:	f04f 30ff 	mov.w	r0, #4294967295
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009596:	b112      	cbz	r2, 800959e <_raise_r+0x1e>
 8009598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800959c:	b94b      	cbnz	r3, 80095b2 <_raise_r+0x32>
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 f830 	bl	8009604 <_getpid_r>
 80095a4:	462a      	mov	r2, r5
 80095a6:	4601      	mov	r1, r0
 80095a8:	4620      	mov	r0, r4
 80095aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095ae:	f000 b817 	b.w	80095e0 <_kill_r>
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d00a      	beq.n	80095cc <_raise_r+0x4c>
 80095b6:	1c59      	adds	r1, r3, #1
 80095b8:	d103      	bne.n	80095c2 <_raise_r+0x42>
 80095ba:	2316      	movs	r3, #22
 80095bc:	6003      	str	r3, [r0, #0]
 80095be:	2001      	movs	r0, #1
 80095c0:	e7e7      	b.n	8009592 <_raise_r+0x12>
 80095c2:	2400      	movs	r4, #0
 80095c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095c8:	4628      	mov	r0, r5
 80095ca:	4798      	blx	r3
 80095cc:	2000      	movs	r0, #0
 80095ce:	e7e0      	b.n	8009592 <_raise_r+0x12>

080095d0 <raise>:
 80095d0:	4b02      	ldr	r3, [pc, #8]	; (80095dc <raise+0xc>)
 80095d2:	4601      	mov	r1, r0
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	f7ff bfd3 	b.w	8009580 <_raise_r>
 80095da:	bf00      	nop
 80095dc:	20000094 	.word	0x20000094

080095e0 <_kill_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4d07      	ldr	r5, [pc, #28]	; (8009600 <_kill_r+0x20>)
 80095e4:	2300      	movs	r3, #0
 80095e6:	4604      	mov	r4, r0
 80095e8:	4608      	mov	r0, r1
 80095ea:	4611      	mov	r1, r2
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	f7f9 f8d1 	bl	8002794 <_kill>
 80095f2:	1c43      	adds	r3, r0, #1
 80095f4:	d102      	bne.n	80095fc <_kill_r+0x1c>
 80095f6:	682b      	ldr	r3, [r5, #0]
 80095f8:	b103      	cbz	r3, 80095fc <_kill_r+0x1c>
 80095fa:	6023      	str	r3, [r4, #0]
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
 80095fe:	bf00      	nop
 8009600:	20009438 	.word	0x20009438

08009604 <_getpid_r>:
 8009604:	f7f9 b8be 	b.w	8002784 <_getpid>

08009608 <__sread>:
 8009608:	b510      	push	{r4, lr}
 800960a:	460c      	mov	r4, r1
 800960c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009610:	f000 f894 	bl	800973c <_read_r>
 8009614:	2800      	cmp	r0, #0
 8009616:	bfab      	itete	ge
 8009618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800961a:	89a3      	ldrhlt	r3, [r4, #12]
 800961c:	181b      	addge	r3, r3, r0
 800961e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009622:	bfac      	ite	ge
 8009624:	6563      	strge	r3, [r4, #84]	; 0x54
 8009626:	81a3      	strhlt	r3, [r4, #12]
 8009628:	bd10      	pop	{r4, pc}

0800962a <__swrite>:
 800962a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800962e:	461f      	mov	r7, r3
 8009630:	898b      	ldrh	r3, [r1, #12]
 8009632:	05db      	lsls	r3, r3, #23
 8009634:	4605      	mov	r5, r0
 8009636:	460c      	mov	r4, r1
 8009638:	4616      	mov	r6, r2
 800963a:	d505      	bpl.n	8009648 <__swrite+0x1e>
 800963c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009640:	2302      	movs	r3, #2
 8009642:	2200      	movs	r2, #0
 8009644:	f000 f868 	bl	8009718 <_lseek_r>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800964e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	4632      	mov	r2, r6
 8009656:	463b      	mov	r3, r7
 8009658:	4628      	mov	r0, r5
 800965a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800965e:	f000 b817 	b.w	8009690 <_write_r>

08009662 <__sseek>:
 8009662:	b510      	push	{r4, lr}
 8009664:	460c      	mov	r4, r1
 8009666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800966a:	f000 f855 	bl	8009718 <_lseek_r>
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	bf15      	itete	ne
 8009674:	6560      	strne	r0, [r4, #84]	; 0x54
 8009676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800967a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800967e:	81a3      	strheq	r3, [r4, #12]
 8009680:	bf18      	it	ne
 8009682:	81a3      	strhne	r3, [r4, #12]
 8009684:	bd10      	pop	{r4, pc}

08009686 <__sclose>:
 8009686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968a:	f000 b813 	b.w	80096b4 <_close_r>
	...

08009690 <_write_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d07      	ldr	r5, [pc, #28]	; (80096b0 <_write_r+0x20>)
 8009694:	4604      	mov	r4, r0
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	2200      	movs	r2, #0
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f9 f8af 	bl	8002802 <_write>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_write_r+0x1e>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_write_r+0x1e>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20009438 	.word	0x20009438

080096b4 <_close_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4d06      	ldr	r5, [pc, #24]	; (80096d0 <_close_r+0x1c>)
 80096b8:	2300      	movs	r3, #0
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	f7f9 f8bb 	bl	800283a <_close>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_close_r+0x1a>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_close_r+0x1a>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	20009438 	.word	0x20009438

080096d4 <_fstat_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	; (80096f4 <_fstat_r+0x20>)
 80096d8:	2300      	movs	r3, #0
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	4611      	mov	r1, r2
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	f7f9 f8b6 	bl	8002852 <_fstat>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	d102      	bne.n	80096f0 <_fstat_r+0x1c>
 80096ea:	682b      	ldr	r3, [r5, #0]
 80096ec:	b103      	cbz	r3, 80096f0 <_fstat_r+0x1c>
 80096ee:	6023      	str	r3, [r4, #0]
 80096f0:	bd38      	pop	{r3, r4, r5, pc}
 80096f2:	bf00      	nop
 80096f4:	20009438 	.word	0x20009438

080096f8 <_isatty_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d06      	ldr	r5, [pc, #24]	; (8009714 <_isatty_r+0x1c>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	f7f9 f8b5 	bl	8002872 <_isatty>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_isatty_r+0x1a>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_isatty_r+0x1a>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20009438 	.word	0x20009438

08009718 <_lseek_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4d07      	ldr	r5, [pc, #28]	; (8009738 <_lseek_r+0x20>)
 800971c:	4604      	mov	r4, r0
 800971e:	4608      	mov	r0, r1
 8009720:	4611      	mov	r1, r2
 8009722:	2200      	movs	r2, #0
 8009724:	602a      	str	r2, [r5, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	f7f9 f8ae 	bl	8002888 <_lseek>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_lseek_r+0x1e>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_lseek_r+0x1e>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	20009438 	.word	0x20009438

0800973c <_read_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	; (800975c <_read_r+0x20>)
 8009740:	4604      	mov	r4, r0
 8009742:	4608      	mov	r0, r1
 8009744:	4611      	mov	r1, r2
 8009746:	2200      	movs	r2, #0
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f7f9 f83c 	bl	80027c8 <_read>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_read_r+0x1e>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_read_r+0x1e>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20009438 	.word	0x20009438

08009760 <_init>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	bf00      	nop
 8009764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009766:	bc08      	pop	{r3}
 8009768:	469e      	mov	lr, r3
 800976a:	4770      	bx	lr

0800976c <_fini>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	bf00      	nop
 8009770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009772:	bc08      	pop	{r3}
 8009774:	469e      	mov	lr, r3
 8009776:	4770      	bx	lr
